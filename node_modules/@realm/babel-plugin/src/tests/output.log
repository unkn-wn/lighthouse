
> @realm/babel-plugin@0.1.0 test
> jest

  console.log
    class Person extends Realm.Object {}

      at transform (src/tests/transform.ts:53:13)

  console.log
    import * as Realm from 'realm';
    
    // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {}
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm from 'realm';
    
    // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {}
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import { Object } from 'realm';
    
    // Modified by @realm/babel-plugin
    class Person extends Object {
      static schema = {
        name: "Person",
        properties: {}
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Object } from 'realm';
    
    // Modified by @realm/babel-plugin
    class Person extends Object {
      static schema = {
        name: "Person",
        properties: {}
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import { Object } from 'realm';
    
    // Modified by @realm/babel-plugin
    class Person extends Object {
      static schema = {
        name: "Person",
        properties: {}
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import * as RealmReact from '@realm/react';
    
    // Modified by @realm/babel-plugin
    class Person extends RealmReact.Realm.Object {
      static schema = {
        name: "Person",
        properties: {}
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import { Realm } from '@realm/react';
    
    // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {}
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "bool"
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "bool"
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "bool"
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "bool",
            optional: true
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "bool",
            optional: true
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "bool",
            optional: true
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "bool",
            optional: true
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "bool",
            optional: true
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "bool",
            optional: true
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "bool",
            optional: true
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "bool",
            optional: true
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "bool",
            optional: true
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = true;
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "bool",
            default: true
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = true;
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "bool",
            default: true
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = true;
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "bool",
            default: true
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = true;
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "bool",
            optional: true,
            default: true
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = true;
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "bool",
            optional: true,
            default: true
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = true;
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "bool",
            optional: true,
            default: true
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = true;
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "bool",
            optional: true,
            default: true
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = true;
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "bool",
            optional: true,
            default: true
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = true;
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "bool",
            optional: true,
            default: true
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = true;
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "bool",
            optional: true,
            default: true
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = true;
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "bool",
            optional: true,
            default: true
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = true;
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "bool",
            optional: true,
            default: true
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = false;
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "bool",
            default: false
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = false;
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "bool",
            default: false
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = false;
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "bool",
            default: false
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = false;
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "bool",
            optional: true,
            default: false
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = false;
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "bool",
            optional: true,
            default: false
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = false;
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "bool",
            optional: true,
            default: false
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = false;
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "bool",
            optional: true,
            default: false
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = false;
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "bool",
            optional: true,
            default: false
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = false;
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "bool",
            optional: true,
            default: false
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = false;
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "bool",
            optional: true,
            default: false
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = false;
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "bool",
            optional: true,
            default: false
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = false;
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "bool",
            optional: true,
            default: false
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "int"
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "int"
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "int",
            optional: true
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "int",
            optional: true
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "int",
            optional: true
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "int",
            optional: true
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "int",
            optional: true
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "int",
            optional: true
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = 123;
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "int",
            default: 123
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = 123;
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "int",
            default: 123
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = 123;
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "int",
            optional: true,
            default: 123
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = 123;
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "int",
            optional: true,
            default: 123
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = 123;
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "int",
            optional: true,
            default: 123
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = 123;
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "int",
            optional: true,
            default: 123
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = 123;
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "int",
            optional: true,
            default: 123
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = 123;
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "int",
            optional: true,
            default: 123
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "float"
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "float"
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "float",
            optional: true
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "float",
            optional: true
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "float",
            optional: true
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "float",
            optional: true
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "float",
            optional: true
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "float",
            optional: true
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = 123;
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "float",
            default: 123
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = 123;
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "float",
            default: 123
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = 123;
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "float",
            optional: true,
            default: 123
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = 123;
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "float",
            optional: true,
            default: 123
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = 123;
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "float",
            optional: true,
            default: 123
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = 123;
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "float",
            optional: true,
            default: 123
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = 123;
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "float",
            optional: true,
            default: 123
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = 123;
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "float",
            optional: true,
            default: 123
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "double"
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "double"
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "double"
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "double",
            optional: true
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "double",
            optional: true
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "double",
            optional: true
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "double",
            optional: true
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "double",
            optional: true
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "double",
            optional: true
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "double",
            optional: true
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "double",
            optional: true
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "double",
            optional: true
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = 123;
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "double",
            default: 123
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = 123;
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "double",
            default: 123
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = 123;
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "double",
            default: 123
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = 123;
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "double",
            optional: true,
            default: 123
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = 123;
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "double",
            optional: true,
            default: 123
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = 123;
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "double",
            optional: true,
            default: 123
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = 123;
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "double",
            optional: true,
            default: 123
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = 123;
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "double",
            optional: true,
            default: 123
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = 123;
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "double",
            optional: true,
            default: 123
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = 123;
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "double",
            optional: true,
            default: 123
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = 123;
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "double",
            optional: true,
            default: 123
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = 123;
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "double",
            optional: true,
            default: 123
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "string"
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "string"
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "string"
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "string",
            optional: true
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "string",
            optional: true
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "string",
            optional: true
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "string",
            optional: true
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "string",
            optional: true
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "string",
            optional: true
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "string",
            optional: true
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "string",
            optional: true
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "string",
            optional: true
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = "foo";
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "string",
            default: "foo"
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = "foo";
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "string",
            default: "foo"
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = "foo";
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "string",
            default: "foo"
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = "foo";
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "string",
            optional: true,
            default: "foo"
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = "foo";
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "string",
            optional: true,
            default: "foo"
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = "foo";
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "string",
            optional: true,
            default: "foo"
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = "foo";
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "string",
            optional: true,
            default: "foo"
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = "foo";
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "string",
            optional: true,
            default: "foo"
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = "foo";
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "string",
            optional: true,
            default: "foo"
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = "foo";
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "string",
            optional: true,
            default: "foo"
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = "foo";
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "string",
            optional: true,
            default: "foo"
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = "foo";
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "string",
            optional: true,
            default: "foo"
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "decimal128"
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "decimal128"
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "decimal128"
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "decimal128"
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "decimal128",
            optional: true
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "decimal128",
            optional: true
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "decimal128",
            optional: true
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "decimal128",
            optional: true
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "decimal128",
            optional: true
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "decimal128",
            optional: true
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "decimal128",
            optional: true
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "decimal128",
            optional: true
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "decimal128",
            optional: true
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "decimal128",
            optional: true
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "decimal128",
            optional: true
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "decimal128",
            optional: true
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new Realm.Types.Decimal128();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "decimal128",
            default: () => new Realm.Types.Decimal128()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new Realm.Types.Decimal128();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "decimal128",
            default: () => new Realm.Types.Decimal128()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new Realm.Types.Decimal128();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "decimal128",
            default: () => new Realm.Types.Decimal128()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new Realm.Types.Decimal128();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "decimal128",
            default: () => new Realm.Types.Decimal128()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new Realm.Types.Decimal128();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "decimal128",
            optional: true,
            default: () => new Realm.Types.Decimal128()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new Realm.Types.Decimal128();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "decimal128",
            optional: true,
            default: () => new Realm.Types.Decimal128()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new Realm.Types.Decimal128();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "decimal128",
            optional: true,
            default: () => new Realm.Types.Decimal128()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new Realm.Types.Decimal128();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "decimal128",
            optional: true,
            default: () => new Realm.Types.Decimal128()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new Realm.Types.Decimal128();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "decimal128",
            optional: true,
            default: () => new Realm.Types.Decimal128()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new Realm.Types.Decimal128();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "decimal128",
            optional: true,
            default: () => new Realm.Types.Decimal128()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new Realm.Types.Decimal128();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "decimal128",
            optional: true,
            default: () => new Realm.Types.Decimal128()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new Realm.Types.Decimal128();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "decimal128",
            optional: true,
            default: () => new Realm.Types.Decimal128()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new Realm.Types.Decimal128();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "decimal128",
            optional: true,
            default: () => new Realm.Types.Decimal128()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new Realm.Types.Decimal128();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "decimal128",
            optional: true,
            default: () => new Realm.Types.Decimal128()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new Realm.Types.Decimal128();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "decimal128",
            optional: true,
            default: () => new Realm.Types.Decimal128()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new Realm.Types.Decimal128();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "decimal128",
            optional: true,
            default: () => new Realm.Types.Decimal128()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new Types.Decimal128();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "decimal128",
            default: () => new Types.Decimal128()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new Types.Decimal128();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "decimal128",
            default: () => new Types.Decimal128()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new Types.Decimal128();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "decimal128",
            default: () => new Types.Decimal128()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new Types.Decimal128();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "decimal128",
            default: () => new Types.Decimal128()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new Types.Decimal128();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "decimal128",
            optional: true,
            default: () => new Types.Decimal128()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new Types.Decimal128();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "decimal128",
            optional: true,
            default: () => new Types.Decimal128()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new Types.Decimal128();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "decimal128",
            optional: true,
            default: () => new Types.Decimal128()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new Types.Decimal128();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "decimal128",
            optional: true,
            default: () => new Types.Decimal128()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new Types.Decimal128();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "decimal128",
            optional: true,
            default: () => new Types.Decimal128()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new Types.Decimal128();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "decimal128",
            optional: true,
            default: () => new Types.Decimal128()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new Types.Decimal128();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "decimal128",
            optional: true,
            default: () => new Types.Decimal128()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new Types.Decimal128();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "decimal128",
            optional: true,
            default: () => new Types.Decimal128()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new Types.Decimal128();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "decimal128",
            optional: true,
            default: () => new Types.Decimal128()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new Types.Decimal128();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "decimal128",
            optional: true,
            default: () => new Types.Decimal128()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new Types.Decimal128();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "decimal128",
            optional: true,
            default: () => new Types.Decimal128()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new Types.Decimal128();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "decimal128",
            optional: true,
            default: () => new Types.Decimal128()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new Realm.BSON.Decimal128();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "decimal128",
            default: () => new Realm.BSON.Decimal128()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new Realm.BSON.Decimal128();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "decimal128",
            default: () => new Realm.BSON.Decimal128()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new Realm.BSON.Decimal128();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "decimal128",
            default: () => new Realm.BSON.Decimal128()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new Realm.BSON.Decimal128();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "decimal128",
            default: () => new Realm.BSON.Decimal128()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new Realm.BSON.Decimal128();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "decimal128",
            optional: true,
            default: () => new Realm.BSON.Decimal128()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new Realm.BSON.Decimal128();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "decimal128",
            optional: true,
            default: () => new Realm.BSON.Decimal128()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new Realm.BSON.Decimal128();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "decimal128",
            optional: true,
            default: () => new Realm.BSON.Decimal128()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new Realm.BSON.Decimal128();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "decimal128",
            optional: true,
            default: () => new Realm.BSON.Decimal128()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new Realm.BSON.Decimal128();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "decimal128",
            optional: true,
            default: () => new Realm.BSON.Decimal128()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new Realm.BSON.Decimal128();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "decimal128",
            optional: true,
            default: () => new Realm.BSON.Decimal128()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new Realm.BSON.Decimal128();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "decimal128",
            optional: true,
            default: () => new Realm.BSON.Decimal128()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new Realm.BSON.Decimal128();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "decimal128",
            optional: true,
            default: () => new Realm.BSON.Decimal128()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new Realm.BSON.Decimal128();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "decimal128",
            optional: true,
            default: () => new Realm.BSON.Decimal128()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new Realm.BSON.Decimal128();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "decimal128",
            optional: true,
            default: () => new Realm.BSON.Decimal128()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new Realm.BSON.Decimal128();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "decimal128",
            optional: true,
            default: () => new Realm.BSON.Decimal128()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new Realm.BSON.Decimal128();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "decimal128",
            optional: true,
            default: () => new Realm.BSON.Decimal128()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new BSON.Decimal128();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "decimal128",
            default: () => new BSON.Decimal128()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new BSON.Decimal128();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "decimal128",
            default: () => new BSON.Decimal128()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new BSON.Decimal128();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "decimal128",
            default: () => new BSON.Decimal128()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new BSON.Decimal128();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "decimal128",
            default: () => new BSON.Decimal128()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new BSON.Decimal128();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "decimal128",
            optional: true,
            default: () => new BSON.Decimal128()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new BSON.Decimal128();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "decimal128",
            optional: true,
            default: () => new BSON.Decimal128()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new BSON.Decimal128();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "decimal128",
            optional: true,
            default: () => new BSON.Decimal128()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new BSON.Decimal128();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "decimal128",
            optional: true,
            default: () => new BSON.Decimal128()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new BSON.Decimal128();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "decimal128",
            optional: true,
            default: () => new BSON.Decimal128()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new BSON.Decimal128();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "decimal128",
            optional: true,
            default: () => new BSON.Decimal128()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new BSON.Decimal128();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "decimal128",
            optional: true,
            default: () => new BSON.Decimal128()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new BSON.Decimal128();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "decimal128",
            optional: true,
            default: () => new BSON.Decimal128()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new BSON.Decimal128();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "decimal128",
            optional: true,
            default: () => new BSON.Decimal128()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new BSON.Decimal128();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "decimal128",
            optional: true,
            default: () => new BSON.Decimal128()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new BSON.Decimal128();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "decimal128",
            optional: true,
            default: () => new BSON.Decimal128()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new BSON.Decimal128();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "decimal128",
            optional: true,
            default: () => new BSON.Decimal128()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "objectId"
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "objectId"
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "objectId"
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "objectId"
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "objectId",
            optional: true
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "objectId",
            optional: true
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "objectId",
            optional: true
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "objectId",
            optional: true
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "objectId",
            optional: true
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "objectId",
            optional: true
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "objectId",
            optional: true
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "objectId",
            optional: true
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "objectId",
            optional: true
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "objectId",
            optional: true
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "objectId",
            optional: true
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "objectId",
            optional: true
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new Realm.Types.ObjectId();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "objectId",
            default: () => new Realm.Types.ObjectId()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new Realm.Types.ObjectId();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "objectId",
            default: () => new Realm.Types.ObjectId()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new Realm.Types.ObjectId();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "objectId",
            default: () => new Realm.Types.ObjectId()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new Realm.Types.ObjectId();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "objectId",
            default: () => new Realm.Types.ObjectId()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new Realm.Types.ObjectId();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "objectId",
            default: () => new Realm.Types.ObjectId()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new Realm.Types.ObjectId();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "objectId",
            optional: true,
            default: () => new Realm.Types.ObjectId()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new Realm.Types.ObjectId();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "objectId",
            optional: true,
            default: () => new Realm.Types.ObjectId()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new Realm.Types.ObjectId();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "objectId",
            optional: true,
            default: () => new Realm.Types.ObjectId()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new Realm.Types.ObjectId();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "objectId",
            optional: true,
            default: () => new Realm.Types.ObjectId()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new Realm.Types.ObjectId();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "objectId",
            optional: true,
            default: () => new Realm.Types.ObjectId()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new Realm.Types.ObjectId();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "objectId",
            optional: true,
            default: () => new Realm.Types.ObjectId()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new Realm.Types.ObjectId();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "objectId",
            optional: true,
            default: () => new Realm.Types.ObjectId()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new Realm.Types.ObjectId();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "objectId",
            optional: true,
            default: () => new Realm.Types.ObjectId()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new Realm.Types.ObjectId();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "objectId",
            optional: true,
            default: () => new Realm.Types.ObjectId()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new Realm.Types.ObjectId();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "objectId",
            optional: true,
            default: () => new Realm.Types.ObjectId()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new Realm.Types.ObjectId();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "objectId",
            optional: true,
            default: () => new Realm.Types.ObjectId()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new Realm.Types.ObjectId();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "objectId",
            optional: true,
            default: () => new Realm.Types.ObjectId()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new Realm.Types.ObjectId();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "objectId",
            optional: true,
            default: () => new Realm.Types.ObjectId()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new Types.ObjectId();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "objectId",
            default: () => new Types.ObjectId()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new Types.ObjectId();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "objectId",
            default: () => new Types.ObjectId()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new Types.ObjectId();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "objectId",
            default: () => new Types.ObjectId()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new Types.ObjectId();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "objectId",
            default: () => new Types.ObjectId()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new Types.ObjectId();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "objectId",
            default: () => new Types.ObjectId()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new Types.ObjectId();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "objectId",
            optional: true,
            default: () => new Types.ObjectId()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new Types.ObjectId();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "objectId",
            optional: true,
            default: () => new Types.ObjectId()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new Types.ObjectId();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "objectId",
            optional: true,
            default: () => new Types.ObjectId()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new Types.ObjectId();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "objectId",
            optional: true,
            default: () => new Types.ObjectId()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new Types.ObjectId();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "objectId",
            optional: true,
            default: () => new Types.ObjectId()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new Types.ObjectId();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "objectId",
            optional: true,
            default: () => new Types.ObjectId()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new Types.ObjectId();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "objectId",
            optional: true,
            default: () => new Types.ObjectId()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new Types.ObjectId();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "objectId",
            optional: true,
            default: () => new Types.ObjectId()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new Types.ObjectId();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "objectId",
            optional: true,
            default: () => new Types.ObjectId()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new Types.ObjectId();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "objectId",
            optional: true,
            default: () => new Types.ObjectId()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new Types.ObjectId();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "objectId",
            optional: true,
            default: () => new Types.ObjectId()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new Types.ObjectId();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "objectId",
            optional: true,
            default: () => new Types.ObjectId()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new Types.ObjectId();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "objectId",
            optional: true,
            default: () => new Types.ObjectId()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new Realm.BSON.ObjectId();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "objectId",
            default: () => new Realm.BSON.ObjectId()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new Realm.BSON.ObjectId();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "objectId",
            default: () => new Realm.BSON.ObjectId()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new Realm.BSON.ObjectId();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "objectId",
            default: () => new Realm.BSON.ObjectId()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new Realm.BSON.ObjectId();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "objectId",
            default: () => new Realm.BSON.ObjectId()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new Realm.BSON.ObjectId();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "objectId",
            default: () => new Realm.BSON.ObjectId()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new Realm.BSON.ObjectId();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "objectId",
            optional: true,
            default: () => new Realm.BSON.ObjectId()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new Realm.BSON.ObjectId();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "objectId",
            optional: true,
            default: () => new Realm.BSON.ObjectId()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new Realm.BSON.ObjectId();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "objectId",
            optional: true,
            default: () => new Realm.BSON.ObjectId()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new Realm.BSON.ObjectId();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "objectId",
            optional: true,
            default: () => new Realm.BSON.ObjectId()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new Realm.BSON.ObjectId();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "objectId",
            optional: true,
            default: () => new Realm.BSON.ObjectId()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new Realm.BSON.ObjectId();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "objectId",
            optional: true,
            default: () => new Realm.BSON.ObjectId()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new Realm.BSON.ObjectId();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "objectId",
            optional: true,
            default: () => new Realm.BSON.ObjectId()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new Realm.BSON.ObjectId();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "objectId",
            optional: true,
            default: () => new Realm.BSON.ObjectId()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new Realm.BSON.ObjectId();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "objectId",
            optional: true,
            default: () => new Realm.BSON.ObjectId()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new Realm.BSON.ObjectId();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "objectId",
            optional: true,
            default: () => new Realm.BSON.ObjectId()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new Realm.BSON.ObjectId();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "objectId",
            optional: true,
            default: () => new Realm.BSON.ObjectId()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new Realm.BSON.ObjectId();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "objectId",
            optional: true,
            default: () => new Realm.BSON.ObjectId()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new Realm.BSON.ObjectId();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "objectId",
            optional: true,
            default: () => new Realm.BSON.ObjectId()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new BSON.ObjectId();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "objectId",
            default: () => new BSON.ObjectId()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new BSON.ObjectId();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "objectId",
            default: () => new BSON.ObjectId()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new BSON.ObjectId();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "objectId",
            default: () => new BSON.ObjectId()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new BSON.ObjectId();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "objectId",
            default: () => new BSON.ObjectId()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new BSON.ObjectId();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "objectId",
            default: () => new BSON.ObjectId()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new BSON.ObjectId();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "objectId",
            optional: true,
            default: () => new BSON.ObjectId()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new BSON.ObjectId();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "objectId",
            optional: true,
            default: () => new BSON.ObjectId()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new BSON.ObjectId();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "objectId",
            optional: true,
            default: () => new BSON.ObjectId()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new BSON.ObjectId();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "objectId",
            optional: true,
            default: () => new BSON.ObjectId()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new BSON.ObjectId();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "objectId",
            optional: true,
            default: () => new BSON.ObjectId()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new BSON.ObjectId();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "objectId",
            optional: true,
            default: () => new BSON.ObjectId()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new BSON.ObjectId();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "objectId",
            optional: true,
            default: () => new BSON.ObjectId()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new BSON.ObjectId();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "objectId",
            optional: true,
            default: () => new BSON.ObjectId()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new BSON.ObjectId();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "objectId",
            optional: true,
            default: () => new BSON.ObjectId()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new BSON.ObjectId();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "objectId",
            optional: true,
            default: () => new BSON.ObjectId()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new BSON.ObjectId();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "objectId",
            optional: true,
            default: () => new BSON.ObjectId()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new BSON.ObjectId();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "objectId",
            optional: true,
            default: () => new BSON.ObjectId()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new BSON.ObjectId();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "objectId",
            optional: true,
            default: () => new BSON.ObjectId()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "uuid"
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "uuid"
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "uuid"
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "uuid"
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "uuid",
            optional: true
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "uuid",
            optional: true
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "uuid",
            optional: true
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "uuid",
            optional: true
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "uuid",
            optional: true
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "uuid",
            optional: true
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "uuid",
            optional: true
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "uuid",
            optional: true
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "uuid",
            optional: true
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "uuid",
            optional: true
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "uuid",
            optional: true
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "uuid",
            optional: true
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new Realm.Types.UUID();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "uuid",
            default: () => new Realm.Types.UUID()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new Realm.Types.UUID();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "uuid",
            default: () => new Realm.Types.UUID()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new Realm.Types.UUID();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "uuid",
            default: () => new Realm.Types.UUID()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new Realm.Types.UUID();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "uuid",
            default: () => new Realm.Types.UUID()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new Realm.Types.UUID();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "uuid",
            optional: true,
            default: () => new Realm.Types.UUID()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new Realm.Types.UUID();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "uuid",
            optional: true,
            default: () => new Realm.Types.UUID()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new Realm.Types.UUID();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "uuid",
            optional: true,
            default: () => new Realm.Types.UUID()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new Realm.Types.UUID();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "uuid",
            optional: true,
            default: () => new Realm.Types.UUID()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new Realm.Types.UUID();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "uuid",
            optional: true,
            default: () => new Realm.Types.UUID()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new Realm.Types.UUID();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "uuid",
            optional: true,
            default: () => new Realm.Types.UUID()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new Realm.Types.UUID();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "uuid",
            optional: true,
            default: () => new Realm.Types.UUID()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new Realm.Types.UUID();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "uuid",
            optional: true,
            default: () => new Realm.Types.UUID()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new Realm.Types.UUID();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "uuid",
            optional: true,
            default: () => new Realm.Types.UUID()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new Realm.Types.UUID();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "uuid",
            optional: true,
            default: () => new Realm.Types.UUID()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new Realm.Types.UUID();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "uuid",
            optional: true,
            default: () => new Realm.Types.UUID()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new Realm.Types.UUID();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "uuid",
            optional: true,
            default: () => new Realm.Types.UUID()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new Types.UUID();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "uuid",
            default: () => new Types.UUID()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new Types.UUID();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "uuid",
            default: () => new Types.UUID()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new Types.UUID();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "uuid",
            default: () => new Types.UUID()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new Types.UUID();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "uuid",
            default: () => new Types.UUID()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new Types.UUID();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "uuid",
            optional: true,
            default: () => new Types.UUID()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new Types.UUID();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "uuid",
            optional: true,
            default: () => new Types.UUID()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new Types.UUID();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "uuid",
            optional: true,
            default: () => new Types.UUID()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new Types.UUID();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "uuid",
            optional: true,
            default: () => new Types.UUID()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new Types.UUID();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "uuid",
            optional: true,
            default: () => new Types.UUID()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new Types.UUID();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "uuid",
            optional: true,
            default: () => new Types.UUID()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new Types.UUID();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "uuid",
            optional: true,
            default: () => new Types.UUID()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new Types.UUID();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "uuid",
            optional: true,
            default: () => new Types.UUID()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new Types.UUID();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "uuid",
            optional: true,
            default: () => new Types.UUID()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new Types.UUID();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "uuid",
            optional: true,
            default: () => new Types.UUID()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new Types.UUID();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "uuid",
            optional: true,
            default: () => new Types.UUID()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new Types.UUID();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "uuid",
            optional: true,
            default: () => new Types.UUID()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new Realm.BSON.UUID();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "uuid",
            default: () => new Realm.BSON.UUID()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new Realm.BSON.UUID();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "uuid",
            default: () => new Realm.BSON.UUID()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new Realm.BSON.UUID();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "uuid",
            default: () => new Realm.BSON.UUID()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new Realm.BSON.UUID();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "uuid",
            default: () => new Realm.BSON.UUID()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new Realm.BSON.UUID();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "uuid",
            optional: true,
            default: () => new Realm.BSON.UUID()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new Realm.BSON.UUID();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "uuid",
            optional: true,
            default: () => new Realm.BSON.UUID()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new Realm.BSON.UUID();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "uuid",
            optional: true,
            default: () => new Realm.BSON.UUID()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new Realm.BSON.UUID();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "uuid",
            optional: true,
            default: () => new Realm.BSON.UUID()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new Realm.BSON.UUID();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "uuid",
            optional: true,
            default: () => new Realm.BSON.UUID()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new Realm.BSON.UUID();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "uuid",
            optional: true,
            default: () => new Realm.BSON.UUID()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new Realm.BSON.UUID();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "uuid",
            optional: true,
            default: () => new Realm.BSON.UUID()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new Realm.BSON.UUID();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "uuid",
            optional: true,
            default: () => new Realm.BSON.UUID()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new Realm.BSON.UUID();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "uuid",
            optional: true,
            default: () => new Realm.BSON.UUID()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new Realm.BSON.UUID();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "uuid",
            optional: true,
            default: () => new Realm.BSON.UUID()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new Realm.BSON.UUID();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "uuid",
            optional: true,
            default: () => new Realm.BSON.UUID()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new Realm.BSON.UUID();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "uuid",
            optional: true,
            default: () => new Realm.BSON.UUID()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new BSON.UUID();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "uuid",
            default: () => new BSON.UUID()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new BSON.UUID();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "uuid",
            default: () => new BSON.UUID()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new BSON.UUID();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "uuid",
            default: () => new BSON.UUID()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new BSON.UUID();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "uuid",
            default: () => new BSON.UUID()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new BSON.UUID();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "uuid",
            optional: true,
            default: () => new BSON.UUID()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new BSON.UUID();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "uuid",
            optional: true,
            default: () => new BSON.UUID()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new BSON.UUID();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "uuid",
            optional: true,
            default: () => new BSON.UUID()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new BSON.UUID();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "uuid",
            optional: true,
            default: () => new BSON.UUID()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new BSON.UUID();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "uuid",
            optional: true,
            default: () => new BSON.UUID()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new BSON.UUID();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "uuid",
            optional: true,
            default: () => new BSON.UUID()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new BSON.UUID();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "uuid",
            optional: true,
            default: () => new BSON.UUID()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new BSON.UUID();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "uuid",
            optional: true,
            default: () => new BSON.UUID()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new BSON.UUID();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "uuid",
            optional: true,
            default: () => new BSON.UUID()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new BSON.UUID();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "uuid",
            optional: true,
            default: () => new BSON.UUID()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new BSON.UUID();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "uuid",
            optional: true,
            default: () => new BSON.UUID()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new BSON.UUID();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "uuid",
            optional: true,
            default: () => new BSON.UUID()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "date"
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "date"
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "date"
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "date",
            optional: true
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "date",
            optional: true
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "date",
            optional: true
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "date",
            optional: true
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "date",
            optional: true
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "date",
            optional: true
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "date",
            optional: true
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "date",
            optional: true
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "date",
            optional: true
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new Date();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "date",
            default: () => new Date()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new Date();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "date",
            default: () => new Date()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new Date();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "date",
            default: () => new Date()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new Date();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "date",
            optional: true,
            default: () => new Date()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new Date();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "date",
            optional: true,
            default: () => new Date()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new Date();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "date",
            optional: true,
            default: () => new Date()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new Date();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "date",
            optional: true,
            default: () => new Date()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new Date();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "date",
            optional: true,
            default: () => new Date()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new Date();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "date",
            optional: true,
            default: () => new Date()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new Date();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "date",
            optional: true,
            default: () => new Date()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new Date();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "date",
            optional: true,
            default: () => new Date()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new Date();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "date",
            optional: true,
            default: () => new Date()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new Types.Date();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "date",
            default: () => new Types.Date()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new Types.Date();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "date",
            default: () => new Types.Date()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new Types.Date();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "date",
            default: () => new Types.Date()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new Types.Date();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "date",
            optional: true,
            default: () => new Types.Date()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new Types.Date();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "date",
            optional: true,
            default: () => new Types.Date()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new Types.Date();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "date",
            optional: true,
            default: () => new Types.Date()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new Types.Date();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "date",
            optional: true,
            default: () => new Types.Date()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new Types.Date();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "date",
            optional: true,
            default: () => new Types.Date()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new Types.Date();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "date",
            optional: true,
            default: () => new Types.Date()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new Types.Date();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "date",
            optional: true,
            default: () => new Types.Date()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new Types.Date();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "date",
            optional: true,
            default: () => new Types.Date()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new Types.Date();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "date",
            optional: true,
            default: () => new Types.Date()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new Realm.Types.Date();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "date",
            default: () => new Realm.Types.Date()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new Realm.Types.Date();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "date",
            default: () => new Realm.Types.Date()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new Realm.Types.Date();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "date",
            default: () => new Realm.Types.Date()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new Realm.Types.Date();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "date",
            optional: true,
            default: () => new Realm.Types.Date()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new Realm.Types.Date();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "date",
            optional: true,
            default: () => new Realm.Types.Date()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new Realm.Types.Date();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "date",
            optional: true,
            default: () => new Realm.Types.Date()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new Realm.Types.Date();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "date",
            optional: true,
            default: () => new Realm.Types.Date()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new Realm.Types.Date();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "date",
            optional: true,
            default: () => new Realm.Types.Date()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new Realm.Types.Date();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "date",
            optional: true,
            default: () => new Realm.Types.Date()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new Realm.Types.Date();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "date",
            optional: true,
            default: () => new Realm.Types.Date()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new Realm.Types.Date();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "date",
            optional: true,
            default: () => new Realm.Types.Date()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new Realm.Types.Date();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "date",
            optional: true,
            default: () => new Realm.Types.Date()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "data"
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "data"
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "data"
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "data",
            optional: true
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "data",
            optional: true
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "data",
            optional: true
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "data",
            optional: true
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "data",
            optional: true
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "data",
            optional: true
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "data",
            optional: true
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "data",
            optional: true
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "data",
            optional: true
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new ArrayBuffer();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "data",
            default: () => new ArrayBuffer()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new ArrayBuffer();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "data",
            default: () => new ArrayBuffer()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new ArrayBuffer();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "data",
            default: () => new ArrayBuffer()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new ArrayBuffer();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "data",
            optional: true,
            default: () => new ArrayBuffer()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new ArrayBuffer();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "data",
            optional: true,
            default: () => new ArrayBuffer()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new ArrayBuffer();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "data",
            optional: true,
            default: () => new ArrayBuffer()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new ArrayBuffer();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "data",
            optional: true,
            default: () => new ArrayBuffer()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new ArrayBuffer();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "data",
            optional: true,
            default: () => new ArrayBuffer()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new ArrayBuffer();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "data",
            optional: true,
            default: () => new ArrayBuffer()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new ArrayBuffer();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "data",
            optional: true,
            default: () => new ArrayBuffer()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new ArrayBuffer();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "data",
            optional: true,
            default: () => new ArrayBuffer()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new ArrayBuffer();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "data",
            optional: true,
            default: () => new ArrayBuffer()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new Types.Data();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "data",
            default: () => new Types.Data()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new Types.Data();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "data",
            default: () => new Types.Data()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new Types.Data();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "data",
            default: () => new Types.Data()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new Types.Data();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "data",
            optional: true,
            default: () => new Types.Data()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new Types.Data();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "data",
            optional: true,
            default: () => new Types.Data()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new Types.Data();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "data",
            optional: true,
            default: () => new Types.Data()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new Types.Data();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "data",
            optional: true,
            default: () => new Types.Data()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new Types.Data();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "data",
            optional: true,
            default: () => new Types.Data()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new Types.Data();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "data",
            optional: true,
            default: () => new Types.Data()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new Types.Data();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "data",
            optional: true,
            default: () => new Types.Data()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new Types.Data();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "data",
            optional: true,
            default: () => new Types.Data()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new Types.Data();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "data",
            optional: true,
            default: () => new Types.Data()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new Realm.Types.Data();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "data",
            default: () => new Realm.Types.Data()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new Realm.Types.Data();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "data",
            default: () => new Realm.Types.Data()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new Realm.Types.Data();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "data",
            default: () => new Realm.Types.Data()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new Realm.Types.Data();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "data",
            optional: true,
            default: () => new Realm.Types.Data()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new Realm.Types.Data();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "data",
            optional: true,
            default: () => new Realm.Types.Data()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new Realm.Types.Data();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "data",
            optional: true,
            default: () => new Realm.Types.Data()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new Realm.Types.Data();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "data",
            optional: true,
            default: () => new Realm.Types.Data()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new Realm.Types.Data();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "data",
            optional: true,
            default: () => new Realm.Types.Data()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new Realm.Types.Data();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "data",
            optional: true,
            default: () => new Realm.Types.Data()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new Realm.Types.Data();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "data",
            optional: true,
            default: () => new Realm.Types.Data()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new Realm.Types.Data();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "data",
            optional: true,
            default: () => new Realm.Types.Data()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new Realm.Types.Data();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "data",
            optional: true,
            default: () => new Realm.Types.Data()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "list",
            objectType: "Person"
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "list",
            objectType: "Person"
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "list",
            objectType: "Person"
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "list",
            objectType: "Person"
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "list",
            objectType: "int"
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "list",
            objectType: "int"
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "list",
            objectType: "int"
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "list",
            objectType: "int"
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "list",
            objectType: "int"
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "list",
            objectType: "int"
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "list",
            objectType: "int"
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "list",
            objectType: "int"
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "list",
            optional: true,
            objectType: "Person"
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "list",
            optional: true,
            objectType: "Person"
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "list",
            optional: true,
            objectType: "Person"
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "list",
            optional: true,
            objectType: "Person"
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "list",
            optional: true,
            objectType: "Person"
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "list",
            optional: true,
            objectType: "Person"
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "list",
            optional: true,
            objectType: "Person"
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "list",
            optional: true,
            objectType: "Person"
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "list",
            optional: true,
            objectType: "int"
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "list",
            optional: true,
            objectType: "int"
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "list",
            optional: true,
            objectType: "int"
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "list",
            optional: true,
            objectType: "int"
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "list",
            optional: true,
            objectType: "int"
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "list",
            optional: true,
            objectType: "int"
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "list",
            optional: true,
            objectType: "int"
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "list",
            optional: true,
            objectType: "int"
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "list",
            optional: true,
            objectType: "int"
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "list",
            optional: true,
            objectType: "int"
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "list",
            optional: true,
            objectType: "int"
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "list",
            optional: true,
            objectType: "int"
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "list",
            optional: true,
            objectType: "int"
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "list",
            optional: true,
            objectType: "int"
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "list",
            optional: true,
            objectType: "int"
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "list",
            optional: true,
            objectType: "int"
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = [];
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "list",
            objectType: "Person",
            default: () => []
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = [];
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "list",
            objectType: "Person",
            default: () => []
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = [];
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "list",
            objectType: "Person",
            default: () => []
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = [];
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "list",
            objectType: "Person",
            default: () => []
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = [];
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "list",
            objectType: "int",
            default: () => []
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = [];
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "list",
            objectType: "int",
            default: () => []
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = [];
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "list",
            objectType: "int",
            default: () => []
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = [];
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "list",
            objectType: "int",
            default: () => []
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = [];
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "list",
            objectType: "int",
            default: () => []
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = [];
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "list",
            objectType: "int",
            default: () => []
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = [];
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "list",
            objectType: "int",
            default: () => []
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = [];
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "list",
            objectType: "int",
            default: () => []
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = [];
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "list",
            optional: true,
            objectType: "Person",
            default: () => []
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = [];
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "list",
            optional: true,
            objectType: "Person",
            default: () => []
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = [];
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "list",
            optional: true,
            objectType: "Person",
            default: () => []
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = [];
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "list",
            optional: true,
            objectType: "Person",
            default: () => []
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = [];
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "list",
            optional: true,
            objectType: "Person",
            default: () => []
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = [];
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "list",
            optional: true,
            objectType: "Person",
            default: () => []
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = [];
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "list",
            optional: true,
            objectType: "Person",
            default: () => []
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = [];
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "list",
            optional: true,
            objectType: "Person",
            default: () => []
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = [];
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "list",
            optional: true,
            objectType: "int",
            default: () => []
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = [];
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "list",
            optional: true,
            objectType: "int",
            default: () => []
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = [];
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "list",
            optional: true,
            objectType: "int",
            default: () => []
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = [];
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "list",
            optional: true,
            objectType: "int",
            default: () => []
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = [];
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "list",
            optional: true,
            objectType: "int",
            default: () => []
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = [];
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "list",
            optional: true,
            objectType: "int",
            default: () => []
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = [];
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "list",
            optional: true,
            objectType: "int",
            default: () => []
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = [];
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "list",
            optional: true,
            objectType: "int",
            default: () => []
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = [];
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "list",
            optional: true,
            objectType: "int",
            default: () => []
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = [];
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "list",
            optional: true,
            objectType: "int",
            default: () => []
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = [];
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "list",
            optional: true,
            objectType: "int",
            default: () => []
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = [];
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "list",
            optional: true,
            objectType: "int",
            default: () => []
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = [];
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "list",
            optional: true,
            objectType: "int",
            default: () => []
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = [];
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "list",
            optional: true,
            objectType: "int",
            default: () => []
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = [];
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "list",
            optional: true,
            objectType: "int",
            default: () => []
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = [];
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "list",
            optional: true,
            objectType: "int",
            default: () => []
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "set",
            objectType: "Person"
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "set",
            objectType: "Person"
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "set",
            objectType: "Person"
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "set",
            objectType: "Person"
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "set",
            optional: true,
            objectType: "Person"
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "set",
            optional: true,
            objectType: "Person"
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "set",
            optional: true,
            objectType: "Person"
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "set",
            optional: true,
            objectType: "Person"
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "set",
            optional: true,
            objectType: "Person"
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "set",
            optional: true,
            objectType: "Person"
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "set",
            optional: true,
            objectType: "Person"
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "set",
            optional: true,
            objectType: "Person"
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "dictionary"
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "dictionary"
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "dictionary"
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "dictionary"
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "dictionary",
            objectType: "mixed"
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "dictionary",
            objectType: "mixed"
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "dictionary",
            objectType: "mixed"
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "dictionary",
            objectType: "mixed"
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "dictionary",
            objectType: "mixed"
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "dictionary",
            objectType: "mixed"
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "dictionary",
            objectType: "mixed"
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "dictionary",
            objectType: "mixed"
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "dictionary",
            objectType: "mixed"
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "dictionary",
            objectType: "mixed"
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "dictionary",
            objectType: "mixed"
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "dictionary",
            objectType: "mixed"
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "dictionary",
            objectType: "mixed"
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "dictionary",
            objectType: "mixed"
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "dictionary",
            objectType: "mixed"
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "dictionary",
            objectType: "mixed"
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "dictionary",
            optional: true
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "dictionary",
            optional: true
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "dictionary",
            optional: true
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "dictionary",
            optional: true
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "dictionary",
            optional: true
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "dictionary",
            optional: true
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "dictionary",
            optional: true
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "dictionary",
            optional: true
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "dictionary",
            optional: true,
            objectType: "mixed"
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "dictionary",
            optional: true,
            objectType: "mixed"
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "dictionary",
            optional: true,
            objectType: "mixed"
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "dictionary",
            optional: true,
            objectType: "mixed"
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "dictionary",
            optional: true,
            objectType: "mixed"
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "dictionary",
            optional: true,
            objectType: "mixed"
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "dictionary",
            optional: true,
            objectType: "mixed"
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "dictionary",
            optional: true,
            objectType: "mixed"
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "dictionary",
            optional: true,
            objectType: "mixed"
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "dictionary",
            optional: true,
            objectType: "mixed"
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "dictionary",
            optional: true,
            objectType: "mixed"
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "dictionary",
            optional: true,
            objectType: "mixed"
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "dictionary",
            optional: true,
            objectType: "mixed"
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "dictionary",
            optional: true,
            objectType: "mixed"
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "dictionary",
            optional: true,
            objectType: "mixed"
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "dictionary",
            optional: true,
            objectType: "mixed"
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "dictionary",
            optional: true,
            objectType: "mixed"
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "dictionary",
            optional: true,
            objectType: "mixed"
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "dictionary",
            optional: true,
            objectType: "mixed"
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "dictionary",
            optional: true,
            objectType: "mixed"
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "dictionary",
            optional: true,
            objectType: "mixed"
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "dictionary",
            optional: true,
            objectType: "mixed"
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "dictionary",
            optional: true,
            objectType: "mixed"
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "dictionary",
            optional: true,
            objectType: "mixed"
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "dictionary",
            optional: true,
            objectType: "mixed"
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "dictionary",
            optional: true,
            objectType: "mixed"
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "dictionary",
            optional: true,
            objectType: "mixed"
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "dictionary",
            optional: true,
            objectType: "mixed"
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "dictionary",
            optional: true,
            objectType: "mixed"
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "dictionary",
            optional: true,
            objectType: "mixed"
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "dictionary",
            optional: true,
            objectType: "mixed"
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "dictionary",
            optional: true,
            objectType: "mixed"
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "mixed"
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "mixed"
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "mixed"
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "mixed"
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "mixed",
            optional: true
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "mixed",
            optional: true
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "mixed",
            optional: true
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "mixed",
            optional: true
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "mixed",
            optional: true
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "mixed",
            optional: true
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "mixed",
            optional: true
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "mixed",
            optional: true
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "mixed",
            optional: true
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "mixed",
            optional: true
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "mixed",
            optional: true
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "mixed",
            optional: true
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = "foo";
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "mixed",
            default: "foo"
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = "foo";
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "mixed",
            default: "foo"
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = "foo";
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "mixed",
            default: "foo"
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = "foo";
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "mixed",
            default: "foo"
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = "foo";
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "mixed",
            optional: true,
            default: "foo"
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = "foo";
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "mixed",
            optional: true,
            default: "foo"
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = "foo";
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "mixed",
            optional: true,
            default: "foo"
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = "foo";
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "mixed",
            optional: true,
            default: "foo"
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = "foo";
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "mixed",
            optional: true,
            default: "foo"
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = "foo";
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "mixed",
            optional: true,
            default: "foo"
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = "foo";
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "mixed",
            optional: true,
            default: "foo"
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = "foo";
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "mixed",
            optional: true,
            default: "foo"
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = "foo";
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "mixed",
            optional: true,
            default: "foo"
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = "foo";
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "mixed",
            optional: true,
            default: "foo"
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = "foo";
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "mixed",
            optional: true,
            default: "foo"
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = "foo";
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "mixed",
            optional: true,
            default: "foo"
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = 123;
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "mixed",
            default: 123
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = 123;
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "mixed",
            default: 123
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = 123;
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "mixed",
            default: 123
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = 123;
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "mixed",
            default: 123
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = 123;
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "mixed",
            optional: true,
            default: 123
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = 123;
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "mixed",
            optional: true,
            default: 123
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = 123;
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "mixed",
            optional: true,
            default: 123
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = 123;
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "mixed",
            optional: true,
            default: 123
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = 123;
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "mixed",
            optional: true,
            default: 123
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = 123;
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "mixed",
            optional: true,
            default: 123
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = 123;
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "mixed",
            optional: true,
            default: 123
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = 123;
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "mixed",
            optional: true,
            default: 123
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = 123;
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "mixed",
            optional: true,
            default: 123
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = 123;
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "mixed",
            optional: true,
            default: 123
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = 123;
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "mixed",
            optional: true,
            default: 123
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = 123;
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "mixed",
            optional: true,
            default: 123
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "Person"
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "Person",
            optional: true
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "Person",
            optional: true
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "Person",
            optional: true
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "linkingObjects",
            objectType: "Person",
            property: "friends"
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "linkingObjects",
            objectType: "Person",
            property: "friends"
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      name = 2;
      static schema = {
        name: "Person",
        properties: {
          name: {
            type: "string",
            default: 2
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static name = 'test';
      static schema = {
        name: "Person",
        properties: {},
        name: "test"
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static primaryKey = 'test';
      static schema = {
        name: "Person",
        properties: {},
        primaryKey: "test"
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static embedded = true;
      static schema = {
        name: "Person",
        properties: {},
        embedded: true
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static asymmetric = true;
      static schema = {
        name: "Person",
        properties: {},
        asymmetric: true
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static name = 'test';
      static primaryKey = 'test';
      static embedded = true;
      static asymmetric = true;
      static schema = {
        name: "Person",
        properties: {},
        name: "test",
        primaryKey: "test",
        embedded: true,
        asymmetric: true
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      name;
      static schema = {
        name: "Person",
        properties: {
          name: {
            type: "string",
            indexed: true
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      name;
      static schema = {
        name: "Person",
        properties: {
          name: {
            type: "string",
            indexed: true
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    var _class, _descriptor;
    
    function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }
    
    function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'proposal-class-properties is enabled and runs after the decorators transform.'); }
    
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed } from "realm";
    export // Modified by @realm/babel-plugin
    let Person = (_class = class Person extends Realm.Object {
      name = _initializerWarningHelper(_descriptor, this);
      static schema = {
        name: "Person",
        properties: {
          name: {
            type: "string"
          }
        }
      };
    }, (_descriptor = _applyDecoratedDescriptor(_class.prototype, "name", [index], {
      configurable: true,
      enumerable: true,
      writable: true,
      initializer: null
    })), _class);

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      name;
      static schema = {
        name: "Person",
        properties: {
          name: {
            type: "string",
            indexed: true
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      name;
      static schema = {
        name: "Person",
        properties: {
          name: {
            type: "string",
            mapTo: "rename"
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      name;
      static schema = {
        name: "Person",
        properties: {
          name: {
            type: "string",
            mapTo: "rename"
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    var _dec, _class, _descriptor;
    
    function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }
    
    function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'proposal-class-properties is enabled and runs after the decorators transform.'); }
    
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed } from "realm";
    export // Modified by @realm/babel-plugin
    let Person = (_dec = mapTo("rename"), (_class = class Person extends Realm.Object {
      name = _initializerWarningHelper(_descriptor, this);
      static schema = {
        name: "Person",
        properties: {
          name: {
            type: "string"
          }
        }
      };
    }, (_descriptor = _applyDecoratedDescriptor(_class.prototype, "name", [_dec], {
      configurable: true,
      enumerable: true,
      writable: true,
      initializer: null
    })), _class));

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      name;
      static schema = {
        name: "Person",
        properties: {
          name: {
            type: "string",
            mapTo: "rename"
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      name;
      static schema = {
        name: "Person",
        properties: {
          name: {
            type: "string",
            indexed: true,
            mapTo: "rename"
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      description;
      isComplete;
      static schema = {
        name: "Person",
        properties: {
          _id: {
            type: "objectId"
          },
          description: {
            type: "string",
            indexed: true
          },
          isComplete: {
            type: "bool",
            mapTo: "complete"
          },
          createdAt: {
            type: "date"
          },
          userId: {
            type: "string"
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed } from "realm";
    
    class Test extends Realm.Object {
      static schema = {
        name: 'Task',
        primaryKey: '_id',
        properties: {
          _id: 'objectId'
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    class Test {
      static schema = {
        name: 'Task',
        primaryKey: '_id',
        properties: {
          _id: 'objectId'
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

