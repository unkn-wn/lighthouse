
> @realm/babel-plugin@0.1.0 test
> jest

  console.log
    class Person extends Realm.Object {}

      at transform (src/tests/transform.ts:53:13)

  console.log
    import * as Realm from 'realm';
    
    // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {}
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm from 'realm';
    
    // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {}
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import { Object } from 'realm';
    
    // Modified by @realm/babel-plugin
    class Person extends Object {
      static schema = {
        name: "Person",
        properties: {}
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Object } from 'realm';
    
    // Modified by @realm/babel-plugin
    class Person extends Object {
      static schema = {
        name: "Person",
        properties: {}
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import { Object } from 'realm';
    
    // Modified by @realm/babel-plugin
    class Person extends Object {
      static schema = {
        name: "Person",
        properties: {}
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import * as RealmReact from '@realm/react';
    
    // Modified by @realm/babel-plugin
    class Person extends RealmReact.Realm.Object {
      static schema = {
        name: "Person",
        properties: {}
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import { Realm } from '@realm/react';
    
    // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {}
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "bool"
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "bool"
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "bool"
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "bool",
            optional: true
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "bool",
            optional: true
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "bool",
            optional: true
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "bool",
            optional: true
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "bool",
            optional: true
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "bool",
            optional: true
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "bool",
            optional: true
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "bool",
            optional: true
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "bool",
            optional: true
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    FISK 10: {"type":"BooleanLiteral","start":157,"end":161,"loc":{"start":{"line":4,"column":63,"index":157},"end":{"line":4,"column":67,"index":161}},"value":true}

      at visitRealmClassProperty (src/plugin/index.ts:324:17)
          at Array.map (<anonymous>)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = true;
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "bool",
            default: true
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    FISK 10: {"type":"BooleanLiteral","start":166,"end":170,"loc":{"start":{"line":4,"column":72,"index":166},"end":{"line":4,"column":76,"index":170}},"value":true}

      at visitRealmClassProperty (src/plugin/index.ts:324:17)
          at Array.map (<anonymous>)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = true;
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "bool",
            default: true
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    FISK 10: {"type":"BooleanLiteral","start":160,"end":164,"loc":{"start":{"line":4,"column":66,"index":160},"end":{"line":4,"column":70,"index":164}},"value":true}

      at visitRealmClassProperty (src/plugin/index.ts:324:17)
          at Array.map (<anonymous>)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = true;
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "bool",
            default: true
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    FISK 10: {"type":"BooleanLiteral","start":148,"end":152,"loc":{"start":{"line":4,"column":54,"index":148},"end":{"line":4,"column":58,"index":152}},"value":true}

      at visitRealmClassProperty (src/plugin/index.ts:324:17)
          at Array.map (<anonymous>)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = true;
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "bool",
            default: true
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    FISK 10: {"type":"BooleanLiteral","start":158,"end":162,"loc":{"start":{"line":4,"column":64,"index":158},"end":{"line":4,"column":68,"index":162}},"value":true}

      at visitRealmClassProperty (src/plugin/index.ts:324:17)
          at Array.map (<anonymous>)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = true;
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "bool",
            optional: true,
            default: true
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    FISK 10: {"type":"BooleanLiteral","start":169,"end":173,"loc":{"start":{"line":4,"column":75,"index":169},"end":{"line":4,"column":79,"index":173}},"value":true}

      at visitRealmClassProperty (src/plugin/index.ts:324:17)
          at Array.map (<anonymous>)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = true;
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "bool",
            optional: true,
            default: true
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    FISK 10: {"type":"BooleanLiteral","start":169,"end":173,"loc":{"start":{"line":4,"column":75,"index":169},"end":{"line":4,"column":79,"index":173}},"value":true}

      at visitRealmClassProperty (src/plugin/index.ts:324:17)
          at Array.map (<anonymous>)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = true;
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "bool",
            optional: true,
            default: true
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    FISK 10: {"type":"BooleanLiteral","start":167,"end":171,"loc":{"start":{"line":4,"column":73,"index":167},"end":{"line":4,"column":77,"index":171}},"value":true}

      at visitRealmClassProperty (src/plugin/index.ts:324:17)
          at Array.map (<anonymous>)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = true;
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "bool",
            optional: true,
            default: true
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    FISK 10: {"type":"BooleanLiteral","start":178,"end":182,"loc":{"start":{"line":4,"column":84,"index":178},"end":{"line":4,"column":88,"index":182}},"value":true}

      at visitRealmClassProperty (src/plugin/index.ts:324:17)
          at Array.map (<anonymous>)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = true;
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "bool",
            optional: true,
            default: true
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    FISK 10: {"type":"BooleanLiteral","start":178,"end":182,"loc":{"start":{"line":4,"column":84,"index":178},"end":{"line":4,"column":88,"index":182}},"value":true}

      at visitRealmClassProperty (src/plugin/index.ts:324:17)
          at Array.map (<anonymous>)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = true;
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "bool",
            optional: true,
            default: true
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    FISK 10: {"type":"BooleanLiteral","start":161,"end":165,"loc":{"start":{"line":4,"column":67,"index":161},"end":{"line":4,"column":71,"index":165}},"value":true}

      at visitRealmClassProperty (src/plugin/index.ts:324:17)
          at Array.map (<anonymous>)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = true;
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "bool",
            optional: true,
            default: true
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    FISK 10: {"type":"BooleanLiteral","start":172,"end":176,"loc":{"start":{"line":4,"column":78,"index":172},"end":{"line":4,"column":82,"index":176}},"value":true}

      at visitRealmClassProperty (src/plugin/index.ts:324:17)
          at Array.map (<anonymous>)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = true;
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "bool",
            optional: true,
            default: true
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    FISK 10: {"type":"BooleanLiteral","start":172,"end":176,"loc":{"start":{"line":4,"column":78,"index":172},"end":{"line":4,"column":82,"index":176}},"value":true}

      at visitRealmClassProperty (src/plugin/index.ts:324:17)
          at Array.map (<anonymous>)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = true;
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "bool",
            optional: true,
            default: true
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    FISK 10: {"type":"BooleanLiteral","start":149,"end":153,"loc":{"start":{"line":4,"column":55,"index":149},"end":{"line":4,"column":59,"index":153}},"value":true}

      at visitRealmClassProperty (src/plugin/index.ts:324:17)
          at Array.map (<anonymous>)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = true;
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "bool",
            optional: true,
            default: true
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    FISK 10: {"type":"BooleanLiteral","start":157,"end":162,"loc":{"start":{"line":4,"column":63,"index":157},"end":{"line":4,"column":68,"index":162}},"value":false}

      at visitRealmClassProperty (src/plugin/index.ts:324:17)
          at Array.map (<anonymous>)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = false;
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "bool",
            default: false
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    FISK 10: {"type":"BooleanLiteral","start":166,"end":171,"loc":{"start":{"line":4,"column":72,"index":166},"end":{"line":4,"column":77,"index":171}},"value":false}

      at visitRealmClassProperty (src/plugin/index.ts:324:17)
          at Array.map (<anonymous>)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = false;
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "bool",
            default: false
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    FISK 10: {"type":"BooleanLiteral","start":160,"end":165,"loc":{"start":{"line":4,"column":66,"index":160},"end":{"line":4,"column":71,"index":165}},"value":false}

      at visitRealmClassProperty (src/plugin/index.ts:324:17)
          at Array.map (<anonymous>)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = false;
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "bool",
            default: false
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    FISK 10: {"type":"BooleanLiteral","start":148,"end":153,"loc":{"start":{"line":4,"column":54,"index":148},"end":{"line":4,"column":59,"index":153}},"value":false}

      at visitRealmClassProperty (src/plugin/index.ts:324:17)
          at Array.map (<anonymous>)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = false;
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "bool",
            default: false
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    FISK 10: {"type":"BooleanLiteral","start":158,"end":163,"loc":{"start":{"line":4,"column":64,"index":158},"end":{"line":4,"column":69,"index":163}},"value":false}

      at visitRealmClassProperty (src/plugin/index.ts:324:17)
          at Array.map (<anonymous>)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = false;
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "bool",
            optional: true,
            default: false
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    FISK 10: {"type":"BooleanLiteral","start":169,"end":174,"loc":{"start":{"line":4,"column":75,"index":169},"end":{"line":4,"column":80,"index":174}},"value":false}

      at visitRealmClassProperty (src/plugin/index.ts:324:17)
          at Array.map (<anonymous>)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = false;
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "bool",
            optional: true,
            default: false
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    FISK 10: {"type":"BooleanLiteral","start":169,"end":174,"loc":{"start":{"line":4,"column":75,"index":169},"end":{"line":4,"column":80,"index":174}},"value":false}

      at visitRealmClassProperty (src/plugin/index.ts:324:17)
          at Array.map (<anonymous>)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = false;
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "bool",
            optional: true,
            default: false
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    FISK 10: {"type":"BooleanLiteral","start":167,"end":172,"loc":{"start":{"line":4,"column":73,"index":167},"end":{"line":4,"column":78,"index":172}},"value":false}

      at visitRealmClassProperty (src/plugin/index.ts:324:17)
          at Array.map (<anonymous>)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = false;
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "bool",
            optional: true,
            default: false
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    FISK 10: {"type":"BooleanLiteral","start":178,"end":183,"loc":{"start":{"line":4,"column":84,"index":178},"end":{"line":4,"column":89,"index":183}},"value":false}

      at visitRealmClassProperty (src/plugin/index.ts:324:17)
          at Array.map (<anonymous>)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = false;
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "bool",
            optional: true,
            default: false
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    FISK 10: {"type":"BooleanLiteral","start":178,"end":183,"loc":{"start":{"line":4,"column":84,"index":178},"end":{"line":4,"column":89,"index":183}},"value":false}

      at visitRealmClassProperty (src/plugin/index.ts:324:17)
          at Array.map (<anonymous>)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = false;
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "bool",
            optional: true,
            default: false
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    FISK 10: {"type":"BooleanLiteral","start":161,"end":166,"loc":{"start":{"line":4,"column":67,"index":161},"end":{"line":4,"column":72,"index":166}},"value":false}

      at visitRealmClassProperty (src/plugin/index.ts:324:17)
          at Array.map (<anonymous>)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = false;
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "bool",
            optional: true,
            default: false
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    FISK 10: {"type":"BooleanLiteral","start":172,"end":177,"loc":{"start":{"line":4,"column":78,"index":172},"end":{"line":4,"column":83,"index":177}},"value":false}

      at visitRealmClassProperty (src/plugin/index.ts:324:17)
          at Array.map (<anonymous>)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = false;
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "bool",
            optional: true,
            default: false
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    FISK 10: {"type":"BooleanLiteral","start":172,"end":177,"loc":{"start":{"line":4,"column":78,"index":172},"end":{"line":4,"column":83,"index":177}},"value":false}

      at visitRealmClassProperty (src/plugin/index.ts:324:17)
          at Array.map (<anonymous>)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = false;
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "bool",
            optional: true,
            default: false
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    FISK 10: {"type":"BooleanLiteral","start":149,"end":154,"loc":{"start":{"line":4,"column":55,"index":149},"end":{"line":4,"column":60,"index":154}},"value":false}

      at visitRealmClassProperty (src/plugin/index.ts:324:17)
          at Array.map (<anonymous>)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = false;
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "bool",
            optional: true,
            default: false
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "int"
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "int"
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "int",
            optional: true
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "int",
            optional: true
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "int",
            optional: true
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "int",
            optional: true
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "int",
            optional: true
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "int",
            optional: true
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    FISK 10: {"type":"NumericLiteral","start":165,"end":168,"loc":{"start":{"line":4,"column":71,"index":165},"end":{"line":4,"column":74,"index":168}},"extra":{"rawValue":123,"raw":"123"},"value":123}

      at visitRealmClassProperty (src/plugin/index.ts:324:17)
          at Array.map (<anonymous>)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = 123;
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "int",
            default: 123
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    FISK 10: {"type":"NumericLiteral","start":159,"end":162,"loc":{"start":{"line":4,"column":65,"index":159},"end":{"line":4,"column":68,"index":162}},"extra":{"rawValue":123,"raw":"123"},"value":123}

      at visitRealmClassProperty (src/plugin/index.ts:324:17)
          at Array.map (<anonymous>)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = 123;
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "int",
            default: 123
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    FISK 10: {"type":"NumericLiteral","start":166,"end":169,"loc":{"start":{"line":4,"column":72,"index":166},"end":{"line":4,"column":75,"index":169}},"extra":{"rawValue":123,"raw":"123"},"value":123}

      at visitRealmClassProperty (src/plugin/index.ts:324:17)
          at Array.map (<anonymous>)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = 123;
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "int",
            optional: true,
            default: 123
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    FISK 10: {"type":"NumericLiteral","start":177,"end":180,"loc":{"start":{"line":4,"column":83,"index":177},"end":{"line":4,"column":86,"index":180}},"extra":{"rawValue":123,"raw":"123"},"value":123}

      at visitRealmClassProperty (src/plugin/index.ts:324:17)
          at Array.map (<anonymous>)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = 123;
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "int",
            optional: true,
            default: 123
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    FISK 10: {"type":"NumericLiteral","start":177,"end":180,"loc":{"start":{"line":4,"column":83,"index":177},"end":{"line":4,"column":86,"index":180}},"extra":{"rawValue":123,"raw":"123"},"value":123}

      at visitRealmClassProperty (src/plugin/index.ts:324:17)
          at Array.map (<anonymous>)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = 123;
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "int",
            optional: true,
            default: 123
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    FISK 10: {"type":"NumericLiteral","start":160,"end":163,"loc":{"start":{"line":4,"column":66,"index":160},"end":{"line":4,"column":69,"index":163}},"extra":{"rawValue":123,"raw":"123"},"value":123}

      at visitRealmClassProperty (src/plugin/index.ts:324:17)
          at Array.map (<anonymous>)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = 123;
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "int",
            optional: true,
            default: 123
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    FISK 10: {"type":"NumericLiteral","start":171,"end":174,"loc":{"start":{"line":4,"column":77,"index":171},"end":{"line":4,"column":80,"index":174}},"extra":{"rawValue":123,"raw":"123"},"value":123}

      at visitRealmClassProperty (src/plugin/index.ts:324:17)
          at Array.map (<anonymous>)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = 123;
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "int",
            optional: true,
            default: 123
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    FISK 10: {"type":"NumericLiteral","start":171,"end":174,"loc":{"start":{"line":4,"column":77,"index":171},"end":{"line":4,"column":80,"index":174}},"extra":{"rawValue":123,"raw":"123"},"value":123}

      at visitRealmClassProperty (src/plugin/index.ts:324:17)
          at Array.map (<anonymous>)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = 123;
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "int",
            optional: true,
            default: 123
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "float"
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "float"
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "float",
            optional: true
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "float",
            optional: true
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "float",
            optional: true
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "float",
            optional: true
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "float",
            optional: true
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "float",
            optional: true
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    FISK 10: {"type":"NumericLiteral","start":167,"end":170,"loc":{"start":{"line":4,"column":73,"index":167},"end":{"line":4,"column":76,"index":170}},"extra":{"rawValue":123,"raw":"123"},"value":123}

      at visitRealmClassProperty (src/plugin/index.ts:324:17)
          at Array.map (<anonymous>)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = 123;
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "float",
            default: 123
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    FISK 10: {"type":"NumericLiteral","start":161,"end":164,"loc":{"start":{"line":4,"column":67,"index":161},"end":{"line":4,"column":70,"index":164}},"extra":{"rawValue":123,"raw":"123"},"value":123}

      at visitRealmClassProperty (src/plugin/index.ts:324:17)
          at Array.map (<anonymous>)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = 123;
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "float",
            default: 123
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    FISK 10: {"type":"NumericLiteral","start":168,"end":171,"loc":{"start":{"line":4,"column":74,"index":168},"end":{"line":4,"column":77,"index":171}},"extra":{"rawValue":123,"raw":"123"},"value":123}

      at visitRealmClassProperty (src/plugin/index.ts:324:17)
          at Array.map (<anonymous>)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = 123;
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "float",
            optional: true,
            default: 123
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    FISK 10: {"type":"NumericLiteral","start":179,"end":182,"loc":{"start":{"line":4,"column":85,"index":179},"end":{"line":4,"column":88,"index":182}},"extra":{"rawValue":123,"raw":"123"},"value":123}

      at visitRealmClassProperty (src/plugin/index.ts:324:17)
          at Array.map (<anonymous>)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = 123;
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "float",
            optional: true,
            default: 123
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    FISK 10: {"type":"NumericLiteral","start":179,"end":182,"loc":{"start":{"line":4,"column":85,"index":179},"end":{"line":4,"column":88,"index":182}},"extra":{"rawValue":123,"raw":"123"},"value":123}

      at visitRealmClassProperty (src/plugin/index.ts:324:17)
          at Array.map (<anonymous>)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = 123;
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "float",
            optional: true,
            default: 123
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    FISK 10: {"type":"NumericLiteral","start":162,"end":165,"loc":{"start":{"line":4,"column":68,"index":162},"end":{"line":4,"column":71,"index":165}},"extra":{"rawValue":123,"raw":"123"},"value":123}

      at visitRealmClassProperty (src/plugin/index.ts:324:17)
          at Array.map (<anonymous>)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = 123;
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "float",
            optional: true,
            default: 123
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    FISK 10: {"type":"NumericLiteral","start":173,"end":176,"loc":{"start":{"line":4,"column":79,"index":173},"end":{"line":4,"column":82,"index":176}},"extra":{"rawValue":123,"raw":"123"},"value":123}

      at visitRealmClassProperty (src/plugin/index.ts:324:17)
          at Array.map (<anonymous>)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = 123;
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "float",
            optional: true,
            default: 123
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    FISK 10: {"type":"NumericLiteral","start":173,"end":176,"loc":{"start":{"line":4,"column":79,"index":173},"end":{"line":4,"column":82,"index":176}},"extra":{"rawValue":123,"raw":"123"},"value":123}

      at visitRealmClassProperty (src/plugin/index.ts:324:17)
          at Array.map (<anonymous>)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = 123;
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "float",
            optional: true,
            default: 123
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "double"
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "double"
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "double"
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "double",
            optional: true
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "double",
            optional: true
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "double",
            optional: true
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "double",
            optional: true
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "double",
            optional: true
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "double",
            optional: true
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "double",
            optional: true
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "double",
            optional: true
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "double",
            optional: true
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    FISK 10: {"type":"NumericLiteral","start":156,"end":159,"loc":{"start":{"line":4,"column":62,"index":156},"end":{"line":4,"column":65,"index":159}},"extra":{"rawValue":123,"raw":"123"},"value":123}

      at visitRealmClassProperty (src/plugin/index.ts:324:17)
          at Array.map (<anonymous>)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = 123;
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "double",
            default: 123
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    FISK 10: {"type":"NumericLiteral","start":168,"end":171,"loc":{"start":{"line":4,"column":74,"index":168},"end":{"line":4,"column":77,"index":171}},"extra":{"rawValue":123,"raw":"123"},"value":123}

      at visitRealmClassProperty (src/plugin/index.ts:324:17)
          at Array.map (<anonymous>)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = 123;
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "double",
            default: 123
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    FISK 10: {"type":"NumericLiteral","start":162,"end":165,"loc":{"start":{"line":4,"column":68,"index":162},"end":{"line":4,"column":71,"index":165}},"extra":{"rawValue":123,"raw":"123"},"value":123}

      at visitRealmClassProperty (src/plugin/index.ts:324:17)
          at Array.map (<anonymous>)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = 123;
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "double",
            default: 123
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    FISK 10: {"type":"NumericLiteral","start":148,"end":151,"loc":{"start":{"line":4,"column":54,"index":148},"end":{"line":4,"column":57,"index":151}},"extra":{"rawValue":123,"raw":"123"},"value":123}

      at visitRealmClassProperty (src/plugin/index.ts:324:17)
          at Array.map (<anonymous>)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = 123;
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "double",
            default: 123
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    FISK 10: {"type":"NumericLiteral","start":157,"end":160,"loc":{"start":{"line":4,"column":63,"index":157},"end":{"line":4,"column":66,"index":160}},"extra":{"rawValue":123,"raw":"123"},"value":123}

      at visitRealmClassProperty (src/plugin/index.ts:324:17)
          at Array.map (<anonymous>)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = 123;
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "double",
            optional: true,
            default: 123
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    FISK 10: {"type":"NumericLiteral","start":168,"end":171,"loc":{"start":{"line":4,"column":74,"index":168},"end":{"line":4,"column":77,"index":171}},"extra":{"rawValue":123,"raw":"123"},"value":123}

      at visitRealmClassProperty (src/plugin/index.ts:324:17)
          at Array.map (<anonymous>)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = 123;
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "double",
            optional: true,
            default: 123
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    FISK 10: {"type":"NumericLiteral","start":168,"end":171,"loc":{"start":{"line":4,"column":74,"index":168},"end":{"line":4,"column":77,"index":171}},"extra":{"rawValue":123,"raw":"123"},"value":123}

      at visitRealmClassProperty (src/plugin/index.ts:324:17)
          at Array.map (<anonymous>)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = 123;
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "double",
            optional: true,
            default: 123
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    FISK 10: {"type":"NumericLiteral","start":169,"end":172,"loc":{"start":{"line":4,"column":75,"index":169},"end":{"line":4,"column":78,"index":172}},"extra":{"rawValue":123,"raw":"123"},"value":123}

      at visitRealmClassProperty (src/plugin/index.ts:324:17)
          at Array.map (<anonymous>)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = 123;
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "double",
            optional: true,
            default: 123
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    FISK 10: {"type":"NumericLiteral","start":180,"end":183,"loc":{"start":{"line":4,"column":86,"index":180},"end":{"line":4,"column":89,"index":183}},"extra":{"rawValue":123,"raw":"123"},"value":123}

      at visitRealmClassProperty (src/plugin/index.ts:324:17)
          at Array.map (<anonymous>)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = 123;
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "double",
            optional: true,
            default: 123
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    FISK 10: {"type":"NumericLiteral","start":180,"end":183,"loc":{"start":{"line":4,"column":86,"index":180},"end":{"line":4,"column":89,"index":183}},"extra":{"rawValue":123,"raw":"123"},"value":123}

      at visitRealmClassProperty (src/plugin/index.ts:324:17)
          at Array.map (<anonymous>)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = 123;
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "double",
            optional: true,
            default: 123
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    FISK 10: {"type":"NumericLiteral","start":163,"end":166,"loc":{"start":{"line":4,"column":69,"index":163},"end":{"line":4,"column":72,"index":166}},"extra":{"rawValue":123,"raw":"123"},"value":123}

      at visitRealmClassProperty (src/plugin/index.ts:324:17)
          at Array.map (<anonymous>)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = 123;
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "double",
            optional: true,
            default: 123
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    FISK 10: {"type":"NumericLiteral","start":174,"end":177,"loc":{"start":{"line":4,"column":80,"index":174},"end":{"line":4,"column":83,"index":177}},"extra":{"rawValue":123,"raw":"123"},"value":123}

      at visitRealmClassProperty (src/plugin/index.ts:324:17)
          at Array.map (<anonymous>)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = 123;
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "double",
            optional: true,
            default: 123
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    FISK 10: {"type":"NumericLiteral","start":174,"end":177,"loc":{"start":{"line":4,"column":80,"index":174},"end":{"line":4,"column":83,"index":177}},"extra":{"rawValue":123,"raw":"123"},"value":123}

      at visitRealmClassProperty (src/plugin/index.ts:324:17)
          at Array.map (<anonymous>)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = 123;
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "double",
            optional: true,
            default: 123
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    FISK 10: {"type":"NumericLiteral","start":149,"end":152,"loc":{"start":{"line":4,"column":55,"index":149},"end":{"line":4,"column":58,"index":152}},"extra":{"rawValue":123,"raw":"123"},"value":123}

      at visitRealmClassProperty (src/plugin/index.ts:324:17)
          at Array.map (<anonymous>)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = 123;
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "double",
            optional: true,
            default: 123
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "string"
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "string"
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "string"
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "string",
            optional: true
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "string",
            optional: true
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "string",
            optional: true
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "string",
            optional: true
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "string",
            optional: true
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "string",
            optional: true
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "string",
            optional: true
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "string",
            optional: true
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "string",
            optional: true
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    FISK 10: {"type":"StringLiteral","start":156,"end":161,"loc":{"start":{"line":4,"column":62,"index":156},"end":{"line":4,"column":67,"index":161}},"extra":{"rawValue":"foo","raw":"\"foo\""},"value":"foo"}

      at visitRealmClassProperty (src/plugin/index.ts:324:17)
          at Array.map (<anonymous>)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = "foo";
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "string",
            default: "foo"
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    FISK 10: {"type":"StringLiteral","start":168,"end":173,"loc":{"start":{"line":4,"column":74,"index":168},"end":{"line":4,"column":79,"index":173}},"extra":{"rawValue":"foo","raw":"\"foo\""},"value":"foo"}

      at visitRealmClassProperty (src/plugin/index.ts:324:17)
          at Array.map (<anonymous>)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = "foo";
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "string",
            default: "foo"
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    FISK 10: {"type":"StringLiteral","start":162,"end":167,"loc":{"start":{"line":4,"column":68,"index":162},"end":{"line":4,"column":73,"index":167}},"extra":{"rawValue":"foo","raw":"\"foo\""},"value":"foo"}

      at visitRealmClassProperty (src/plugin/index.ts:324:17)
          at Array.map (<anonymous>)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = "foo";
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "string",
            default: "foo"
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    FISK 10: {"type":"StringLiteral","start":148,"end":153,"loc":{"start":{"line":4,"column":54,"index":148},"end":{"line":4,"column":59,"index":153}},"extra":{"rawValue":"foo","raw":"\"foo\""},"value":"foo"}

      at visitRealmClassProperty (src/plugin/index.ts:324:17)
          at Array.map (<anonymous>)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = "foo";
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "string",
            default: "foo"
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    FISK 10: {"type":"StringLiteral","start":157,"end":162,"loc":{"start":{"line":4,"column":63,"index":157},"end":{"line":4,"column":68,"index":162}},"extra":{"rawValue":"foo","raw":"\"foo\""},"value":"foo"}

      at visitRealmClassProperty (src/plugin/index.ts:324:17)
          at Array.map (<anonymous>)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = "foo";
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "string",
            optional: true,
            default: "foo"
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    FISK 10: {"type":"StringLiteral","start":168,"end":173,"loc":{"start":{"line":4,"column":74,"index":168},"end":{"line":4,"column":79,"index":173}},"extra":{"rawValue":"foo","raw":"\"foo\""},"value":"foo"}

      at visitRealmClassProperty (src/plugin/index.ts:324:17)
          at Array.map (<anonymous>)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = "foo";
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "string",
            optional: true,
            default: "foo"
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    FISK 10: {"type":"StringLiteral","start":168,"end":173,"loc":{"start":{"line":4,"column":74,"index":168},"end":{"line":4,"column":79,"index":173}},"extra":{"rawValue":"foo","raw":"\"foo\""},"value":"foo"}

      at visitRealmClassProperty (src/plugin/index.ts:324:17)
          at Array.map (<anonymous>)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = "foo";
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "string",
            optional: true,
            default: "foo"
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    FISK 10: {"type":"StringLiteral","start":169,"end":174,"loc":{"start":{"line":4,"column":75,"index":169},"end":{"line":4,"column":80,"index":174}},"extra":{"rawValue":"foo","raw":"\"foo\""},"value":"foo"}

      at visitRealmClassProperty (src/plugin/index.ts:324:17)
          at Array.map (<anonymous>)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = "foo";
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "string",
            optional: true,
            default: "foo"
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    FISK 10: {"type":"StringLiteral","start":180,"end":185,"loc":{"start":{"line":4,"column":86,"index":180},"end":{"line":4,"column":91,"index":185}},"extra":{"rawValue":"foo","raw":"\"foo\""},"value":"foo"}

      at visitRealmClassProperty (src/plugin/index.ts:324:17)
          at Array.map (<anonymous>)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = "foo";
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "string",
            optional: true,
            default: "foo"
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    FISK 10: {"type":"StringLiteral","start":180,"end":185,"loc":{"start":{"line":4,"column":86,"index":180},"end":{"line":4,"column":91,"index":185}},"extra":{"rawValue":"foo","raw":"\"foo\""},"value":"foo"}

      at visitRealmClassProperty (src/plugin/index.ts:324:17)
          at Array.map (<anonymous>)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = "foo";
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "string",
            optional: true,
            default: "foo"
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    FISK 10: {"type":"StringLiteral","start":163,"end":168,"loc":{"start":{"line":4,"column":69,"index":163},"end":{"line":4,"column":74,"index":168}},"extra":{"rawValue":"foo","raw":"\"foo\""},"value":"foo"}

      at visitRealmClassProperty (src/plugin/index.ts:324:17)
          at Array.map (<anonymous>)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = "foo";
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "string",
            optional: true,
            default: "foo"
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    FISK 10: {"type":"StringLiteral","start":174,"end":179,"loc":{"start":{"line":4,"column":80,"index":174},"end":{"line":4,"column":85,"index":179}},"extra":{"rawValue":"foo","raw":"\"foo\""},"value":"foo"}

      at visitRealmClassProperty (src/plugin/index.ts:324:17)
          at Array.map (<anonymous>)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = "foo";
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "string",
            optional: true,
            default: "foo"
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    FISK 10: {"type":"StringLiteral","start":174,"end":179,"loc":{"start":{"line":4,"column":80,"index":174},"end":{"line":4,"column":85,"index":179}},"extra":{"rawValue":"foo","raw":"\"foo\""},"value":"foo"}

      at visitRealmClassProperty (src/plugin/index.ts:324:17)
          at Array.map (<anonymous>)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = "foo";
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "string",
            optional: true,
            default: "foo"
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    FISK 10: {"type":"StringLiteral","start":149,"end":154,"loc":{"start":{"line":4,"column":55,"index":149},"end":{"line":4,"column":60,"index":154}},"extra":{"rawValue":"foo","raw":"\"foo\""},"value":"foo"}

      at visitRealmClassProperty (src/plugin/index.ts:324:17)
          at Array.map (<anonymous>)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = "foo";
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "string",
            optional: true,
            default: "foo"
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "decimal128"
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "decimal128"
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "decimal128"
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "decimal128"
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "decimal128",
            optional: true
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "decimal128",
            optional: true
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "decimal128",
            optional: true
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "decimal128",
            optional: true
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "decimal128",
            optional: true
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "decimal128",
            optional: true
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "decimal128",
            optional: true
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "decimal128",
            optional: true
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "decimal128",
            optional: true
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "decimal128",
            optional: true
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "decimal128",
            optional: true
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "decimal128",
            optional: true
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    FISK 11: {"type":"NewExpression","start":172,"end":200,"loc":{"start":{"line":4,"column":78,"index":172},"end":{"line":4,"column":106,"index":200}},"callee":{"type":"MemberExpression","start":176,"end":198,"loc":{"start":{"line":4,"column":82,"index":176},"end":{"line":4,"column":104,"index":198}},"object":{"type":"MemberExpression","start":176,"end":187,"loc":{"start":{"line":4,"column":82,"index":176},"end":{"line":4,"column":93,"index":187}},"object":{"type":"Identifier","start":176,"end":181,"loc":{"start":{"line":4,"column":82,"index":176},"end":{"line":4,"column":87,"index":181},"identifierName":"Realm"},"name":"Realm"},"computed":false,"property":{"type":"Identifier","start":182,"end":187,"loc":{"start":{"line":4,"column":88,"index":182},"end":{"line":4,"column":93,"index":187},"identifierName":"Types"},"name":"Types"}},"computed":false,"property":{"type":"Identifier","start":188,"end":198,"loc":{"start":{"line":4,"column":94,"index":188},"end":{"line":4,"column":104,"index":198},"identifierName":"Decimal128"},"name":"Decimal128"}},"arguments":[]}

      at visitRealmClassProperty (src/plugin/index.ts:329:17)
          at Array.map (<anonymous>)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new Realm.Types.Decimal128();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "decimal128",
            default: () => new Realm.Types.Decimal128()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    FISK 11: {"type":"NewExpression","start":166,"end":194,"loc":{"start":{"line":4,"column":72,"index":166},"end":{"line":4,"column":100,"index":194}},"callee":{"type":"MemberExpression","start":170,"end":192,"loc":{"start":{"line":4,"column":76,"index":170},"end":{"line":4,"column":98,"index":192}},"object":{"type":"MemberExpression","start":170,"end":181,"loc":{"start":{"line":4,"column":76,"index":170},"end":{"line":4,"column":87,"index":181}},"object":{"type":"Identifier","start":170,"end":175,"loc":{"start":{"line":4,"column":76,"index":170},"end":{"line":4,"column":81,"index":175},"identifierName":"Realm"},"name":"Realm"},"computed":false,"property":{"type":"Identifier","start":176,"end":181,"loc":{"start":{"line":4,"column":82,"index":176},"end":{"line":4,"column":87,"index":181},"identifierName":"Types"},"name":"Types"}},"computed":false,"property":{"type":"Identifier","start":182,"end":192,"loc":{"start":{"line":4,"column":88,"index":182},"end":{"line":4,"column":98,"index":192},"identifierName":"Decimal128"},"name":"Decimal128"}},"arguments":[]}

      at visitRealmClassProperty (src/plugin/index.ts:329:17)
          at Array.map (<anonymous>)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new Realm.Types.Decimal128();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "decimal128",
            default: () => new Realm.Types.Decimal128()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    FISK 11: {"type":"NewExpression","start":171,"end":199,"loc":{"start":{"line":4,"column":77,"index":171},"end":{"line":4,"column":105,"index":199}},"callee":{"type":"MemberExpression","start":175,"end":197,"loc":{"start":{"line":4,"column":81,"index":175},"end":{"line":4,"column":103,"index":197}},"object":{"type":"MemberExpression","start":175,"end":186,"loc":{"start":{"line":4,"column":81,"index":175},"end":{"line":4,"column":92,"index":186}},"object":{"type":"Identifier","start":175,"end":180,"loc":{"start":{"line":4,"column":81,"index":175},"end":{"line":4,"column":86,"index":180},"identifierName":"Realm"},"name":"Realm"},"computed":false,"property":{"type":"Identifier","start":181,"end":186,"loc":{"start":{"line":4,"column":87,"index":181},"end":{"line":4,"column":92,"index":186},"identifierName":"Types"},"name":"Types"}},"computed":false,"property":{"type":"Identifier","start":187,"end":197,"loc":{"start":{"line":4,"column":93,"index":187},"end":{"line":4,"column":103,"index":197},"identifierName":"Decimal128"},"name":"Decimal128"}},"arguments":[]}

      at visitRealmClassProperty (src/plugin/index.ts:329:17)
          at Array.map (<anonymous>)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new Realm.Types.Decimal128();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "decimal128",
            default: () => new Realm.Types.Decimal128()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    FISK 11: {"type":"NewExpression","start":165,"end":193,"loc":{"start":{"line":4,"column":71,"index":165},"end":{"line":4,"column":99,"index":193}},"callee":{"type":"MemberExpression","start":169,"end":191,"loc":{"start":{"line":4,"column":75,"index":169},"end":{"line":4,"column":97,"index":191}},"object":{"type":"MemberExpression","start":169,"end":180,"loc":{"start":{"line":4,"column":75,"index":169},"end":{"line":4,"column":86,"index":180}},"object":{"type":"Identifier","start":169,"end":174,"loc":{"start":{"line":4,"column":75,"index":169},"end":{"line":4,"column":80,"index":174},"identifierName":"Realm"},"name":"Realm"},"computed":false,"property":{"type":"Identifier","start":175,"end":180,"loc":{"start":{"line":4,"column":81,"index":175},"end":{"line":4,"column":86,"index":180},"identifierName":"Types"},"name":"Types"}},"computed":false,"property":{"type":"Identifier","start":181,"end":191,"loc":{"start":{"line":4,"column":87,"index":181},"end":{"line":4,"column":97,"index":191},"identifierName":"Decimal128"},"name":"Decimal128"}},"arguments":[]}

      at visitRealmClassProperty (src/plugin/index.ts:329:17)
          at Array.map (<anonymous>)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new Realm.Types.Decimal128();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "decimal128",
            default: () => new Realm.Types.Decimal128()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    FISK 11: {"type":"NewExpression","start":148,"end":176,"loc":{"start":{"line":4,"column":54,"index":148},"end":{"line":4,"column":82,"index":176}},"callee":{"type":"MemberExpression","start":152,"end":174,"loc":{"start":{"line":4,"column":58,"index":152},"end":{"line":4,"column":80,"index":174}},"object":{"type":"MemberExpression","start":152,"end":163,"loc":{"start":{"line":4,"column":58,"index":152},"end":{"line":4,"column":69,"index":163}},"object":{"type":"Identifier","start":152,"end":157,"loc":{"start":{"line":4,"column":58,"index":152},"end":{"line":4,"column":63,"index":157},"identifierName":"Realm"},"name":"Realm"},"computed":false,"property":{"type":"Identifier","start":158,"end":163,"loc":{"start":{"line":4,"column":64,"index":158},"end":{"line":4,"column":69,"index":163},"identifierName":"Types"},"name":"Types"}},"computed":false,"property":{"type":"Identifier","start":164,"end":174,"loc":{"start":{"line":4,"column":70,"index":164},"end":{"line":4,"column":80,"index":174},"identifierName":"Decimal128"},"name":"Decimal128"}},"arguments":[]}

      at visitRealmClassProperty (src/plugin/index.ts:329:17)
          at Array.map (<anonymous>)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new Realm.Types.Decimal128();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "decimal128",
            default: () => new Realm.Types.Decimal128()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    FISK 11: {"type":"NewExpression","start":173,"end":201,"loc":{"start":{"line":4,"column":79,"index":173},"end":{"line":4,"column":107,"index":201}},"callee":{"type":"MemberExpression","start":177,"end":199,"loc":{"start":{"line":4,"column":83,"index":177},"end":{"line":4,"column":105,"index":199}},"object":{"type":"MemberExpression","start":177,"end":188,"loc":{"start":{"line":4,"column":83,"index":177},"end":{"line":4,"column":94,"index":188}},"object":{"type":"Identifier","start":177,"end":182,"loc":{"start":{"line":4,"column":83,"index":177},"end":{"line":4,"column":88,"index":182},"identifierName":"Realm"},"name":"Realm"},"computed":false,"property":{"type":"Identifier","start":183,"end":188,"loc":{"start":{"line":4,"column":89,"index":183},"end":{"line":4,"column":94,"index":188},"identifierName":"Types"},"name":"Types"}},"computed":false,"property":{"type":"Identifier","start":189,"end":199,"loc":{"start":{"line":4,"column":95,"index":189},"end":{"line":4,"column":105,"index":199},"identifierName":"Decimal128"},"name":"Decimal128"}},"arguments":[]}

      at visitRealmClassProperty (src/plugin/index.ts:329:17)
          at Array.map (<anonymous>)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new Realm.Types.Decimal128();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "decimal128",
            optional: true,
            default: () => new Realm.Types.Decimal128()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    FISK 11: {"type":"NewExpression","start":184,"end":212,"loc":{"start":{"line":4,"column":90,"index":184},"end":{"line":4,"column":118,"index":212}},"callee":{"type":"MemberExpression","start":188,"end":210,"loc":{"start":{"line":4,"column":94,"index":188},"end":{"line":4,"column":116,"index":210}},"object":{"type":"MemberExpression","start":188,"end":199,"loc":{"start":{"line":4,"column":94,"index":188},"end":{"line":4,"column":105,"index":199}},"object":{"type":"Identifier","start":188,"end":193,"loc":{"start":{"line":4,"column":94,"index":188},"end":{"line":4,"column":99,"index":193},"identifierName":"Realm"},"name":"Realm"},"computed":false,"property":{"type":"Identifier","start":194,"end":199,"loc":{"start":{"line":4,"column":100,"index":194},"end":{"line":4,"column":105,"index":199},"identifierName":"Types"},"name":"Types"}},"computed":false,"property":{"type":"Identifier","start":200,"end":210,"loc":{"start":{"line":4,"column":106,"index":200},"end":{"line":4,"column":116,"index":210},"identifierName":"Decimal128"},"name":"Decimal128"}},"arguments":[]}

      at visitRealmClassProperty (src/plugin/index.ts:329:17)
          at Array.map (<anonymous>)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new Realm.Types.Decimal128();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "decimal128",
            optional: true,
            default: () => new Realm.Types.Decimal128()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    FISK 11: {"type":"NewExpression","start":184,"end":212,"loc":{"start":{"line":4,"column":90,"index":184},"end":{"line":4,"column":118,"index":212}},"callee":{"type":"MemberExpression","start":188,"end":210,"loc":{"start":{"line":4,"column":94,"index":188},"end":{"line":4,"column":116,"index":210}},"object":{"type":"MemberExpression","start":188,"end":199,"loc":{"start":{"line":4,"column":94,"index":188},"end":{"line":4,"column":105,"index":199}},"object":{"type":"Identifier","start":188,"end":193,"loc":{"start":{"line":4,"column":94,"index":188},"end":{"line":4,"column":99,"index":193},"identifierName":"Realm"},"name":"Realm"},"computed":false,"property":{"type":"Identifier","start":194,"end":199,"loc":{"start":{"line":4,"column":100,"index":194},"end":{"line":4,"column":105,"index":199},"identifierName":"Types"},"name":"Types"}},"computed":false,"property":{"type":"Identifier","start":200,"end":210,"loc":{"start":{"line":4,"column":106,"index":200},"end":{"line":4,"column":116,"index":210},"identifierName":"Decimal128"},"name":"Decimal128"}},"arguments":[]}

      at visitRealmClassProperty (src/plugin/index.ts:329:17)
          at Array.map (<anonymous>)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new Realm.Types.Decimal128();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "decimal128",
            optional: true,
            default: () => new Realm.Types.Decimal128()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    FISK 11: {"type":"NewExpression","start":167,"end":195,"loc":{"start":{"line":4,"column":73,"index":167},"end":{"line":4,"column":101,"index":195}},"callee":{"type":"MemberExpression","start":171,"end":193,"loc":{"start":{"line":4,"column":77,"index":171},"end":{"line":4,"column":99,"index":193}},"object":{"type":"MemberExpression","start":171,"end":182,"loc":{"start":{"line":4,"column":77,"index":171},"end":{"line":4,"column":88,"index":182}},"object":{"type":"Identifier","start":171,"end":176,"loc":{"start":{"line":4,"column":77,"index":171},"end":{"line":4,"column":82,"index":176},"identifierName":"Realm"},"name":"Realm"},"computed":false,"property":{"type":"Identifier","start":177,"end":182,"loc":{"start":{"line":4,"column":83,"index":177},"end":{"line":4,"column":88,"index":182},"identifierName":"Types"},"name":"Types"}},"computed":false,"property":{"type":"Identifier","start":183,"end":193,"loc":{"start":{"line":4,"column":89,"index":183},"end":{"line":4,"column":99,"index":193},"identifierName":"Decimal128"},"name":"Decimal128"}},"arguments":[]}

      at visitRealmClassProperty (src/plugin/index.ts:329:17)
          at Array.map (<anonymous>)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new Realm.Types.Decimal128();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "decimal128",
            optional: true,
            default: () => new Realm.Types.Decimal128()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    FISK 11: {"type":"NewExpression","start":178,"end":206,"loc":{"start":{"line":4,"column":84,"index":178},"end":{"line":4,"column":112,"index":206}},"callee":{"type":"MemberExpression","start":182,"end":204,"loc":{"start":{"line":4,"column":88,"index":182},"end":{"line":4,"column":110,"index":204}},"object":{"type":"MemberExpression","start":182,"end":193,"loc":{"start":{"line":4,"column":88,"index":182},"end":{"line":4,"column":99,"index":193}},"object":{"type":"Identifier","start":182,"end":187,"loc":{"start":{"line":4,"column":88,"index":182},"end":{"line":4,"column":93,"index":187},"identifierName":"Realm"},"name":"Realm"},"computed":false,"property":{"type":"Identifier","start":188,"end":193,"loc":{"start":{"line":4,"column":94,"index":188},"end":{"line":4,"column":99,"index":193},"identifierName":"Types"},"name":"Types"}},"computed":false,"property":{"type":"Identifier","start":194,"end":204,"loc":{"start":{"line":4,"column":100,"index":194},"end":{"line":4,"column":110,"index":204},"identifierName":"Decimal128"},"name":"Decimal128"}},"arguments":[]}

      at visitRealmClassProperty (src/plugin/index.ts:329:17)
          at Array.map (<anonymous>)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new Realm.Types.Decimal128();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "decimal128",
            optional: true,
            default: () => new Realm.Types.Decimal128()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    FISK 11: {"type":"NewExpression","start":178,"end":206,"loc":{"start":{"line":4,"column":84,"index":178},"end":{"line":4,"column":112,"index":206}},"callee":{"type":"MemberExpression","start":182,"end":204,"loc":{"start":{"line":4,"column":88,"index":182},"end":{"line":4,"column":110,"index":204}},"object":{"type":"MemberExpression","start":182,"end":193,"loc":{"start":{"line":4,"column":88,"index":182},"end":{"line":4,"column":99,"index":193}},"object":{"type":"Identifier","start":182,"end":187,"loc":{"start":{"line":4,"column":88,"index":182},"end":{"line":4,"column":93,"index":187},"identifierName":"Realm"},"name":"Realm"},"computed":false,"property":{"type":"Identifier","start":188,"end":193,"loc":{"start":{"line":4,"column":94,"index":188},"end":{"line":4,"column":99,"index":193},"identifierName":"Types"},"name":"Types"}},"computed":false,"property":{"type":"Identifier","start":194,"end":204,"loc":{"start":{"line":4,"column":100,"index":194},"end":{"line":4,"column":110,"index":204},"identifierName":"Decimal128"},"name":"Decimal128"}},"arguments":[]}

      at visitRealmClassProperty (src/plugin/index.ts:329:17)
          at Array.map (<anonymous>)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new Realm.Types.Decimal128();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "decimal128",
            optional: true,
            default: () => new Realm.Types.Decimal128()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    FISK 11: {"type":"NewExpression","start":172,"end":200,"loc":{"start":{"line":4,"column":78,"index":172},"end":{"line":4,"column":106,"index":200}},"callee":{"type":"MemberExpression","start":176,"end":198,"loc":{"start":{"line":4,"column":82,"index":176},"end":{"line":4,"column":104,"index":198}},"object":{"type":"MemberExpression","start":176,"end":187,"loc":{"start":{"line":4,"column":82,"index":176},"end":{"line":4,"column":93,"index":187}},"object":{"type":"Identifier","start":176,"end":181,"loc":{"start":{"line":4,"column":82,"index":176},"end":{"line":4,"column":87,"index":181},"identifierName":"Realm"},"name":"Realm"},"computed":false,"property":{"type":"Identifier","start":182,"end":187,"loc":{"start":{"line":4,"column":88,"index":182},"end":{"line":4,"column":93,"index":187},"identifierName":"Types"},"name":"Types"}},"computed":false,"property":{"type":"Identifier","start":188,"end":198,"loc":{"start":{"line":4,"column":94,"index":188},"end":{"line":4,"column":104,"index":198},"identifierName":"Decimal128"},"name":"Decimal128"}},"arguments":[]}

      at visitRealmClassProperty (src/plugin/index.ts:329:17)
          at Array.map (<anonymous>)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new Realm.Types.Decimal128();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "decimal128",
            optional: true,
            default: () => new Realm.Types.Decimal128()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    FISK 11: {"type":"NewExpression","start":183,"end":211,"loc":{"start":{"line":4,"column":89,"index":183},"end":{"line":4,"column":117,"index":211}},"callee":{"type":"MemberExpression","start":187,"end":209,"loc":{"start":{"line":4,"column":93,"index":187},"end":{"line":4,"column":115,"index":209}},"object":{"type":"MemberExpression","start":187,"end":198,"loc":{"start":{"line":4,"column":93,"index":187},"end":{"line":4,"column":104,"index":198}},"object":{"type":"Identifier","start":187,"end":192,"loc":{"start":{"line":4,"column":93,"index":187},"end":{"line":4,"column":98,"index":192},"identifierName":"Realm"},"name":"Realm"},"computed":false,"property":{"type":"Identifier","start":193,"end":198,"loc":{"start":{"line":4,"column":99,"index":193},"end":{"line":4,"column":104,"index":198},"identifierName":"Types"},"name":"Types"}},"computed":false,"property":{"type":"Identifier","start":199,"end":209,"loc":{"start":{"line":4,"column":105,"index":199},"end":{"line":4,"column":115,"index":209},"identifierName":"Decimal128"},"name":"Decimal128"}},"arguments":[]}

      at visitRealmClassProperty (src/plugin/index.ts:329:17)
          at Array.map (<anonymous>)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new Realm.Types.Decimal128();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "decimal128",
            optional: true,
            default: () => new Realm.Types.Decimal128()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    FISK 11: {"type":"NewExpression","start":183,"end":211,"loc":{"start":{"line":4,"column":89,"index":183},"end":{"line":4,"column":117,"index":211}},"callee":{"type":"MemberExpression","start":187,"end":209,"loc":{"start":{"line":4,"column":93,"index":187},"end":{"line":4,"column":115,"index":209}},"object":{"type":"MemberExpression","start":187,"end":198,"loc":{"start":{"line":4,"column":93,"index":187},"end":{"line":4,"column":104,"index":198}},"object":{"type":"Identifier","start":187,"end":192,"loc":{"start":{"line":4,"column":93,"index":187},"end":{"line":4,"column":98,"index":192},"identifierName":"Realm"},"name":"Realm"},"computed":false,"property":{"type":"Identifier","start":193,"end":198,"loc":{"start":{"line":4,"column":99,"index":193},"end":{"line":4,"column":104,"index":198},"identifierName":"Types"},"name":"Types"}},"computed":false,"property":{"type":"Identifier","start":199,"end":209,"loc":{"start":{"line":4,"column":105,"index":199},"end":{"line":4,"column":115,"index":209},"identifierName":"Decimal128"},"name":"Decimal128"}},"arguments":[]}

      at visitRealmClassProperty (src/plugin/index.ts:329:17)
          at Array.map (<anonymous>)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new Realm.Types.Decimal128();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "decimal128",
            optional: true,
            default: () => new Realm.Types.Decimal128()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    FISK 11: {"type":"NewExpression","start":166,"end":194,"loc":{"start":{"line":4,"column":72,"index":166},"end":{"line":4,"column":100,"index":194}},"callee":{"type":"MemberExpression","start":170,"end":192,"loc":{"start":{"line":4,"column":76,"index":170},"end":{"line":4,"column":98,"index":192}},"object":{"type":"MemberExpression","start":170,"end":181,"loc":{"start":{"line":4,"column":76,"index":170},"end":{"line":4,"column":87,"index":181}},"object":{"type":"Identifier","start":170,"end":175,"loc":{"start":{"line":4,"column":76,"index":170},"end":{"line":4,"column":81,"index":175},"identifierName":"Realm"},"name":"Realm"},"computed":false,"property":{"type":"Identifier","start":176,"end":181,"loc":{"start":{"line":4,"column":82,"index":176},"end":{"line":4,"column":87,"index":181},"identifierName":"Types"},"name":"Types"}},"computed":false,"property":{"type":"Identifier","start":182,"end":192,"loc":{"start":{"line":4,"column":88,"index":182},"end":{"line":4,"column":98,"index":192},"identifierName":"Decimal128"},"name":"Decimal128"}},"arguments":[]}

      at visitRealmClassProperty (src/plugin/index.ts:329:17)
          at Array.map (<anonymous>)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new Realm.Types.Decimal128();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "decimal128",
            optional: true,
            default: () => new Realm.Types.Decimal128()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    FISK 11: {"type":"NewExpression","start":177,"end":205,"loc":{"start":{"line":4,"column":83,"index":177},"end":{"line":4,"column":111,"index":205}},"callee":{"type":"MemberExpression","start":181,"end":203,"loc":{"start":{"line":4,"column":87,"index":181},"end":{"line":4,"column":109,"index":203}},"object":{"type":"MemberExpression","start":181,"end":192,"loc":{"start":{"line":4,"column":87,"index":181},"end":{"line":4,"column":98,"index":192}},"object":{"type":"Identifier","start":181,"end":186,"loc":{"start":{"line":4,"column":87,"index":181},"end":{"line":4,"column":92,"index":186},"identifierName":"Realm"},"name":"Realm"},"computed":false,"property":{"type":"Identifier","start":187,"end":192,"loc":{"start":{"line":4,"column":93,"index":187},"end":{"line":4,"column":98,"index":192},"identifierName":"Types"},"name":"Types"}},"computed":false,"property":{"type":"Identifier","start":193,"end":203,"loc":{"start":{"line":4,"column":99,"index":193},"end":{"line":4,"column":109,"index":203},"identifierName":"Decimal128"},"name":"Decimal128"}},"arguments":[]}

      at visitRealmClassProperty (src/plugin/index.ts:329:17)
          at Array.map (<anonymous>)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new Realm.Types.Decimal128();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "decimal128",
            optional: true,
            default: () => new Realm.Types.Decimal128()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    FISK 11: {"type":"NewExpression","start":177,"end":205,"loc":{"start":{"line":4,"column":83,"index":177},"end":{"line":4,"column":111,"index":205}},"callee":{"type":"MemberExpression","start":181,"end":203,"loc":{"start":{"line":4,"column":87,"index":181},"end":{"line":4,"column":109,"index":203}},"object":{"type":"MemberExpression","start":181,"end":192,"loc":{"start":{"line":4,"column":87,"index":181},"end":{"line":4,"column":98,"index":192}},"object":{"type":"Identifier","start":181,"end":186,"loc":{"start":{"line":4,"column":87,"index":181},"end":{"line":4,"column":92,"index":186},"identifierName":"Realm"},"name":"Realm"},"computed":false,"property":{"type":"Identifier","start":187,"end":192,"loc":{"start":{"line":4,"column":93,"index":187},"end":{"line":4,"column":98,"index":192},"identifierName":"Types"},"name":"Types"}},"computed":false,"property":{"type":"Identifier","start":193,"end":203,"loc":{"start":{"line":4,"column":99,"index":193},"end":{"line":4,"column":109,"index":203},"identifierName":"Decimal128"},"name":"Decimal128"}},"arguments":[]}

      at visitRealmClassProperty (src/plugin/index.ts:329:17)
          at Array.map (<anonymous>)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new Realm.Types.Decimal128();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "decimal128",
            optional: true,
            default: () => new Realm.Types.Decimal128()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    FISK 11: {"type":"NewExpression","start":149,"end":177,"loc":{"start":{"line":4,"column":55,"index":149},"end":{"line":4,"column":83,"index":177}},"callee":{"type":"MemberExpression","start":153,"end":175,"loc":{"start":{"line":4,"column":59,"index":153},"end":{"line":4,"column":81,"index":175}},"object":{"type":"MemberExpression","start":153,"end":164,"loc":{"start":{"line":4,"column":59,"index":153},"end":{"line":4,"column":70,"index":164}},"object":{"type":"Identifier","start":153,"end":158,"loc":{"start":{"line":4,"column":59,"index":153},"end":{"line":4,"column":64,"index":158},"identifierName":"Realm"},"name":"Realm"},"computed":false,"property":{"type":"Identifier","start":159,"end":164,"loc":{"start":{"line":4,"column":65,"index":159},"end":{"line":4,"column":70,"index":164},"identifierName":"Types"},"name":"Types"}},"computed":false,"property":{"type":"Identifier","start":165,"end":175,"loc":{"start":{"line":4,"column":71,"index":165},"end":{"line":4,"column":81,"index":175},"identifierName":"Decimal128"},"name":"Decimal128"}},"arguments":[]}

      at visitRealmClassProperty (src/plugin/index.ts:329:17)
          at Array.map (<anonymous>)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new Realm.Types.Decimal128();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "decimal128",
            optional: true,
            default: () => new Realm.Types.Decimal128()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    FISK 11: {"type":"NewExpression","start":172,"end":194,"loc":{"start":{"line":4,"column":78,"index":172},"end":{"line":4,"column":100,"index":194}},"callee":{"type":"MemberExpression","start":176,"end":192,"loc":{"start":{"line":4,"column":82,"index":176},"end":{"line":4,"column":98,"index":192}},"object":{"type":"Identifier","start":176,"end":181,"loc":{"start":{"line":4,"column":82,"index":176},"end":{"line":4,"column":87,"index":181},"identifierName":"Types"},"name":"Types"},"computed":false,"property":{"type":"Identifier","start":182,"end":192,"loc":{"start":{"line":4,"column":88,"index":182},"end":{"line":4,"column":98,"index":192},"identifierName":"Decimal128"},"name":"Decimal128"}},"arguments":[]}

      at visitRealmClassProperty (src/plugin/index.ts:329:17)
          at Array.map (<anonymous>)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new Types.Decimal128();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "decimal128",
            default: () => new Types.Decimal128()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    FISK 11: {"type":"NewExpression","start":166,"end":188,"loc":{"start":{"line":4,"column":72,"index":166},"end":{"line":4,"column":94,"index":188}},"callee":{"type":"MemberExpression","start":170,"end":186,"loc":{"start":{"line":4,"column":76,"index":170},"end":{"line":4,"column":92,"index":186}},"object":{"type":"Identifier","start":170,"end":175,"loc":{"start":{"line":4,"column":76,"index":170},"end":{"line":4,"column":81,"index":175},"identifierName":"Types"},"name":"Types"},"computed":false,"property":{"type":"Identifier","start":176,"end":186,"loc":{"start":{"line":4,"column":82,"index":176},"end":{"line":4,"column":92,"index":186},"identifierName":"Decimal128"},"name":"Decimal128"}},"arguments":[]}

      at visitRealmClassProperty (src/plugin/index.ts:329:17)
          at Array.map (<anonymous>)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new Types.Decimal128();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "decimal128",
            default: () => new Types.Decimal128()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    FISK 11: {"type":"NewExpression","start":171,"end":193,"loc":{"start":{"line":4,"column":77,"index":171},"end":{"line":4,"column":99,"index":193}},"callee":{"type":"MemberExpression","start":175,"end":191,"loc":{"start":{"line":4,"column":81,"index":175},"end":{"line":4,"column":97,"index":191}},"object":{"type":"Identifier","start":175,"end":180,"loc":{"start":{"line":4,"column":81,"index":175},"end":{"line":4,"column":86,"index":180},"identifierName":"Types"},"name":"Types"},"computed":false,"property":{"type":"Identifier","start":181,"end":191,"loc":{"start":{"line":4,"column":87,"index":181},"end":{"line":4,"column":97,"index":191},"identifierName":"Decimal128"},"name":"Decimal128"}},"arguments":[]}

      at visitRealmClassProperty (src/plugin/index.ts:329:17)
          at Array.map (<anonymous>)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new Types.Decimal128();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "decimal128",
            default: () => new Types.Decimal128()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    FISK 11: {"type":"NewExpression","start":165,"end":187,"loc":{"start":{"line":4,"column":71,"index":165},"end":{"line":4,"column":93,"index":187}},"callee":{"type":"MemberExpression","start":169,"end":185,"loc":{"start":{"line":4,"column":75,"index":169},"end":{"line":4,"column":91,"index":185}},"object":{"type":"Identifier","start":169,"end":174,"loc":{"start":{"line":4,"column":75,"index":169},"end":{"line":4,"column":80,"index":174},"identifierName":"Types"},"name":"Types"},"computed":false,"property":{"type":"Identifier","start":175,"end":185,"loc":{"start":{"line":4,"column":81,"index":175},"end":{"line":4,"column":91,"index":185},"identifierName":"Decimal128"},"name":"Decimal128"}},"arguments":[]}

      at visitRealmClassProperty (src/plugin/index.ts:329:17)
          at Array.map (<anonymous>)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new Types.Decimal128();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "decimal128",
            default: () => new Types.Decimal128()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    FISK 11: {"type":"NewExpression","start":148,"end":170,"loc":{"start":{"line":4,"column":54,"index":148},"end":{"line":4,"column":76,"index":170}},"callee":{"type":"MemberExpression","start":152,"end":168,"loc":{"start":{"line":4,"column":58,"index":152},"end":{"line":4,"column":74,"index":168}},"object":{"type":"Identifier","start":152,"end":157,"loc":{"start":{"line":4,"column":58,"index":152},"end":{"line":4,"column":63,"index":157},"identifierName":"Types"},"name":"Types"},"computed":false,"property":{"type":"Identifier","start":158,"end":168,"loc":{"start":{"line":4,"column":64,"index":158},"end":{"line":4,"column":74,"index":168},"identifierName":"Decimal128"},"name":"Decimal128"}},"arguments":[]}

      at visitRealmClassProperty (src/plugin/index.ts:329:17)
          at Array.map (<anonymous>)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new Types.Decimal128();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "decimal128",
            default: () => new Types.Decimal128()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    FISK 11: {"type":"NewExpression","start":173,"end":195,"loc":{"start":{"line":4,"column":79,"index":173},"end":{"line":4,"column":101,"index":195}},"callee":{"type":"MemberExpression","start":177,"end":193,"loc":{"start":{"line":4,"column":83,"index":177},"end":{"line":4,"column":99,"index":193}},"object":{"type":"Identifier","start":177,"end":182,"loc":{"start":{"line":4,"column":83,"index":177},"end":{"line":4,"column":88,"index":182},"identifierName":"Types"},"name":"Types"},"computed":false,"property":{"type":"Identifier","start":183,"end":193,"loc":{"start":{"line":4,"column":89,"index":183},"end":{"line":4,"column":99,"index":193},"identifierName":"Decimal128"},"name":"Decimal128"}},"arguments":[]}

      at visitRealmClassProperty (src/plugin/index.ts:329:17)
          at Array.map (<anonymous>)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new Types.Decimal128();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "decimal128",
            optional: true,
            default: () => new Types.Decimal128()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    FISK 11: {"type":"NewExpression","start":184,"end":206,"loc":{"start":{"line":4,"column":90,"index":184},"end":{"line":4,"column":112,"index":206}},"callee":{"type":"MemberExpression","start":188,"end":204,"loc":{"start":{"line":4,"column":94,"index":188},"end":{"line":4,"column":110,"index":204}},"object":{"type":"Identifier","start":188,"end":193,"loc":{"start":{"line":4,"column":94,"index":188},"end":{"line":4,"column":99,"index":193},"identifierName":"Types"},"name":"Types"},"computed":false,"property":{"type":"Identifier","start":194,"end":204,"loc":{"start":{"line":4,"column":100,"index":194},"end":{"line":4,"column":110,"index":204},"identifierName":"Decimal128"},"name":"Decimal128"}},"arguments":[]}

      at visitRealmClassProperty (src/plugin/index.ts:329:17)
          at Array.map (<anonymous>)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new Types.Decimal128();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "decimal128",
            optional: true,
            default: () => new Types.Decimal128()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    FISK 11: {"type":"NewExpression","start":184,"end":206,"loc":{"start":{"line":4,"column":90,"index":184},"end":{"line":4,"column":112,"index":206}},"callee":{"type":"MemberExpression","start":188,"end":204,"loc":{"start":{"line":4,"column":94,"index":188},"end":{"line":4,"column":110,"index":204}},"object":{"type":"Identifier","start":188,"end":193,"loc":{"start":{"line":4,"column":94,"index":188},"end":{"line":4,"column":99,"index":193},"identifierName":"Types"},"name":"Types"},"computed":false,"property":{"type":"Identifier","start":194,"end":204,"loc":{"start":{"line":4,"column":100,"index":194},"end":{"line":4,"column":110,"index":204},"identifierName":"Decimal128"},"name":"Decimal128"}},"arguments":[]}

      at visitRealmClassProperty (src/plugin/index.ts:329:17)
          at Array.map (<anonymous>)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new Types.Decimal128();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "decimal128",
            optional: true,
            default: () => new Types.Decimal128()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    FISK 11: {"type":"NewExpression","start":167,"end":189,"loc":{"start":{"line":4,"column":73,"index":167},"end":{"line":4,"column":95,"index":189}},"callee":{"type":"MemberExpression","start":171,"end":187,"loc":{"start":{"line":4,"column":77,"index":171},"end":{"line":4,"column":93,"index":187}},"object":{"type":"Identifier","start":171,"end":176,"loc":{"start":{"line":4,"column":77,"index":171},"end":{"line":4,"column":82,"index":176},"identifierName":"Types"},"name":"Types"},"computed":false,"property":{"type":"Identifier","start":177,"end":187,"loc":{"start":{"line":4,"column":83,"index":177},"end":{"line":4,"column":93,"index":187},"identifierName":"Decimal128"},"name":"Decimal128"}},"arguments":[]}

      at visitRealmClassProperty (src/plugin/index.ts:329:17)
          at Array.map (<anonymous>)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new Types.Decimal128();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "decimal128",
            optional: true,
            default: () => new Types.Decimal128()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    FISK 11: {"type":"NewExpression","start":178,"end":200,"loc":{"start":{"line":4,"column":84,"index":178},"end":{"line":4,"column":106,"index":200}},"callee":{"type":"MemberExpression","start":182,"end":198,"loc":{"start":{"line":4,"column":88,"index":182},"end":{"line":4,"column":104,"index":198}},"object":{"type":"Identifier","start":182,"end":187,"loc":{"start":{"line":4,"column":88,"index":182},"end":{"line":4,"column":93,"index":187},"identifierName":"Types"},"name":"Types"},"computed":false,"property":{"type":"Identifier","start":188,"end":198,"loc":{"start":{"line":4,"column":94,"index":188},"end":{"line":4,"column":104,"index":198},"identifierName":"Decimal128"},"name":"Decimal128"}},"arguments":[]}

      at visitRealmClassProperty (src/plugin/index.ts:329:17)
          at Array.map (<anonymous>)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new Types.Decimal128();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "decimal128",
            optional: true,
            default: () => new Types.Decimal128()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    FISK 11: {"type":"NewExpression","start":178,"end":200,"loc":{"start":{"line":4,"column":84,"index":178},"end":{"line":4,"column":106,"index":200}},"callee":{"type":"MemberExpression","start":182,"end":198,"loc":{"start":{"line":4,"column":88,"index":182},"end":{"line":4,"column":104,"index":198}},"object":{"type":"Identifier","start":182,"end":187,"loc":{"start":{"line":4,"column":88,"index":182},"end":{"line":4,"column":93,"index":187},"identifierName":"Types"},"name":"Types"},"computed":false,"property":{"type":"Identifier","start":188,"end":198,"loc":{"start":{"line":4,"column":94,"index":188},"end":{"line":4,"column":104,"index":198},"identifierName":"Decimal128"},"name":"Decimal128"}},"arguments":[]}

      at visitRealmClassProperty (src/plugin/index.ts:329:17)
          at Array.map (<anonymous>)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new Types.Decimal128();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "decimal128",
            optional: true,
            default: () => new Types.Decimal128()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    FISK 11: {"type":"NewExpression","start":172,"end":194,"loc":{"start":{"line":4,"column":78,"index":172},"end":{"line":4,"column":100,"index":194}},"callee":{"type":"MemberExpression","start":176,"end":192,"loc":{"start":{"line":4,"column":82,"index":176},"end":{"line":4,"column":98,"index":192}},"object":{"type":"Identifier","start":176,"end":181,"loc":{"start":{"line":4,"column":82,"index":176},"end":{"line":4,"column":87,"index":181},"identifierName":"Types"},"name":"Types"},"computed":false,"property":{"type":"Identifier","start":182,"end":192,"loc":{"start":{"line":4,"column":88,"index":182},"end":{"line":4,"column":98,"index":192},"identifierName":"Decimal128"},"name":"Decimal128"}},"arguments":[]}

      at visitRealmClassProperty (src/plugin/index.ts:329:17)
          at Array.map (<anonymous>)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new Types.Decimal128();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "decimal128",
            optional: true,
            default: () => new Types.Decimal128()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    FISK 11: {"type":"NewExpression","start":183,"end":205,"loc":{"start":{"line":4,"column":89,"index":183},"end":{"line":4,"column":111,"index":205}},"callee":{"type":"MemberExpression","start":187,"end":203,"loc":{"start":{"line":4,"column":93,"index":187},"end":{"line":4,"column":109,"index":203}},"object":{"type":"Identifier","start":187,"end":192,"loc":{"start":{"line":4,"column":93,"index":187},"end":{"line":4,"column":98,"index":192},"identifierName":"Types"},"name":"Types"},"computed":false,"property":{"type":"Identifier","start":193,"end":203,"loc":{"start":{"line":4,"column":99,"index":193},"end":{"line":4,"column":109,"index":203},"identifierName":"Decimal128"},"name":"Decimal128"}},"arguments":[]}

      at visitRealmClassProperty (src/plugin/index.ts:329:17)
          at Array.map (<anonymous>)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new Types.Decimal128();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "decimal128",
            optional: true,
            default: () => new Types.Decimal128()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    FISK 11: {"type":"NewExpression","start":183,"end":205,"loc":{"start":{"line":4,"column":89,"index":183},"end":{"line":4,"column":111,"index":205}},"callee":{"type":"MemberExpression","start":187,"end":203,"loc":{"start":{"line":4,"column":93,"index":187},"end":{"line":4,"column":109,"index":203}},"object":{"type":"Identifier","start":187,"end":192,"loc":{"start":{"line":4,"column":93,"index":187},"end":{"line":4,"column":98,"index":192},"identifierName":"Types"},"name":"Types"},"computed":false,"property":{"type":"Identifier","start":193,"end":203,"loc":{"start":{"line":4,"column":99,"index":193},"end":{"line":4,"column":109,"index":203},"identifierName":"Decimal128"},"name":"Decimal128"}},"arguments":[]}

      at visitRealmClassProperty (src/plugin/index.ts:329:17)
          at Array.map (<anonymous>)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new Types.Decimal128();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "decimal128",
            optional: true,
            default: () => new Types.Decimal128()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    FISK 11: {"type":"NewExpression","start":166,"end":188,"loc":{"start":{"line":4,"column":72,"index":166},"end":{"line":4,"column":94,"index":188}},"callee":{"type":"MemberExpression","start":170,"end":186,"loc":{"start":{"line":4,"column":76,"index":170},"end":{"line":4,"column":92,"index":186}},"object":{"type":"Identifier","start":170,"end":175,"loc":{"start":{"line":4,"column":76,"index":170},"end":{"line":4,"column":81,"index":175},"identifierName":"Types"},"name":"Types"},"computed":false,"property":{"type":"Identifier","start":176,"end":186,"loc":{"start":{"line":4,"column":82,"index":176},"end":{"line":4,"column":92,"index":186},"identifierName":"Decimal128"},"name":"Decimal128"}},"arguments":[]}

      at visitRealmClassProperty (src/plugin/index.ts:329:17)
          at Array.map (<anonymous>)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new Types.Decimal128();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "decimal128",
            optional: true,
            default: () => new Types.Decimal128()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    FISK 11: {"type":"NewExpression","start":177,"end":199,"loc":{"start":{"line":4,"column":83,"index":177},"end":{"line":4,"column":105,"index":199}},"callee":{"type":"MemberExpression","start":181,"end":197,"loc":{"start":{"line":4,"column":87,"index":181},"end":{"line":4,"column":103,"index":197}},"object":{"type":"Identifier","start":181,"end":186,"loc":{"start":{"line":4,"column":87,"index":181},"end":{"line":4,"column":92,"index":186},"identifierName":"Types"},"name":"Types"},"computed":false,"property":{"type":"Identifier","start":187,"end":197,"loc":{"start":{"line":4,"column":93,"index":187},"end":{"line":4,"column":103,"index":197},"identifierName":"Decimal128"},"name":"Decimal128"}},"arguments":[]}

      at visitRealmClassProperty (src/plugin/index.ts:329:17)
          at Array.map (<anonymous>)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new Types.Decimal128();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "decimal128",
            optional: true,
            default: () => new Types.Decimal128()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    FISK 11: {"type":"NewExpression","start":177,"end":199,"loc":{"start":{"line":4,"column":83,"index":177},"end":{"line":4,"column":105,"index":199}},"callee":{"type":"MemberExpression","start":181,"end":197,"loc":{"start":{"line":4,"column":87,"index":181},"end":{"line":4,"column":103,"index":197}},"object":{"type":"Identifier","start":181,"end":186,"loc":{"start":{"line":4,"column":87,"index":181},"end":{"line":4,"column":92,"index":186},"identifierName":"Types"},"name":"Types"},"computed":false,"property":{"type":"Identifier","start":187,"end":197,"loc":{"start":{"line":4,"column":93,"index":187},"end":{"line":4,"column":103,"index":197},"identifierName":"Decimal128"},"name":"Decimal128"}},"arguments":[]}

      at visitRealmClassProperty (src/plugin/index.ts:329:17)
          at Array.map (<anonymous>)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new Types.Decimal128();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "decimal128",
            optional: true,
            default: () => new Types.Decimal128()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    FISK 11: {"type":"NewExpression","start":149,"end":171,"loc":{"start":{"line":4,"column":55,"index":149},"end":{"line":4,"column":77,"index":171}},"callee":{"type":"MemberExpression","start":153,"end":169,"loc":{"start":{"line":4,"column":59,"index":153},"end":{"line":4,"column":75,"index":169}},"object":{"type":"Identifier","start":153,"end":158,"loc":{"start":{"line":4,"column":59,"index":153},"end":{"line":4,"column":64,"index":158},"identifierName":"Types"},"name":"Types"},"computed":false,"property":{"type":"Identifier","start":159,"end":169,"loc":{"start":{"line":4,"column":65,"index":159},"end":{"line":4,"column":75,"index":169},"identifierName":"Decimal128"},"name":"Decimal128"}},"arguments":[]}

      at visitRealmClassProperty (src/plugin/index.ts:329:17)
          at Array.map (<anonymous>)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new Types.Decimal128();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "decimal128",
            optional: true,
            default: () => new Types.Decimal128()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    FISK 11: {"type":"NewExpression","start":172,"end":199,"loc":{"start":{"line":4,"column":78,"index":172},"end":{"line":4,"column":105,"index":199}},"callee":{"type":"MemberExpression","start":176,"end":197,"loc":{"start":{"line":4,"column":82,"index":176},"end":{"line":4,"column":103,"index":197}},"object":{"type":"MemberExpression","start":176,"end":186,"loc":{"start":{"line":4,"column":82,"index":176},"end":{"line":4,"column":92,"index":186}},"object":{"type":"Identifier","start":176,"end":181,"loc":{"start":{"line":4,"column":82,"index":176},"end":{"line":4,"column":87,"index":181},"identifierName":"Realm"},"name":"Realm"},"computed":false,"property":{"type":"Identifier","start":182,"end":186,"loc":{"start":{"line":4,"column":88,"index":182},"end":{"line":4,"column":92,"index":186},"identifierName":"BSON"},"name":"BSON"}},"computed":false,"property":{"type":"Identifier","start":187,"end":197,"loc":{"start":{"line":4,"column":93,"index":187},"end":{"line":4,"column":103,"index":197},"identifierName":"Decimal128"},"name":"Decimal128"}},"arguments":[]}

      at visitRealmClassProperty (src/plugin/index.ts:329:17)
          at Array.map (<anonymous>)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new Realm.BSON.Decimal128();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "decimal128",
            default: () => new Realm.BSON.Decimal128()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    FISK 11: {"type":"NewExpression","start":166,"end":193,"loc":{"start":{"line":4,"column":72,"index":166},"end":{"line":4,"column":99,"index":193}},"callee":{"type":"MemberExpression","start":170,"end":191,"loc":{"start":{"line":4,"column":76,"index":170},"end":{"line":4,"column":97,"index":191}},"object":{"type":"MemberExpression","start":170,"end":180,"loc":{"start":{"line":4,"column":76,"index":170},"end":{"line":4,"column":86,"index":180}},"object":{"type":"Identifier","start":170,"end":175,"loc":{"start":{"line":4,"column":76,"index":170},"end":{"line":4,"column":81,"index":175},"identifierName":"Realm"},"name":"Realm"},"computed":false,"property":{"type":"Identifier","start":176,"end":180,"loc":{"start":{"line":4,"column":82,"index":176},"end":{"line":4,"column":86,"index":180},"identifierName":"BSON"},"name":"BSON"}},"computed":false,"property":{"type":"Identifier","start":181,"end":191,"loc":{"start":{"line":4,"column":87,"index":181},"end":{"line":4,"column":97,"index":191},"identifierName":"Decimal128"},"name":"Decimal128"}},"arguments":[]}

      at visitRealmClassProperty (src/plugin/index.ts:329:17)
          at Array.map (<anonymous>)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new Realm.BSON.Decimal128();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "decimal128",
            default: () => new Realm.BSON.Decimal128()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    FISK 11: {"type":"NewExpression","start":171,"end":198,"loc":{"start":{"line":4,"column":77,"index":171},"end":{"line":4,"column":104,"index":198}},"callee":{"type":"MemberExpression","start":175,"end":196,"loc":{"start":{"line":4,"column":81,"index":175},"end":{"line":4,"column":102,"index":196}},"object":{"type":"MemberExpression","start":175,"end":185,"loc":{"start":{"line":4,"column":81,"index":175},"end":{"line":4,"column":91,"index":185}},"object":{"type":"Identifier","start":175,"end":180,"loc":{"start":{"line":4,"column":81,"index":175},"end":{"line":4,"column":86,"index":180},"identifierName":"Realm"},"name":"Realm"},"computed":false,"property":{"type":"Identifier","start":181,"end":185,"loc":{"start":{"line":4,"column":87,"index":181},"end":{"line":4,"column":91,"index":185},"identifierName":"BSON"},"name":"BSON"}},"computed":false,"property":{"type":"Identifier","start":186,"end":196,"loc":{"start":{"line":4,"column":92,"index":186},"end":{"line":4,"column":102,"index":196},"identifierName":"Decimal128"},"name":"Decimal128"}},"arguments":[]}

      at visitRealmClassProperty (src/plugin/index.ts:329:17)
          at Array.map (<anonymous>)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new Realm.BSON.Decimal128();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "decimal128",
            default: () => new Realm.BSON.Decimal128()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    FISK 11: {"type":"NewExpression","start":165,"end":192,"loc":{"start":{"line":4,"column":71,"index":165},"end":{"line":4,"column":98,"index":192}},"callee":{"type":"MemberExpression","start":169,"end":190,"loc":{"start":{"line":4,"column":75,"index":169},"end":{"line":4,"column":96,"index":190}},"object":{"type":"MemberExpression","start":169,"end":179,"loc":{"start":{"line":4,"column":75,"index":169},"end":{"line":4,"column":85,"index":179}},"object":{"type":"Identifier","start":169,"end":174,"loc":{"start":{"line":4,"column":75,"index":169},"end":{"line":4,"column":80,"index":174},"identifierName":"Realm"},"name":"Realm"},"computed":false,"property":{"type":"Identifier","start":175,"end":179,"loc":{"start":{"line":4,"column":81,"index":175},"end":{"line":4,"column":85,"index":179},"identifierName":"BSON"},"name":"BSON"}},"computed":false,"property":{"type":"Identifier","start":180,"end":190,"loc":{"start":{"line":4,"column":86,"index":180},"end":{"line":4,"column":96,"index":190},"identifierName":"Decimal128"},"name":"Decimal128"}},"arguments":[]}

      at visitRealmClassProperty (src/plugin/index.ts:329:17)
          at Array.map (<anonymous>)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new Realm.BSON.Decimal128();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "decimal128",
            default: () => new Realm.BSON.Decimal128()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    FISK 11: {"type":"NewExpression","start":148,"end":175,"loc":{"start":{"line":4,"column":54,"index":148},"end":{"line":4,"column":81,"index":175}},"callee":{"type":"MemberExpression","start":152,"end":173,"loc":{"start":{"line":4,"column":58,"index":152},"end":{"line":4,"column":79,"index":173}},"object":{"type":"MemberExpression","start":152,"end":162,"loc":{"start":{"line":4,"column":58,"index":152},"end":{"line":4,"column":68,"index":162}},"object":{"type":"Identifier","start":152,"end":157,"loc":{"start":{"line":4,"column":58,"index":152},"end":{"line":4,"column":63,"index":157},"identifierName":"Realm"},"name":"Realm"},"computed":false,"property":{"type":"Identifier","start":158,"end":162,"loc":{"start":{"line":4,"column":64,"index":158},"end":{"line":4,"column":68,"index":162},"identifierName":"BSON"},"name":"BSON"}},"computed":false,"property":{"type":"Identifier","start":163,"end":173,"loc":{"start":{"line":4,"column":69,"index":163},"end":{"line":4,"column":79,"index":173},"identifierName":"Decimal128"},"name":"Decimal128"}},"arguments":[]}

      at visitRealmClassProperty (src/plugin/index.ts:329:17)
          at Array.map (<anonymous>)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new Realm.BSON.Decimal128();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "decimal128",
            default: () => new Realm.BSON.Decimal128()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    FISK 11: {"type":"NewExpression","start":173,"end":200,"loc":{"start":{"line":4,"column":79,"index":173},"end":{"line":4,"column":106,"index":200}},"callee":{"type":"MemberExpression","start":177,"end":198,"loc":{"start":{"line":4,"column":83,"index":177},"end":{"line":4,"column":104,"index":198}},"object":{"type":"MemberExpression","start":177,"end":187,"loc":{"start":{"line":4,"column":83,"index":177},"end":{"line":4,"column":93,"index":187}},"object":{"type":"Identifier","start":177,"end":182,"loc":{"start":{"line":4,"column":83,"index":177},"end":{"line":4,"column":88,"index":182},"identifierName":"Realm"},"name":"Realm"},"computed":false,"property":{"type":"Identifier","start":183,"end":187,"loc":{"start":{"line":4,"column":89,"index":183},"end":{"line":4,"column":93,"index":187},"identifierName":"BSON"},"name":"BSON"}},"computed":false,"property":{"type":"Identifier","start":188,"end":198,"loc":{"start":{"line":4,"column":94,"index":188},"end":{"line":4,"column":104,"index":198},"identifierName":"Decimal128"},"name":"Decimal128"}},"arguments":[]}

      at visitRealmClassProperty (src/plugin/index.ts:329:17)
          at Array.map (<anonymous>)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new Realm.BSON.Decimal128();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "decimal128",
            optional: true,
            default: () => new Realm.BSON.Decimal128()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    FISK 11: {"type":"NewExpression","start":184,"end":211,"loc":{"start":{"line":4,"column":90,"index":184},"end":{"line":4,"column":117,"index":211}},"callee":{"type":"MemberExpression","start":188,"end":209,"loc":{"start":{"line":4,"column":94,"index":188},"end":{"line":4,"column":115,"index":209}},"object":{"type":"MemberExpression","start":188,"end":198,"loc":{"start":{"line":4,"column":94,"index":188},"end":{"line":4,"column":104,"index":198}},"object":{"type":"Identifier","start":188,"end":193,"loc":{"start":{"line":4,"column":94,"index":188},"end":{"line":4,"column":99,"index":193},"identifierName":"Realm"},"name":"Realm"},"computed":false,"property":{"type":"Identifier","start":194,"end":198,"loc":{"start":{"line":4,"column":100,"index":194},"end":{"line":4,"column":104,"index":198},"identifierName":"BSON"},"name":"BSON"}},"computed":false,"property":{"type":"Identifier","start":199,"end":209,"loc":{"start":{"line":4,"column":105,"index":199},"end":{"line":4,"column":115,"index":209},"identifierName":"Decimal128"},"name":"Decimal128"}},"arguments":[]}

      at visitRealmClassProperty (src/plugin/index.ts:329:17)
          at Array.map (<anonymous>)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new Realm.BSON.Decimal128();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "decimal128",
            optional: true,
            default: () => new Realm.BSON.Decimal128()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    FISK 11: {"type":"NewExpression","start":184,"end":211,"loc":{"start":{"line":4,"column":90,"index":184},"end":{"line":4,"column":117,"index":211}},"callee":{"type":"MemberExpression","start":188,"end":209,"loc":{"start":{"line":4,"column":94,"index":188},"end":{"line":4,"column":115,"index":209}},"object":{"type":"MemberExpression","start":188,"end":198,"loc":{"start":{"line":4,"column":94,"index":188},"end":{"line":4,"column":104,"index":198}},"object":{"type":"Identifier","start":188,"end":193,"loc":{"start":{"line":4,"column":94,"index":188},"end":{"line":4,"column":99,"index":193},"identifierName":"Realm"},"name":"Realm"},"computed":false,"property":{"type":"Identifier","start":194,"end":198,"loc":{"start":{"line":4,"column":100,"index":194},"end":{"line":4,"column":104,"index":198},"identifierName":"BSON"},"name":"BSON"}},"computed":false,"property":{"type":"Identifier","start":199,"end":209,"loc":{"start":{"line":4,"column":105,"index":199},"end":{"line":4,"column":115,"index":209},"identifierName":"Decimal128"},"name":"Decimal128"}},"arguments":[]}

      at visitRealmClassProperty (src/plugin/index.ts:329:17)
          at Array.map (<anonymous>)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new Realm.BSON.Decimal128();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "decimal128",
            optional: true,
            default: () => new Realm.BSON.Decimal128()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    FISK 11: {"type":"NewExpression","start":167,"end":194,"loc":{"start":{"line":4,"column":73,"index":167},"end":{"line":4,"column":100,"index":194}},"callee":{"type":"MemberExpression","start":171,"end":192,"loc":{"start":{"line":4,"column":77,"index":171},"end":{"line":4,"column":98,"index":192}},"object":{"type":"MemberExpression","start":171,"end":181,"loc":{"start":{"line":4,"column":77,"index":171},"end":{"line":4,"column":87,"index":181}},"object":{"type":"Identifier","start":171,"end":176,"loc":{"start":{"line":4,"column":77,"index":171},"end":{"line":4,"column":82,"index":176},"identifierName":"Realm"},"name":"Realm"},"computed":false,"property":{"type":"Identifier","start":177,"end":181,"loc":{"start":{"line":4,"column":83,"index":177},"end":{"line":4,"column":87,"index":181},"identifierName":"BSON"},"name":"BSON"}},"computed":false,"property":{"type":"Identifier","start":182,"end":192,"loc":{"start":{"line":4,"column":88,"index":182},"end":{"line":4,"column":98,"index":192},"identifierName":"Decimal128"},"name":"Decimal128"}},"arguments":[]}

      at visitRealmClassProperty (src/plugin/index.ts:329:17)
          at Array.map (<anonymous>)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new Realm.BSON.Decimal128();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "decimal128",
            optional: true,
            default: () => new Realm.BSON.Decimal128()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    FISK 11: {"type":"NewExpression","start":178,"end":205,"loc":{"start":{"line":4,"column":84,"index":178},"end":{"line":4,"column":111,"index":205}},"callee":{"type":"MemberExpression","start":182,"end":203,"loc":{"start":{"line":4,"column":88,"index":182},"end":{"line":4,"column":109,"index":203}},"object":{"type":"MemberExpression","start":182,"end":192,"loc":{"start":{"line":4,"column":88,"index":182},"end":{"line":4,"column":98,"index":192}},"object":{"type":"Identifier","start":182,"end":187,"loc":{"start":{"line":4,"column":88,"index":182},"end":{"line":4,"column":93,"index":187},"identifierName":"Realm"},"name":"Realm"},"computed":false,"property":{"type":"Identifier","start":188,"end":192,"loc":{"start":{"line":4,"column":94,"index":188},"end":{"line":4,"column":98,"index":192},"identifierName":"BSON"},"name":"BSON"}},"computed":false,"property":{"type":"Identifier","start":193,"end":203,"loc":{"start":{"line":4,"column":99,"index":193},"end":{"line":4,"column":109,"index":203},"identifierName":"Decimal128"},"name":"Decimal128"}},"arguments":[]}

      at visitRealmClassProperty (src/plugin/index.ts:329:17)
          at Array.map (<anonymous>)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new Realm.BSON.Decimal128();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "decimal128",
            optional: true,
            default: () => new Realm.BSON.Decimal128()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    FISK 11: {"type":"NewExpression","start":178,"end":205,"loc":{"start":{"line":4,"column":84,"index":178},"end":{"line":4,"column":111,"index":205}},"callee":{"type":"MemberExpression","start":182,"end":203,"loc":{"start":{"line":4,"column":88,"index":182},"end":{"line":4,"column":109,"index":203}},"object":{"type":"MemberExpression","start":182,"end":192,"loc":{"start":{"line":4,"column":88,"index":182},"end":{"line":4,"column":98,"index":192}},"object":{"type":"Identifier","start":182,"end":187,"loc":{"start":{"line":4,"column":88,"index":182},"end":{"line":4,"column":93,"index":187},"identifierName":"Realm"},"name":"Realm"},"computed":false,"property":{"type":"Identifier","start":188,"end":192,"loc":{"start":{"line":4,"column":94,"index":188},"end":{"line":4,"column":98,"index":192},"identifierName":"BSON"},"name":"BSON"}},"computed":false,"property":{"type":"Identifier","start":193,"end":203,"loc":{"start":{"line":4,"column":99,"index":193},"end":{"line":4,"column":109,"index":203},"identifierName":"Decimal128"},"name":"Decimal128"}},"arguments":[]}

      at visitRealmClassProperty (src/plugin/index.ts:329:17)
          at Array.map (<anonymous>)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new Realm.BSON.Decimal128();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "decimal128",
            optional: true,
            default: () => new Realm.BSON.Decimal128()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    FISK 11: {"type":"NewExpression","start":172,"end":199,"loc":{"start":{"line":4,"column":78,"index":172},"end":{"line":4,"column":105,"index":199}},"callee":{"type":"MemberExpression","start":176,"end":197,"loc":{"start":{"line":4,"column":82,"index":176},"end":{"line":4,"column":103,"index":197}},"object":{"type":"MemberExpression","start":176,"end":186,"loc":{"start":{"line":4,"column":82,"index":176},"end":{"line":4,"column":92,"index":186}},"object":{"type":"Identifier","start":176,"end":181,"loc":{"start":{"line":4,"column":82,"index":176},"end":{"line":4,"column":87,"index":181},"identifierName":"Realm"},"name":"Realm"},"computed":false,"property":{"type":"Identifier","start":182,"end":186,"loc":{"start":{"line":4,"column":88,"index":182},"end":{"line":4,"column":92,"index":186},"identifierName":"BSON"},"name":"BSON"}},"computed":false,"property":{"type":"Identifier","start":187,"end":197,"loc":{"start":{"line":4,"column":93,"index":187},"end":{"line":4,"column":103,"index":197},"identifierName":"Decimal128"},"name":"Decimal128"}},"arguments":[]}

      at visitRealmClassProperty (src/plugin/index.ts:329:17)
          at Array.map (<anonymous>)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new Realm.BSON.Decimal128();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "decimal128",
            optional: true,
            default: () => new Realm.BSON.Decimal128()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    FISK 11: {"type":"NewExpression","start":183,"end":210,"loc":{"start":{"line":4,"column":89,"index":183},"end":{"line":4,"column":116,"index":210}},"callee":{"type":"MemberExpression","start":187,"end":208,"loc":{"start":{"line":4,"column":93,"index":187},"end":{"line":4,"column":114,"index":208}},"object":{"type":"MemberExpression","start":187,"end":197,"loc":{"start":{"line":4,"column":93,"index":187},"end":{"line":4,"column":103,"index":197}},"object":{"type":"Identifier","start":187,"end":192,"loc":{"start":{"line":4,"column":93,"index":187},"end":{"line":4,"column":98,"index":192},"identifierName":"Realm"},"name":"Realm"},"computed":false,"property":{"type":"Identifier","start":193,"end":197,"loc":{"start":{"line":4,"column":99,"index":193},"end":{"line":4,"column":103,"index":197},"identifierName":"BSON"},"name":"BSON"}},"computed":false,"property":{"type":"Identifier","start":198,"end":208,"loc":{"start":{"line":4,"column":104,"index":198},"end":{"line":4,"column":114,"index":208},"identifierName":"Decimal128"},"name":"Decimal128"}},"arguments":[]}

      at visitRealmClassProperty (src/plugin/index.ts:329:17)
          at Array.map (<anonymous>)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new Realm.BSON.Decimal128();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "decimal128",
            optional: true,
            default: () => new Realm.BSON.Decimal128()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    FISK 11: {"type":"NewExpression","start":183,"end":210,"loc":{"start":{"line":4,"column":89,"index":183},"end":{"line":4,"column":116,"index":210}},"callee":{"type":"MemberExpression","start":187,"end":208,"loc":{"start":{"line":4,"column":93,"index":187},"end":{"line":4,"column":114,"index":208}},"object":{"type":"MemberExpression","start":187,"end":197,"loc":{"start":{"line":4,"column":93,"index":187},"end":{"line":4,"column":103,"index":197}},"object":{"type":"Identifier","start":187,"end":192,"loc":{"start":{"line":4,"column":93,"index":187},"end":{"line":4,"column":98,"index":192},"identifierName":"Realm"},"name":"Realm"},"computed":false,"property":{"type":"Identifier","start":193,"end":197,"loc":{"start":{"line":4,"column":99,"index":193},"end":{"line":4,"column":103,"index":197},"identifierName":"BSON"},"name":"BSON"}},"computed":false,"property":{"type":"Identifier","start":198,"end":208,"loc":{"start":{"line":4,"column":104,"index":198},"end":{"line":4,"column":114,"index":208},"identifierName":"Decimal128"},"name":"Decimal128"}},"arguments":[]}

      at visitRealmClassProperty (src/plugin/index.ts:329:17)
          at Array.map (<anonymous>)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new Realm.BSON.Decimal128();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "decimal128",
            optional: true,
            default: () => new Realm.BSON.Decimal128()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    FISK 11: {"type":"NewExpression","start":166,"end":193,"loc":{"start":{"line":4,"column":72,"index":166},"end":{"line":4,"column":99,"index":193}},"callee":{"type":"MemberExpression","start":170,"end":191,"loc":{"start":{"line":4,"column":76,"index":170},"end":{"line":4,"column":97,"index":191}},"object":{"type":"MemberExpression","start":170,"end":180,"loc":{"start":{"line":4,"column":76,"index":170},"end":{"line":4,"column":86,"index":180}},"object":{"type":"Identifier","start":170,"end":175,"loc":{"start":{"line":4,"column":76,"index":170},"end":{"line":4,"column":81,"index":175},"identifierName":"Realm"},"name":"Realm"},"computed":false,"property":{"type":"Identifier","start":176,"end":180,"loc":{"start":{"line":4,"column":82,"index":176},"end":{"line":4,"column":86,"index":180},"identifierName":"BSON"},"name":"BSON"}},"computed":false,"property":{"type":"Identifier","start":181,"end":191,"loc":{"start":{"line":4,"column":87,"index":181},"end":{"line":4,"column":97,"index":191},"identifierName":"Decimal128"},"name":"Decimal128"}},"arguments":[]}

      at visitRealmClassProperty (src/plugin/index.ts:329:17)
          at Array.map (<anonymous>)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new Realm.BSON.Decimal128();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "decimal128",
            optional: true,
            default: () => new Realm.BSON.Decimal128()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    FISK 11: {"type":"NewExpression","start":177,"end":204,"loc":{"start":{"line":4,"column":83,"index":177},"end":{"line":4,"column":110,"index":204}},"callee":{"type":"MemberExpression","start":181,"end":202,"loc":{"start":{"line":4,"column":87,"index":181},"end":{"line":4,"column":108,"index":202}},"object":{"type":"MemberExpression","start":181,"end":191,"loc":{"start":{"line":4,"column":87,"index":181},"end":{"line":4,"column":97,"index":191}},"object":{"type":"Identifier","start":181,"end":186,"loc":{"start":{"line":4,"column":87,"index":181},"end":{"line":4,"column":92,"index":186},"identifierName":"Realm"},"name":"Realm"},"computed":false,"property":{"type":"Identifier","start":187,"end":191,"loc":{"start":{"line":4,"column":93,"index":187},"end":{"line":4,"column":97,"index":191},"identifierName":"BSON"},"name":"BSON"}},"computed":false,"property":{"type":"Identifier","start":192,"end":202,"loc":{"start":{"line":4,"column":98,"index":192},"end":{"line":4,"column":108,"index":202},"identifierName":"Decimal128"},"name":"Decimal128"}},"arguments":[]}

      at visitRealmClassProperty (src/plugin/index.ts:329:17)
          at Array.map (<anonymous>)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new Realm.BSON.Decimal128();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "decimal128",
            optional: true,
            default: () => new Realm.BSON.Decimal128()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    FISK 11: {"type":"NewExpression","start":177,"end":204,"loc":{"start":{"line":4,"column":83,"index":177},"end":{"line":4,"column":110,"index":204}},"callee":{"type":"MemberExpression","start":181,"end":202,"loc":{"start":{"line":4,"column":87,"index":181},"end":{"line":4,"column":108,"index":202}},"object":{"type":"MemberExpression","start":181,"end":191,"loc":{"start":{"line":4,"column":87,"index":181},"end":{"line":4,"column":97,"index":191}},"object":{"type":"Identifier","start":181,"end":186,"loc":{"start":{"line":4,"column":87,"index":181},"end":{"line":4,"column":92,"index":186},"identifierName":"Realm"},"name":"Realm"},"computed":false,"property":{"type":"Identifier","start":187,"end":191,"loc":{"start":{"line":4,"column":93,"index":187},"end":{"line":4,"column":97,"index":191},"identifierName":"BSON"},"name":"BSON"}},"computed":false,"property":{"type":"Identifier","start":192,"end":202,"loc":{"start":{"line":4,"column":98,"index":192},"end":{"line":4,"column":108,"index":202},"identifierName":"Decimal128"},"name":"Decimal128"}},"arguments":[]}

      at visitRealmClassProperty (src/plugin/index.ts:329:17)
          at Array.map (<anonymous>)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new Realm.BSON.Decimal128();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "decimal128",
            optional: true,
            default: () => new Realm.BSON.Decimal128()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    FISK 11: {"type":"NewExpression","start":149,"end":176,"loc":{"start":{"line":4,"column":55,"index":149},"end":{"line":4,"column":82,"index":176}},"callee":{"type":"MemberExpression","start":153,"end":174,"loc":{"start":{"line":4,"column":59,"index":153},"end":{"line":4,"column":80,"index":174}},"object":{"type":"MemberExpression","start":153,"end":163,"loc":{"start":{"line":4,"column":59,"index":153},"end":{"line":4,"column":69,"index":163}},"object":{"type":"Identifier","start":153,"end":158,"loc":{"start":{"line":4,"column":59,"index":153},"end":{"line":4,"column":64,"index":158},"identifierName":"Realm"},"name":"Realm"},"computed":false,"property":{"type":"Identifier","start":159,"end":163,"loc":{"start":{"line":4,"column":65,"index":159},"end":{"line":4,"column":69,"index":163},"identifierName":"BSON"},"name":"BSON"}},"computed":false,"property":{"type":"Identifier","start":164,"end":174,"loc":{"start":{"line":4,"column":70,"index":164},"end":{"line":4,"column":80,"index":174},"identifierName":"Decimal128"},"name":"Decimal128"}},"arguments":[]}

      at visitRealmClassProperty (src/plugin/index.ts:329:17)
          at Array.map (<anonymous>)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new Realm.BSON.Decimal128();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "decimal128",
            optional: true,
            default: () => new Realm.BSON.Decimal128()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    FISK 11: {"type":"NewExpression","start":172,"end":193,"loc":{"start":{"line":4,"column":78,"index":172},"end":{"line":4,"column":99,"index":193}},"callee":{"type":"MemberExpression","start":176,"end":191,"loc":{"start":{"line":4,"column":82,"index":176},"end":{"line":4,"column":97,"index":191}},"object":{"type":"Identifier","start":176,"end":180,"loc":{"start":{"line":4,"column":82,"index":176},"end":{"line":4,"column":86,"index":180},"identifierName":"BSON"},"name":"BSON"},"computed":false,"property":{"type":"Identifier","start":181,"end":191,"loc":{"start":{"line":4,"column":87,"index":181},"end":{"line":4,"column":97,"index":191},"identifierName":"Decimal128"},"name":"Decimal128"}},"arguments":[]}

      at visitRealmClassProperty (src/plugin/index.ts:329:17)
          at Array.map (<anonymous>)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new BSON.Decimal128();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "decimal128",
            default: () => new BSON.Decimal128()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    FISK 11: {"type":"NewExpression","start":166,"end":187,"loc":{"start":{"line":4,"column":72,"index":166},"end":{"line":4,"column":93,"index":187}},"callee":{"type":"MemberExpression","start":170,"end":185,"loc":{"start":{"line":4,"column":76,"index":170},"end":{"line":4,"column":91,"index":185}},"object":{"type":"Identifier","start":170,"end":174,"loc":{"start":{"line":4,"column":76,"index":170},"end":{"line":4,"column":80,"index":174},"identifierName":"BSON"},"name":"BSON"},"computed":false,"property":{"type":"Identifier","start":175,"end":185,"loc":{"start":{"line":4,"column":81,"index":175},"end":{"line":4,"column":91,"index":185},"identifierName":"Decimal128"},"name":"Decimal128"}},"arguments":[]}

      at visitRealmClassProperty (src/plugin/index.ts:329:17)
          at Array.map (<anonymous>)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new BSON.Decimal128();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "decimal128",
            default: () => new BSON.Decimal128()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    FISK 11: {"type":"NewExpression","start":171,"end":192,"loc":{"start":{"line":4,"column":77,"index":171},"end":{"line":4,"column":98,"index":192}},"callee":{"type":"MemberExpression","start":175,"end":190,"loc":{"start":{"line":4,"column":81,"index":175},"end":{"line":4,"column":96,"index":190}},"object":{"type":"Identifier","start":175,"end":179,"loc":{"start":{"line":4,"column":81,"index":175},"end":{"line":4,"column":85,"index":179},"identifierName":"BSON"},"name":"BSON"},"computed":false,"property":{"type":"Identifier","start":180,"end":190,"loc":{"start":{"line":4,"column":86,"index":180},"end":{"line":4,"column":96,"index":190},"identifierName":"Decimal128"},"name":"Decimal128"}},"arguments":[]}

      at visitRealmClassProperty (src/plugin/index.ts:329:17)
          at Array.map (<anonymous>)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new BSON.Decimal128();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "decimal128",
            default: () => new BSON.Decimal128()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    FISK 11: {"type":"NewExpression","start":165,"end":186,"loc":{"start":{"line":4,"column":71,"index":165},"end":{"line":4,"column":92,"index":186}},"callee":{"type":"MemberExpression","start":169,"end":184,"loc":{"start":{"line":4,"column":75,"index":169},"end":{"line":4,"column":90,"index":184}},"object":{"type":"Identifier","start":169,"end":173,"loc":{"start":{"line":4,"column":75,"index":169},"end":{"line":4,"column":79,"index":173},"identifierName":"BSON"},"name":"BSON"},"computed":false,"property":{"type":"Identifier","start":174,"end":184,"loc":{"start":{"line":4,"column":80,"index":174},"end":{"line":4,"column":90,"index":184},"identifierName":"Decimal128"},"name":"Decimal128"}},"arguments":[]}

      at visitRealmClassProperty (src/plugin/index.ts:329:17)
          at Array.map (<anonymous>)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new BSON.Decimal128();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "decimal128",
            default: () => new BSON.Decimal128()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    FISK 11: {"type":"NewExpression","start":148,"end":169,"loc":{"start":{"line":4,"column":54,"index":148},"end":{"line":4,"column":75,"index":169}},"callee":{"type":"MemberExpression","start":152,"end":167,"loc":{"start":{"line":4,"column":58,"index":152},"end":{"line":4,"column":73,"index":167}},"object":{"type":"Identifier","start":152,"end":156,"loc":{"start":{"line":4,"column":58,"index":152},"end":{"line":4,"column":62,"index":156},"identifierName":"BSON"},"name":"BSON"},"computed":false,"property":{"type":"Identifier","start":157,"end":167,"loc":{"start":{"line":4,"column":63,"index":157},"end":{"line":4,"column":73,"index":167},"identifierName":"Decimal128"},"name":"Decimal128"}},"arguments":[]}

      at visitRealmClassProperty (src/plugin/index.ts:329:17)
          at Array.map (<anonymous>)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new BSON.Decimal128();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "decimal128",
            default: () => new BSON.Decimal128()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    FISK 11: {"type":"NewExpression","start":173,"end":194,"loc":{"start":{"line":4,"column":79,"index":173},"end":{"line":4,"column":100,"index":194}},"callee":{"type":"MemberExpression","start":177,"end":192,"loc":{"start":{"line":4,"column":83,"index":177},"end":{"line":4,"column":98,"index":192}},"object":{"type":"Identifier","start":177,"end":181,"loc":{"start":{"line":4,"column":83,"index":177},"end":{"line":4,"column":87,"index":181},"identifierName":"BSON"},"name":"BSON"},"computed":false,"property":{"type":"Identifier","start":182,"end":192,"loc":{"start":{"line":4,"column":88,"index":182},"end":{"line":4,"column":98,"index":192},"identifierName":"Decimal128"},"name":"Decimal128"}},"arguments":[]}

      at visitRealmClassProperty (src/plugin/index.ts:329:17)
          at Array.map (<anonymous>)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new BSON.Decimal128();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "decimal128",
            optional: true,
            default: () => new BSON.Decimal128()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    FISK 11: {"type":"NewExpression","start":184,"end":205,"loc":{"start":{"line":4,"column":90,"index":184},"end":{"line":4,"column":111,"index":205}},"callee":{"type":"MemberExpression","start":188,"end":203,"loc":{"start":{"line":4,"column":94,"index":188},"end":{"line":4,"column":109,"index":203}},"object":{"type":"Identifier","start":188,"end":192,"loc":{"start":{"line":4,"column":94,"index":188},"end":{"line":4,"column":98,"index":192},"identifierName":"BSON"},"name":"BSON"},"computed":false,"property":{"type":"Identifier","start":193,"end":203,"loc":{"start":{"line":4,"column":99,"index":193},"end":{"line":4,"column":109,"index":203},"identifierName":"Decimal128"},"name":"Decimal128"}},"arguments":[]}

      at visitRealmClassProperty (src/plugin/index.ts:329:17)
          at Array.map (<anonymous>)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new BSON.Decimal128();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "decimal128",
            optional: true,
            default: () => new BSON.Decimal128()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    FISK 11: {"type":"NewExpression","start":184,"end":205,"loc":{"start":{"line":4,"column":90,"index":184},"end":{"line":4,"column":111,"index":205}},"callee":{"type":"MemberExpression","start":188,"end":203,"loc":{"start":{"line":4,"column":94,"index":188},"end":{"line":4,"column":109,"index":203}},"object":{"type":"Identifier","start":188,"end":192,"loc":{"start":{"line":4,"column":94,"index":188},"end":{"line":4,"column":98,"index":192},"identifierName":"BSON"},"name":"BSON"},"computed":false,"property":{"type":"Identifier","start":193,"end":203,"loc":{"start":{"line":4,"column":99,"index":193},"end":{"line":4,"column":109,"index":203},"identifierName":"Decimal128"},"name":"Decimal128"}},"arguments":[]}

      at visitRealmClassProperty (src/plugin/index.ts:329:17)
          at Array.map (<anonymous>)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new BSON.Decimal128();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "decimal128",
            optional: true,
            default: () => new BSON.Decimal128()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    FISK 11: {"type":"NewExpression","start":167,"end":188,"loc":{"start":{"line":4,"column":73,"index":167},"end":{"line":4,"column":94,"index":188}},"callee":{"type":"MemberExpression","start":171,"end":186,"loc":{"start":{"line":4,"column":77,"index":171},"end":{"line":4,"column":92,"index":186}},"object":{"type":"Identifier","start":171,"end":175,"loc":{"start":{"line":4,"column":77,"index":171},"end":{"line":4,"column":81,"index":175},"identifierName":"BSON"},"name":"BSON"},"computed":false,"property":{"type":"Identifier","start":176,"end":186,"loc":{"start":{"line":4,"column":82,"index":176},"end":{"line":4,"column":92,"index":186},"identifierName":"Decimal128"},"name":"Decimal128"}},"arguments":[]}

      at visitRealmClassProperty (src/plugin/index.ts:329:17)
          at Array.map (<anonymous>)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new BSON.Decimal128();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "decimal128",
            optional: true,
            default: () => new BSON.Decimal128()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    FISK 11: {"type":"NewExpression","start":178,"end":199,"loc":{"start":{"line":4,"column":84,"index":178},"end":{"line":4,"column":105,"index":199}},"callee":{"type":"MemberExpression","start":182,"end":197,"loc":{"start":{"line":4,"column":88,"index":182},"end":{"line":4,"column":103,"index":197}},"object":{"type":"Identifier","start":182,"end":186,"loc":{"start":{"line":4,"column":88,"index":182},"end":{"line":4,"column":92,"index":186},"identifierName":"BSON"},"name":"BSON"},"computed":false,"property":{"type":"Identifier","start":187,"end":197,"loc":{"start":{"line":4,"column":93,"index":187},"end":{"line":4,"column":103,"index":197},"identifierName":"Decimal128"},"name":"Decimal128"}},"arguments":[]}

      at visitRealmClassProperty (src/plugin/index.ts:329:17)
          at Array.map (<anonymous>)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new BSON.Decimal128();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "decimal128",
            optional: true,
            default: () => new BSON.Decimal128()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    FISK 11: {"type":"NewExpression","start":178,"end":199,"loc":{"start":{"line":4,"column":84,"index":178},"end":{"line":4,"column":105,"index":199}},"callee":{"type":"MemberExpression","start":182,"end":197,"loc":{"start":{"line":4,"column":88,"index":182},"end":{"line":4,"column":103,"index":197}},"object":{"type":"Identifier","start":182,"end":186,"loc":{"start":{"line":4,"column":88,"index":182},"end":{"line":4,"column":92,"index":186},"identifierName":"BSON"},"name":"BSON"},"computed":false,"property":{"type":"Identifier","start":187,"end":197,"loc":{"start":{"line":4,"column":93,"index":187},"end":{"line":4,"column":103,"index":197},"identifierName":"Decimal128"},"name":"Decimal128"}},"arguments":[]}

      at visitRealmClassProperty (src/plugin/index.ts:329:17)
          at Array.map (<anonymous>)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new BSON.Decimal128();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "decimal128",
            optional: true,
            default: () => new BSON.Decimal128()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    FISK 11: {"type":"NewExpression","start":172,"end":193,"loc":{"start":{"line":4,"column":78,"index":172},"end":{"line":4,"column":99,"index":193}},"callee":{"type":"MemberExpression","start":176,"end":191,"loc":{"start":{"line":4,"column":82,"index":176},"end":{"line":4,"column":97,"index":191}},"object":{"type":"Identifier","start":176,"end":180,"loc":{"start":{"line":4,"column":82,"index":176},"end":{"line":4,"column":86,"index":180},"identifierName":"BSON"},"name":"BSON"},"computed":false,"property":{"type":"Identifier","start":181,"end":191,"loc":{"start":{"line":4,"column":87,"index":181},"end":{"line":4,"column":97,"index":191},"identifierName":"Decimal128"},"name":"Decimal128"}},"arguments":[]}

      at visitRealmClassProperty (src/plugin/index.ts:329:17)
          at Array.map (<anonymous>)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new BSON.Decimal128();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "decimal128",
            optional: true,
            default: () => new BSON.Decimal128()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    FISK 11: {"type":"NewExpression","start":183,"end":204,"loc":{"start":{"line":4,"column":89,"index":183},"end":{"line":4,"column":110,"index":204}},"callee":{"type":"MemberExpression","start":187,"end":202,"loc":{"start":{"line":4,"column":93,"index":187},"end":{"line":4,"column":108,"index":202}},"object":{"type":"Identifier","start":187,"end":191,"loc":{"start":{"line":4,"column":93,"index":187},"end":{"line":4,"column":97,"index":191},"identifierName":"BSON"},"name":"BSON"},"computed":false,"property":{"type":"Identifier","start":192,"end":202,"loc":{"start":{"line":4,"column":98,"index":192},"end":{"line":4,"column":108,"index":202},"identifierName":"Decimal128"},"name":"Decimal128"}},"arguments":[]}

      at visitRealmClassProperty (src/plugin/index.ts:329:17)
          at Array.map (<anonymous>)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new BSON.Decimal128();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "decimal128",
            optional: true,
            default: () => new BSON.Decimal128()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    FISK 11: {"type":"NewExpression","start":183,"end":204,"loc":{"start":{"line":4,"column":89,"index":183},"end":{"line":4,"column":110,"index":204}},"callee":{"type":"MemberExpression","start":187,"end":202,"loc":{"start":{"line":4,"column":93,"index":187},"end":{"line":4,"column":108,"index":202}},"object":{"type":"Identifier","start":187,"end":191,"loc":{"start":{"line":4,"column":93,"index":187},"end":{"line":4,"column":97,"index":191},"identifierName":"BSON"},"name":"BSON"},"computed":false,"property":{"type":"Identifier","start":192,"end":202,"loc":{"start":{"line":4,"column":98,"index":192},"end":{"line":4,"column":108,"index":202},"identifierName":"Decimal128"},"name":"Decimal128"}},"arguments":[]}

      at visitRealmClassProperty (src/plugin/index.ts:329:17)
          at Array.map (<anonymous>)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new BSON.Decimal128();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "decimal128",
            optional: true,
            default: () => new BSON.Decimal128()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    FISK 11: {"type":"NewExpression","start":166,"end":187,"loc":{"start":{"line":4,"column":72,"index":166},"end":{"line":4,"column":93,"index":187}},"callee":{"type":"MemberExpression","start":170,"end":185,"loc":{"start":{"line":4,"column":76,"index":170},"end":{"line":4,"column":91,"index":185}},"object":{"type":"Identifier","start":170,"end":174,"loc":{"start":{"line":4,"column":76,"index":170},"end":{"line":4,"column":80,"index":174},"identifierName":"BSON"},"name":"BSON"},"computed":false,"property":{"type":"Identifier","start":175,"end":185,"loc":{"start":{"line":4,"column":81,"index":175},"end":{"line":4,"column":91,"index":185},"identifierName":"Decimal128"},"name":"Decimal128"}},"arguments":[]}

      at visitRealmClassProperty (src/plugin/index.ts:329:17)
          at Array.map (<anonymous>)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new BSON.Decimal128();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "decimal128",
            optional: true,
            default: () => new BSON.Decimal128()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    FISK 11: {"type":"NewExpression","start":177,"end":198,"loc":{"start":{"line":4,"column":83,"index":177},"end":{"line":4,"column":104,"index":198}},"callee":{"type":"MemberExpression","start":181,"end":196,"loc":{"start":{"line":4,"column":87,"index":181},"end":{"line":4,"column":102,"index":196}},"object":{"type":"Identifier","start":181,"end":185,"loc":{"start":{"line":4,"column":87,"index":181},"end":{"line":4,"column":91,"index":185},"identifierName":"BSON"},"name":"BSON"},"computed":false,"property":{"type":"Identifier","start":186,"end":196,"loc":{"start":{"line":4,"column":92,"index":186},"end":{"line":4,"column":102,"index":196},"identifierName":"Decimal128"},"name":"Decimal128"}},"arguments":[]}

      at visitRealmClassProperty (src/plugin/index.ts:329:17)
          at Array.map (<anonymous>)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new BSON.Decimal128();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "decimal128",
            optional: true,
            default: () => new BSON.Decimal128()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    FISK 11: {"type":"NewExpression","start":177,"end":198,"loc":{"start":{"line":4,"column":83,"index":177},"end":{"line":4,"column":104,"index":198}},"callee":{"type":"MemberExpression","start":181,"end":196,"loc":{"start":{"line":4,"column":87,"index":181},"end":{"line":4,"column":102,"index":196}},"object":{"type":"Identifier","start":181,"end":185,"loc":{"start":{"line":4,"column":87,"index":181},"end":{"line":4,"column":91,"index":185},"identifierName":"BSON"},"name":"BSON"},"computed":false,"property":{"type":"Identifier","start":186,"end":196,"loc":{"start":{"line":4,"column":92,"index":186},"end":{"line":4,"column":102,"index":196},"identifierName":"Decimal128"},"name":"Decimal128"}},"arguments":[]}

      at visitRealmClassProperty (src/plugin/index.ts:329:17)
          at Array.map (<anonymous>)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new BSON.Decimal128();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "decimal128",
            optional: true,
            default: () => new BSON.Decimal128()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    FISK 11: {"type":"NewExpression","start":149,"end":170,"loc":{"start":{"line":4,"column":55,"index":149},"end":{"line":4,"column":76,"index":170}},"callee":{"type":"MemberExpression","start":153,"end":168,"loc":{"start":{"line":4,"column":59,"index":153},"end":{"line":4,"column":74,"index":168}},"object":{"type":"Identifier","start":153,"end":157,"loc":{"start":{"line":4,"column":59,"index":153},"end":{"line":4,"column":63,"index":157},"identifierName":"BSON"},"name":"BSON"},"computed":false,"property":{"type":"Identifier","start":158,"end":168,"loc":{"start":{"line":4,"column":64,"index":158},"end":{"line":4,"column":74,"index":168},"identifierName":"Decimal128"},"name":"Decimal128"}},"arguments":[]}

      at visitRealmClassProperty (src/plugin/index.ts:329:17)
          at Array.map (<anonymous>)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new BSON.Decimal128();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "decimal128",
            optional: true,
            default: () => new BSON.Decimal128()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "objectId"
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "objectId"
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "objectId"
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "objectId"
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "objectId",
            optional: true
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "objectId",
            optional: true
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "objectId",
            optional: true
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "objectId",
            optional: true
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "objectId",
            optional: true
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "objectId",
            optional: true
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "objectId",
            optional: true
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "objectId",
            optional: true
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "objectId",
            optional: true
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "objectId",
            optional: true
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "objectId",
            optional: true
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "objectId",
            optional: true
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    FISK 11: {"type":"NewExpression","start":170,"end":196,"loc":{"start":{"line":4,"column":76,"index":170},"end":{"line":4,"column":102,"index":196}},"callee":{"type":"MemberExpression","start":174,"end":194,"loc":{"start":{"line":4,"column":80,"index":174},"end":{"line":4,"column":100,"index":194}},"object":{"type":"MemberExpression","start":174,"end":185,"loc":{"start":{"line":4,"column":80,"index":174},"end":{"line":4,"column":91,"index":185}},"object":{"type":"Identifier","start":174,"end":179,"loc":{"start":{"line":4,"column":80,"index":174},"end":{"line":4,"column":85,"index":179},"identifierName":"Realm"},"name":"Realm"},"computed":false,"property":{"type":"Identifier","start":180,"end":185,"loc":{"start":{"line":4,"column":86,"index":180},"end":{"line":4,"column":91,"index":185},"identifierName":"Types"},"name":"Types"}},"computed":false,"property":{"type":"Identifier","start":186,"end":194,"loc":{"start":{"line":4,"column":92,"index":186},"end":{"line":4,"column":100,"index":194},"identifierName":"ObjectId"},"name":"ObjectId"}},"arguments":[]}

      at visitRealmClassProperty (src/plugin/index.ts:329:17)
          at Array.map (<anonymous>)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new Realm.Types.ObjectId();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "objectId",
            default: () => new Realm.Types.ObjectId()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    FISK 11: {"type":"NewExpression","start":164,"end":190,"loc":{"start":{"line":4,"column":70,"index":164},"end":{"line":4,"column":96,"index":190}},"callee":{"type":"MemberExpression","start":168,"end":188,"loc":{"start":{"line":4,"column":74,"index":168},"end":{"line":4,"column":94,"index":188}},"object":{"type":"MemberExpression","start":168,"end":179,"loc":{"start":{"line":4,"column":74,"index":168},"end":{"line":4,"column":85,"index":179}},"object":{"type":"Identifier","start":168,"end":173,"loc":{"start":{"line":4,"column":74,"index":168},"end":{"line":4,"column":79,"index":173},"identifierName":"Realm"},"name":"Realm"},"computed":false,"property":{"type":"Identifier","start":174,"end":179,"loc":{"start":{"line":4,"column":80,"index":174},"end":{"line":4,"column":85,"index":179},"identifierName":"Types"},"name":"Types"}},"computed":false,"property":{"type":"Identifier","start":180,"end":188,"loc":{"start":{"line":4,"column":86,"index":180},"end":{"line":4,"column":94,"index":188},"identifierName":"ObjectId"},"name":"ObjectId"}},"arguments":[]}

      at visitRealmClassProperty (src/plugin/index.ts:329:17)
          at Array.map (<anonymous>)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new Realm.Types.ObjectId();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "objectId",
            default: () => new Realm.Types.ObjectId()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    FISK 11: {"type":"NewExpression","start":169,"end":195,"loc":{"start":{"line":4,"column":75,"index":169},"end":{"line":4,"column":101,"index":195}},"callee":{"type":"MemberExpression","start":173,"end":193,"loc":{"start":{"line":4,"column":79,"index":173},"end":{"line":4,"column":99,"index":193}},"object":{"type":"MemberExpression","start":173,"end":184,"loc":{"start":{"line":4,"column":79,"index":173},"end":{"line":4,"column":90,"index":184}},"object":{"type":"Identifier","start":173,"end":178,"loc":{"start":{"line":4,"column":79,"index":173},"end":{"line":4,"column":84,"index":178},"identifierName":"Realm"},"name":"Realm"},"computed":false,"property":{"type":"Identifier","start":179,"end":184,"loc":{"start":{"line":4,"column":85,"index":179},"end":{"line":4,"column":90,"index":184},"identifierName":"Types"},"name":"Types"}},"computed":false,"property":{"type":"Identifier","start":185,"end":193,"loc":{"start":{"line":4,"column":91,"index":185},"end":{"line":4,"column":99,"index":193},"identifierName":"ObjectId"},"name":"ObjectId"}},"arguments":[]}

      at visitRealmClassProperty (src/plugin/index.ts:329:17)
          at Array.map (<anonymous>)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new Realm.Types.ObjectId();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "objectId",
            default: () => new Realm.Types.ObjectId()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    FISK 11: {"type":"NewExpression","start":163,"end":189,"loc":{"start":{"line":4,"column":69,"index":163},"end":{"line":4,"column":95,"index":189}},"callee":{"type":"MemberExpression","start":167,"end":187,"loc":{"start":{"line":4,"column":73,"index":167},"end":{"line":4,"column":93,"index":187}},"object":{"type":"MemberExpression","start":167,"end":178,"loc":{"start":{"line":4,"column":73,"index":167},"end":{"line":4,"column":84,"index":178}},"object":{"type":"Identifier","start":167,"end":172,"loc":{"start":{"line":4,"column":73,"index":167},"end":{"line":4,"column":78,"index":172},"identifierName":"Realm"},"name":"Realm"},"computed":false,"property":{"type":"Identifier","start":173,"end":178,"loc":{"start":{"line":4,"column":79,"index":173},"end":{"line":4,"column":84,"index":178},"identifierName":"Types"},"name":"Types"}},"computed":false,"property":{"type":"Identifier","start":179,"end":187,"loc":{"start":{"line":4,"column":85,"index":179},"end":{"line":4,"column":93,"index":187},"identifierName":"ObjectId"},"name":"ObjectId"}},"arguments":[]}

      at visitRealmClassProperty (src/plugin/index.ts:329:17)
          at Array.map (<anonymous>)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new Realm.Types.ObjectId();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "objectId",
            default: () => new Realm.Types.ObjectId()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    FISK 11: {"type":"NewExpression","start":148,"end":174,"loc":{"start":{"line":4,"column":54,"index":148},"end":{"line":4,"column":80,"index":174}},"callee":{"type":"MemberExpression","start":152,"end":172,"loc":{"start":{"line":4,"column":58,"index":152},"end":{"line":4,"column":78,"index":172}},"object":{"type":"MemberExpression","start":152,"end":163,"loc":{"start":{"line":4,"column":58,"index":152},"end":{"line":4,"column":69,"index":163}},"object":{"type":"Identifier","start":152,"end":157,"loc":{"start":{"line":4,"column":58,"index":152},"end":{"line":4,"column":63,"index":157},"identifierName":"Realm"},"name":"Realm"},"computed":false,"property":{"type":"Identifier","start":158,"end":163,"loc":{"start":{"line":4,"column":64,"index":158},"end":{"line":4,"column":69,"index":163},"identifierName":"Types"},"name":"Types"}},"computed":false,"property":{"type":"Identifier","start":164,"end":172,"loc":{"start":{"line":4,"column":70,"index":164},"end":{"line":4,"column":78,"index":172},"identifierName":"ObjectId"},"name":"ObjectId"}},"arguments":[]}

      at visitRealmClassProperty (src/plugin/index.ts:329:17)
          at Array.map (<anonymous>)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new Realm.Types.ObjectId();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "objectId",
            default: () => new Realm.Types.ObjectId()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    FISK 11: {"type":"NewExpression","start":171,"end":197,"loc":{"start":{"line":4,"column":77,"index":171},"end":{"line":4,"column":103,"index":197}},"callee":{"type":"MemberExpression","start":175,"end":195,"loc":{"start":{"line":4,"column":81,"index":175},"end":{"line":4,"column":101,"index":195}},"object":{"type":"MemberExpression","start":175,"end":186,"loc":{"start":{"line":4,"column":81,"index":175},"end":{"line":4,"column":92,"index":186}},"object":{"type":"Identifier","start":175,"end":180,"loc":{"start":{"line":4,"column":81,"index":175},"end":{"line":4,"column":86,"index":180},"identifierName":"Realm"},"name":"Realm"},"computed":false,"property":{"type":"Identifier","start":181,"end":186,"loc":{"start":{"line":4,"column":87,"index":181},"end":{"line":4,"column":92,"index":186},"identifierName":"Types"},"name":"Types"}},"computed":false,"property":{"type":"Identifier","start":187,"end":195,"loc":{"start":{"line":4,"column":93,"index":187},"end":{"line":4,"column":101,"index":195},"identifierName":"ObjectId"},"name":"ObjectId"}},"arguments":[]}

      at visitRealmClassProperty (src/plugin/index.ts:329:17)
          at Array.map (<anonymous>)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new Realm.Types.ObjectId();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "objectId",
            optional: true,
            default: () => new Realm.Types.ObjectId()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    FISK 11: {"type":"NewExpression","start":182,"end":208,"loc":{"start":{"line":4,"column":88,"index":182},"end":{"line":4,"column":114,"index":208}},"callee":{"type":"MemberExpression","start":186,"end":206,"loc":{"start":{"line":4,"column":92,"index":186},"end":{"line":4,"column":112,"index":206}},"object":{"type":"MemberExpression","start":186,"end":197,"loc":{"start":{"line":4,"column":92,"index":186},"end":{"line":4,"column":103,"index":197}},"object":{"type":"Identifier","start":186,"end":191,"loc":{"start":{"line":4,"column":92,"index":186},"end":{"line":4,"column":97,"index":191},"identifierName":"Realm"},"name":"Realm"},"computed":false,"property":{"type":"Identifier","start":192,"end":197,"loc":{"start":{"line":4,"column":98,"index":192},"end":{"line":4,"column":103,"index":197},"identifierName":"Types"},"name":"Types"}},"computed":false,"property":{"type":"Identifier","start":198,"end":206,"loc":{"start":{"line":4,"column":104,"index":198},"end":{"line":4,"column":112,"index":206},"identifierName":"ObjectId"},"name":"ObjectId"}},"arguments":[]}

      at visitRealmClassProperty (src/plugin/index.ts:329:17)
          at Array.map (<anonymous>)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new Realm.Types.ObjectId();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "objectId",
            optional: true,
            default: () => new Realm.Types.ObjectId()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    FISK 11: {"type":"NewExpression","start":182,"end":208,"loc":{"start":{"line":4,"column":88,"index":182},"end":{"line":4,"column":114,"index":208}},"callee":{"type":"MemberExpression","start":186,"end":206,"loc":{"start":{"line":4,"column":92,"index":186},"end":{"line":4,"column":112,"index":206}},"object":{"type":"MemberExpression","start":186,"end":197,"loc":{"start":{"line":4,"column":92,"index":186},"end":{"line":4,"column":103,"index":197}},"object":{"type":"Identifier","start":186,"end":191,"loc":{"start":{"line":4,"column":92,"index":186},"end":{"line":4,"column":97,"index":191},"identifierName":"Realm"},"name":"Realm"},"computed":false,"property":{"type":"Identifier","start":192,"end":197,"loc":{"start":{"line":4,"column":98,"index":192},"end":{"line":4,"column":103,"index":197},"identifierName":"Types"},"name":"Types"}},"computed":false,"property":{"type":"Identifier","start":198,"end":206,"loc":{"start":{"line":4,"column":104,"index":198},"end":{"line":4,"column":112,"index":206},"identifierName":"ObjectId"},"name":"ObjectId"}},"arguments":[]}

      at visitRealmClassProperty (src/plugin/index.ts:329:17)
          at Array.map (<anonymous>)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new Realm.Types.ObjectId();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "objectId",
            optional: true,
            default: () => new Realm.Types.ObjectId()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    FISK 11: {"type":"NewExpression","start":165,"end":191,"loc":{"start":{"line":4,"column":71,"index":165},"end":{"line":4,"column":97,"index":191}},"callee":{"type":"MemberExpression","start":169,"end":189,"loc":{"start":{"line":4,"column":75,"index":169},"end":{"line":4,"column":95,"index":189}},"object":{"type":"MemberExpression","start":169,"end":180,"loc":{"start":{"line":4,"column":75,"index":169},"end":{"line":4,"column":86,"index":180}},"object":{"type":"Identifier","start":169,"end":174,"loc":{"start":{"line":4,"column":75,"index":169},"end":{"line":4,"column":80,"index":174},"identifierName":"Realm"},"name":"Realm"},"computed":false,"property":{"type":"Identifier","start":175,"end":180,"loc":{"start":{"line":4,"column":81,"index":175},"end":{"line":4,"column":86,"index":180},"identifierName":"Types"},"name":"Types"}},"computed":false,"property":{"type":"Identifier","start":181,"end":189,"loc":{"start":{"line":4,"column":87,"index":181},"end":{"line":4,"column":95,"index":189},"identifierName":"ObjectId"},"name":"ObjectId"}},"arguments":[]}

      at visitRealmClassProperty (src/plugin/index.ts:329:17)
          at Array.map (<anonymous>)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new Realm.Types.ObjectId();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "objectId",
            optional: true,
            default: () => new Realm.Types.ObjectId()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    FISK 11: {"type":"NewExpression","start":176,"end":202,"loc":{"start":{"line":4,"column":82,"index":176},"end":{"line":4,"column":108,"index":202}},"callee":{"type":"MemberExpression","start":180,"end":200,"loc":{"start":{"line":4,"column":86,"index":180},"end":{"line":4,"column":106,"index":200}},"object":{"type":"MemberExpression","start":180,"end":191,"loc":{"start":{"line":4,"column":86,"index":180},"end":{"line":4,"column":97,"index":191}},"object":{"type":"Identifier","start":180,"end":185,"loc":{"start":{"line":4,"column":86,"index":180},"end":{"line":4,"column":91,"index":185},"identifierName":"Realm"},"name":"Realm"},"computed":false,"property":{"type":"Identifier","start":186,"end":191,"loc":{"start":{"line":4,"column":92,"index":186},"end":{"line":4,"column":97,"index":191},"identifierName":"Types"},"name":"Types"}},"computed":false,"property":{"type":"Identifier","start":192,"end":200,"loc":{"start":{"line":4,"column":98,"index":192},"end":{"line":4,"column":106,"index":200},"identifierName":"ObjectId"},"name":"ObjectId"}},"arguments":[]}

      at visitRealmClassProperty (src/plugin/index.ts:329:17)
          at Array.map (<anonymous>)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new Realm.Types.ObjectId();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "objectId",
            optional: true,
            default: () => new Realm.Types.ObjectId()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    FISK 11: {"type":"NewExpression","start":176,"end":202,"loc":{"start":{"line":4,"column":82,"index":176},"end":{"line":4,"column":108,"index":202}},"callee":{"type":"MemberExpression","start":180,"end":200,"loc":{"start":{"line":4,"column":86,"index":180},"end":{"line":4,"column":106,"index":200}},"object":{"type":"MemberExpression","start":180,"end":191,"loc":{"start":{"line":4,"column":86,"index":180},"end":{"line":4,"column":97,"index":191}},"object":{"type":"Identifier","start":180,"end":185,"loc":{"start":{"line":4,"column":86,"index":180},"end":{"line":4,"column":91,"index":185},"identifierName":"Realm"},"name":"Realm"},"computed":false,"property":{"type":"Identifier","start":186,"end":191,"loc":{"start":{"line":4,"column":92,"index":186},"end":{"line":4,"column":97,"index":191},"identifierName":"Types"},"name":"Types"}},"computed":false,"property":{"type":"Identifier","start":192,"end":200,"loc":{"start":{"line":4,"column":98,"index":192},"end":{"line":4,"column":106,"index":200},"identifierName":"ObjectId"},"name":"ObjectId"}},"arguments":[]}

      at visitRealmClassProperty (src/plugin/index.ts:329:17)
          at Array.map (<anonymous>)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new Realm.Types.ObjectId();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "objectId",
            optional: true,
            default: () => new Realm.Types.ObjectId()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    FISK 11: {"type":"NewExpression","start":170,"end":196,"loc":{"start":{"line":4,"column":76,"index":170},"end":{"line":4,"column":102,"index":196}},"callee":{"type":"MemberExpression","start":174,"end":194,"loc":{"start":{"line":4,"column":80,"index":174},"end":{"line":4,"column":100,"index":194}},"object":{"type":"MemberExpression","start":174,"end":185,"loc":{"start":{"line":4,"column":80,"index":174},"end":{"line":4,"column":91,"index":185}},"object":{"type":"Identifier","start":174,"end":179,"loc":{"start":{"line":4,"column":80,"index":174},"end":{"line":4,"column":85,"index":179},"identifierName":"Realm"},"name":"Realm"},"computed":false,"property":{"type":"Identifier","start":180,"end":185,"loc":{"start":{"line":4,"column":86,"index":180},"end":{"line":4,"column":91,"index":185},"identifierName":"Types"},"name":"Types"}},"computed":false,"property":{"type":"Identifier","start":186,"end":194,"loc":{"start":{"line":4,"column":92,"index":186},"end":{"line":4,"column":100,"index":194},"identifierName":"ObjectId"},"name":"ObjectId"}},"arguments":[]}

      at visitRealmClassProperty (src/plugin/index.ts:329:17)
          at Array.map (<anonymous>)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new Realm.Types.ObjectId();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "objectId",
            optional: true,
            default: () => new Realm.Types.ObjectId()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    FISK 11: {"type":"NewExpression","start":181,"end":207,"loc":{"start":{"line":4,"column":87,"index":181},"end":{"line":4,"column":113,"index":207}},"callee":{"type":"MemberExpression","start":185,"end":205,"loc":{"start":{"line":4,"column":91,"index":185},"end":{"line":4,"column":111,"index":205}},"object":{"type":"MemberExpression","start":185,"end":196,"loc":{"start":{"line":4,"column":91,"index":185},"end":{"line":4,"column":102,"index":196}},"object":{"type":"Identifier","start":185,"end":190,"loc":{"start":{"line":4,"column":91,"index":185},"end":{"line":4,"column":96,"index":190},"identifierName":"Realm"},"name":"Realm"},"computed":false,"property":{"type":"Identifier","start":191,"end":196,"loc":{"start":{"line":4,"column":97,"index":191},"end":{"line":4,"column":102,"index":196},"identifierName":"Types"},"name":"Types"}},"computed":false,"property":{"type":"Identifier","start":197,"end":205,"loc":{"start":{"line":4,"column":103,"index":197},"end":{"line":4,"column":111,"index":205},"identifierName":"ObjectId"},"name":"ObjectId"}},"arguments":[]}

      at visitRealmClassProperty (src/plugin/index.ts:329:17)
          at Array.map (<anonymous>)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new Realm.Types.ObjectId();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "objectId",
            optional: true,
            default: () => new Realm.Types.ObjectId()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    FISK 11: {"type":"NewExpression","start":181,"end":207,"loc":{"start":{"line":4,"column":87,"index":181},"end":{"line":4,"column":113,"index":207}},"callee":{"type":"MemberExpression","start":185,"end":205,"loc":{"start":{"line":4,"column":91,"index":185},"end":{"line":4,"column":111,"index":205}},"object":{"type":"MemberExpression","start":185,"end":196,"loc":{"start":{"line":4,"column":91,"index":185},"end":{"line":4,"column":102,"index":196}},"object":{"type":"Identifier","start":185,"end":190,"loc":{"start":{"line":4,"column":91,"index":185},"end":{"line":4,"column":96,"index":190},"identifierName":"Realm"},"name":"Realm"},"computed":false,"property":{"type":"Identifier","start":191,"end":196,"loc":{"start":{"line":4,"column":97,"index":191},"end":{"line":4,"column":102,"index":196},"identifierName":"Types"},"name":"Types"}},"computed":false,"property":{"type":"Identifier","start":197,"end":205,"loc":{"start":{"line":4,"column":103,"index":197},"end":{"line":4,"column":111,"index":205},"identifierName":"ObjectId"},"name":"ObjectId"}},"arguments":[]}

      at visitRealmClassProperty (src/plugin/index.ts:329:17)
          at Array.map (<anonymous>)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new Realm.Types.ObjectId();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "objectId",
            optional: true,
            default: () => new Realm.Types.ObjectId()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    FISK 11: {"type":"NewExpression","start":164,"end":190,"loc":{"start":{"line":4,"column":70,"index":164},"end":{"line":4,"column":96,"index":190}},"callee":{"type":"MemberExpression","start":168,"end":188,"loc":{"start":{"line":4,"column":74,"index":168},"end":{"line":4,"column":94,"index":188}},"object":{"type":"MemberExpression","start":168,"end":179,"loc":{"start":{"line":4,"column":74,"index":168},"end":{"line":4,"column":85,"index":179}},"object":{"type":"Identifier","start":168,"end":173,"loc":{"start":{"line":4,"column":74,"index":168},"end":{"line":4,"column":79,"index":173},"identifierName":"Realm"},"name":"Realm"},"computed":false,"property":{"type":"Identifier","start":174,"end":179,"loc":{"start":{"line":4,"column":80,"index":174},"end":{"line":4,"column":85,"index":179},"identifierName":"Types"},"name":"Types"}},"computed":false,"property":{"type":"Identifier","start":180,"end":188,"loc":{"start":{"line":4,"column":86,"index":180},"end":{"line":4,"column":94,"index":188},"identifierName":"ObjectId"},"name":"ObjectId"}},"arguments":[]}

      at visitRealmClassProperty (src/plugin/index.ts:329:17)
          at Array.map (<anonymous>)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new Realm.Types.ObjectId();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "objectId",
            optional: true,
            default: () => new Realm.Types.ObjectId()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    FISK 11: {"type":"NewExpression","start":175,"end":201,"loc":{"start":{"line":4,"column":81,"index":175},"end":{"line":4,"column":107,"index":201}},"callee":{"type":"MemberExpression","start":179,"end":199,"loc":{"start":{"line":4,"column":85,"index":179},"end":{"line":4,"column":105,"index":199}},"object":{"type":"MemberExpression","start":179,"end":190,"loc":{"start":{"line":4,"column":85,"index":179},"end":{"line":4,"column":96,"index":190}},"object":{"type":"Identifier","start":179,"end":184,"loc":{"start":{"line":4,"column":85,"index":179},"end":{"line":4,"column":90,"index":184},"identifierName":"Realm"},"name":"Realm"},"computed":false,"property":{"type":"Identifier","start":185,"end":190,"loc":{"start":{"line":4,"column":91,"index":185},"end":{"line":4,"column":96,"index":190},"identifierName":"Types"},"name":"Types"}},"computed":false,"property":{"type":"Identifier","start":191,"end":199,"loc":{"start":{"line":4,"column":97,"index":191},"end":{"line":4,"column":105,"index":199},"identifierName":"ObjectId"},"name":"ObjectId"}},"arguments":[]}

      at visitRealmClassProperty (src/plugin/index.ts:329:17)
          at Array.map (<anonymous>)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new Realm.Types.ObjectId();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "objectId",
            optional: true,
            default: () => new Realm.Types.ObjectId()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    FISK 11: {"type":"NewExpression","start":175,"end":201,"loc":{"start":{"line":4,"column":81,"index":175},"end":{"line":4,"column":107,"index":201}},"callee":{"type":"MemberExpression","start":179,"end":199,"loc":{"start":{"line":4,"column":85,"index":179},"end":{"line":4,"column":105,"index":199}},"object":{"type":"MemberExpression","start":179,"end":190,"loc":{"start":{"line":4,"column":85,"index":179},"end":{"line":4,"column":96,"index":190}},"object":{"type":"Identifier","start":179,"end":184,"loc":{"start":{"line":4,"column":85,"index":179},"end":{"line":4,"column":90,"index":184},"identifierName":"Realm"},"name":"Realm"},"computed":false,"property":{"type":"Identifier","start":185,"end":190,"loc":{"start":{"line":4,"column":91,"index":185},"end":{"line":4,"column":96,"index":190},"identifierName":"Types"},"name":"Types"}},"computed":false,"property":{"type":"Identifier","start":191,"end":199,"loc":{"start":{"line":4,"column":97,"index":191},"end":{"line":4,"column":105,"index":199},"identifierName":"ObjectId"},"name":"ObjectId"}},"arguments":[]}

      at visitRealmClassProperty (src/plugin/index.ts:329:17)
          at Array.map (<anonymous>)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new Realm.Types.ObjectId();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "objectId",
            optional: true,
            default: () => new Realm.Types.ObjectId()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    FISK 11: {"type":"NewExpression","start":149,"end":175,"loc":{"start":{"line":4,"column":55,"index":149},"end":{"line":4,"column":81,"index":175}},"callee":{"type":"MemberExpression","start":153,"end":173,"loc":{"start":{"line":4,"column":59,"index":153},"end":{"line":4,"column":79,"index":173}},"object":{"type":"MemberExpression","start":153,"end":164,"loc":{"start":{"line":4,"column":59,"index":153},"end":{"line":4,"column":70,"index":164}},"object":{"type":"Identifier","start":153,"end":158,"loc":{"start":{"line":4,"column":59,"index":153},"end":{"line":4,"column":64,"index":158},"identifierName":"Realm"},"name":"Realm"},"computed":false,"property":{"type":"Identifier","start":159,"end":164,"loc":{"start":{"line":4,"column":65,"index":159},"end":{"line":4,"column":70,"index":164},"identifierName":"Types"},"name":"Types"}},"computed":false,"property":{"type":"Identifier","start":165,"end":173,"loc":{"start":{"line":4,"column":71,"index":165},"end":{"line":4,"column":79,"index":173},"identifierName":"ObjectId"},"name":"ObjectId"}},"arguments":[]}

      at visitRealmClassProperty (src/plugin/index.ts:329:17)
          at Array.map (<anonymous>)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new Realm.Types.ObjectId();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "objectId",
            optional: true,
            default: () => new Realm.Types.ObjectId()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    FISK 11: {"type":"NewExpression","start":170,"end":190,"loc":{"start":{"line":4,"column":76,"index":170},"end":{"line":4,"column":96,"index":190}},"callee":{"type":"MemberExpression","start":174,"end":188,"loc":{"start":{"line":4,"column":80,"index":174},"end":{"line":4,"column":94,"index":188}},"object":{"type":"Identifier","start":174,"end":179,"loc":{"start":{"line":4,"column":80,"index":174},"end":{"line":4,"column":85,"index":179},"identifierName":"Types"},"name":"Types"},"computed":false,"property":{"type":"Identifier","start":180,"end":188,"loc":{"start":{"line":4,"column":86,"index":180},"end":{"line":4,"column":94,"index":188},"identifierName":"ObjectId"},"name":"ObjectId"}},"arguments":[]}

      at visitRealmClassProperty (src/plugin/index.ts:329:17)
          at Array.map (<anonymous>)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new Types.ObjectId();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "objectId",
            default: () => new Types.ObjectId()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    FISK 11: {"type":"NewExpression","start":164,"end":184,"loc":{"start":{"line":4,"column":70,"index":164},"end":{"line":4,"column":90,"index":184}},"callee":{"type":"MemberExpression","start":168,"end":182,"loc":{"start":{"line":4,"column":74,"index":168},"end":{"line":4,"column":88,"index":182}},"object":{"type":"Identifier","start":168,"end":173,"loc":{"start":{"line":4,"column":74,"index":168},"end":{"line":4,"column":79,"index":173},"identifierName":"Types"},"name":"Types"},"computed":false,"property":{"type":"Identifier","start":174,"end":182,"loc":{"start":{"line":4,"column":80,"index":174},"end":{"line":4,"column":88,"index":182},"identifierName":"ObjectId"},"name":"ObjectId"}},"arguments":[]}

      at visitRealmClassProperty (src/plugin/index.ts:329:17)
          at Array.map (<anonymous>)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new Types.ObjectId();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "objectId",
            default: () => new Types.ObjectId()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    FISK 11: {"type":"NewExpression","start":169,"end":189,"loc":{"start":{"line":4,"column":75,"index":169},"end":{"line":4,"column":95,"index":189}},"callee":{"type":"MemberExpression","start":173,"end":187,"loc":{"start":{"line":4,"column":79,"index":173},"end":{"line":4,"column":93,"index":187}},"object":{"type":"Identifier","start":173,"end":178,"loc":{"start":{"line":4,"column":79,"index":173},"end":{"line":4,"column":84,"index":178},"identifierName":"Types"},"name":"Types"},"computed":false,"property":{"type":"Identifier","start":179,"end":187,"loc":{"start":{"line":4,"column":85,"index":179},"end":{"line":4,"column":93,"index":187},"identifierName":"ObjectId"},"name":"ObjectId"}},"arguments":[]}

      at visitRealmClassProperty (src/plugin/index.ts:329:17)
          at Array.map (<anonymous>)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new Types.ObjectId();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "objectId",
            default: () => new Types.ObjectId()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    FISK 11: {"type":"NewExpression","start":163,"end":183,"loc":{"start":{"line":4,"column":69,"index":163},"end":{"line":4,"column":89,"index":183}},"callee":{"type":"MemberExpression","start":167,"end":181,"loc":{"start":{"line":4,"column":73,"index":167},"end":{"line":4,"column":87,"index":181}},"object":{"type":"Identifier","start":167,"end":172,"loc":{"start":{"line":4,"column":73,"index":167},"end":{"line":4,"column":78,"index":172},"identifierName":"Types"},"name":"Types"},"computed":false,"property":{"type":"Identifier","start":173,"end":181,"loc":{"start":{"line":4,"column":79,"index":173},"end":{"line":4,"column":87,"index":181},"identifierName":"ObjectId"},"name":"ObjectId"}},"arguments":[]}

      at visitRealmClassProperty (src/plugin/index.ts:329:17)
          at Array.map (<anonymous>)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new Types.ObjectId();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "objectId",
            default: () => new Types.ObjectId()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    FISK 11: {"type":"NewExpression","start":148,"end":168,"loc":{"start":{"line":4,"column":54,"index":148},"end":{"line":4,"column":74,"index":168}},"callee":{"type":"MemberExpression","start":152,"end":166,"loc":{"start":{"line":4,"column":58,"index":152},"end":{"line":4,"column":72,"index":166}},"object":{"type":"Identifier","start":152,"end":157,"loc":{"start":{"line":4,"column":58,"index":152},"end":{"line":4,"column":63,"index":157},"identifierName":"Types"},"name":"Types"},"computed":false,"property":{"type":"Identifier","start":158,"end":166,"loc":{"start":{"line":4,"column":64,"index":158},"end":{"line":4,"column":72,"index":166},"identifierName":"ObjectId"},"name":"ObjectId"}},"arguments":[]}

      at visitRealmClassProperty (src/plugin/index.ts:329:17)
          at Array.map (<anonymous>)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new Types.ObjectId();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "objectId",
            default: () => new Types.ObjectId()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    FISK 11: {"type":"NewExpression","start":171,"end":191,"loc":{"start":{"line":4,"column":77,"index":171},"end":{"line":4,"column":97,"index":191}},"callee":{"type":"MemberExpression","start":175,"end":189,"loc":{"start":{"line":4,"column":81,"index":175},"end":{"line":4,"column":95,"index":189}},"object":{"type":"Identifier","start":175,"end":180,"loc":{"start":{"line":4,"column":81,"index":175},"end":{"line":4,"column":86,"index":180},"identifierName":"Types"},"name":"Types"},"computed":false,"property":{"type":"Identifier","start":181,"end":189,"loc":{"start":{"line":4,"column":87,"index":181},"end":{"line":4,"column":95,"index":189},"identifierName":"ObjectId"},"name":"ObjectId"}},"arguments":[]}

      at visitRealmClassProperty (src/plugin/index.ts:329:17)
          at Array.map (<anonymous>)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new Types.ObjectId();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "objectId",
            optional: true,
            default: () => new Types.ObjectId()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    FISK 11: {"type":"NewExpression","start":182,"end":202,"loc":{"start":{"line":4,"column":88,"index":182},"end":{"line":4,"column":108,"index":202}},"callee":{"type":"MemberExpression","start":186,"end":200,"loc":{"start":{"line":4,"column":92,"index":186},"end":{"line":4,"column":106,"index":200}},"object":{"type":"Identifier","start":186,"end":191,"loc":{"start":{"line":4,"column":92,"index":186},"end":{"line":4,"column":97,"index":191},"identifierName":"Types"},"name":"Types"},"computed":false,"property":{"type":"Identifier","start":192,"end":200,"loc":{"start":{"line":4,"column":98,"index":192},"end":{"line":4,"column":106,"index":200},"identifierName":"ObjectId"},"name":"ObjectId"}},"arguments":[]}

      at visitRealmClassProperty (src/plugin/index.ts:329:17)
          at Array.map (<anonymous>)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new Types.ObjectId();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "objectId",
            optional: true,
            default: () => new Types.ObjectId()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    FISK 11: {"type":"NewExpression","start":182,"end":202,"loc":{"start":{"line":4,"column":88,"index":182},"end":{"line":4,"column":108,"index":202}},"callee":{"type":"MemberExpression","start":186,"end":200,"loc":{"start":{"line":4,"column":92,"index":186},"end":{"line":4,"column":106,"index":200}},"object":{"type":"Identifier","start":186,"end":191,"loc":{"start":{"line":4,"column":92,"index":186},"end":{"line":4,"column":97,"index":191},"identifierName":"Types"},"name":"Types"},"computed":false,"property":{"type":"Identifier","start":192,"end":200,"loc":{"start":{"line":4,"column":98,"index":192},"end":{"line":4,"column":106,"index":200},"identifierName":"ObjectId"},"name":"ObjectId"}},"arguments":[]}

      at visitRealmClassProperty (src/plugin/index.ts:329:17)
          at Array.map (<anonymous>)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new Types.ObjectId();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "objectId",
            optional: true,
            default: () => new Types.ObjectId()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    FISK 11: {"type":"NewExpression","start":165,"end":185,"loc":{"start":{"line":4,"column":71,"index":165},"end":{"line":4,"column":91,"index":185}},"callee":{"type":"MemberExpression","start":169,"end":183,"loc":{"start":{"line":4,"column":75,"index":169},"end":{"line":4,"column":89,"index":183}},"object":{"type":"Identifier","start":169,"end":174,"loc":{"start":{"line":4,"column":75,"index":169},"end":{"line":4,"column":80,"index":174},"identifierName":"Types"},"name":"Types"},"computed":false,"property":{"type":"Identifier","start":175,"end":183,"loc":{"start":{"line":4,"column":81,"index":175},"end":{"line":4,"column":89,"index":183},"identifierName":"ObjectId"},"name":"ObjectId"}},"arguments":[]}

      at visitRealmClassProperty (src/plugin/index.ts:329:17)
          at Array.map (<anonymous>)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new Types.ObjectId();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "objectId",
            optional: true,
            default: () => new Types.ObjectId()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    FISK 11: {"type":"NewExpression","start":176,"end":196,"loc":{"start":{"line":4,"column":82,"index":176},"end":{"line":4,"column":102,"index":196}},"callee":{"type":"MemberExpression","start":180,"end":194,"loc":{"start":{"line":4,"column":86,"index":180},"end":{"line":4,"column":100,"index":194}},"object":{"type":"Identifier","start":180,"end":185,"loc":{"start":{"line":4,"column":86,"index":180},"end":{"line":4,"column":91,"index":185},"identifierName":"Types"},"name":"Types"},"computed":false,"property":{"type":"Identifier","start":186,"end":194,"loc":{"start":{"line":4,"column":92,"index":186},"end":{"line":4,"column":100,"index":194},"identifierName":"ObjectId"},"name":"ObjectId"}},"arguments":[]}

      at visitRealmClassProperty (src/plugin/index.ts:329:17)
          at Array.map (<anonymous>)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new Types.ObjectId();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "objectId",
            optional: true,
            default: () => new Types.ObjectId()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    FISK 11: {"type":"NewExpression","start":176,"end":196,"loc":{"start":{"line":4,"column":82,"index":176},"end":{"line":4,"column":102,"index":196}},"callee":{"type":"MemberExpression","start":180,"end":194,"loc":{"start":{"line":4,"column":86,"index":180},"end":{"line":4,"column":100,"index":194}},"object":{"type":"Identifier","start":180,"end":185,"loc":{"start":{"line":4,"column":86,"index":180},"end":{"line":4,"column":91,"index":185},"identifierName":"Types"},"name":"Types"},"computed":false,"property":{"type":"Identifier","start":186,"end":194,"loc":{"start":{"line":4,"column":92,"index":186},"end":{"line":4,"column":100,"index":194},"identifierName":"ObjectId"},"name":"ObjectId"}},"arguments":[]}

      at visitRealmClassProperty (src/plugin/index.ts:329:17)
          at Array.map (<anonymous>)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new Types.ObjectId();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "objectId",
            optional: true,
            default: () => new Types.ObjectId()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    FISK 11: {"type":"NewExpression","start":170,"end":190,"loc":{"start":{"line":4,"column":76,"index":170},"end":{"line":4,"column":96,"index":190}},"callee":{"type":"MemberExpression","start":174,"end":188,"loc":{"start":{"line":4,"column":80,"index":174},"end":{"line":4,"column":94,"index":188}},"object":{"type":"Identifier","start":174,"end":179,"loc":{"start":{"line":4,"column":80,"index":174},"end":{"line":4,"column":85,"index":179},"identifierName":"Types"},"name":"Types"},"computed":false,"property":{"type":"Identifier","start":180,"end":188,"loc":{"start":{"line":4,"column":86,"index":180},"end":{"line":4,"column":94,"index":188},"identifierName":"ObjectId"},"name":"ObjectId"}},"arguments":[]}

      at visitRealmClassProperty (src/plugin/index.ts:329:17)
          at Array.map (<anonymous>)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new Types.ObjectId();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "objectId",
            optional: true,
            default: () => new Types.ObjectId()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    FISK 11: {"type":"NewExpression","start":181,"end":201,"loc":{"start":{"line":4,"column":87,"index":181},"end":{"line":4,"column":107,"index":201}},"callee":{"type":"MemberExpression","start":185,"end":199,"loc":{"start":{"line":4,"column":91,"index":185},"end":{"line":4,"column":105,"index":199}},"object":{"type":"Identifier","start":185,"end":190,"loc":{"start":{"line":4,"column":91,"index":185},"end":{"line":4,"column":96,"index":190},"identifierName":"Types"},"name":"Types"},"computed":false,"property":{"type":"Identifier","start":191,"end":199,"loc":{"start":{"line":4,"column":97,"index":191},"end":{"line":4,"column":105,"index":199},"identifierName":"ObjectId"},"name":"ObjectId"}},"arguments":[]}

      at visitRealmClassProperty (src/plugin/index.ts:329:17)
          at Array.map (<anonymous>)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new Types.ObjectId();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "objectId",
            optional: true,
            default: () => new Types.ObjectId()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    FISK 11: {"type":"NewExpression","start":181,"end":201,"loc":{"start":{"line":4,"column":87,"index":181},"end":{"line":4,"column":107,"index":201}},"callee":{"type":"MemberExpression","start":185,"end":199,"loc":{"start":{"line":4,"column":91,"index":185},"end":{"line":4,"column":105,"index":199}},"object":{"type":"Identifier","start":185,"end":190,"loc":{"start":{"line":4,"column":91,"index":185},"end":{"line":4,"column":96,"index":190},"identifierName":"Types"},"name":"Types"},"computed":false,"property":{"type":"Identifier","start":191,"end":199,"loc":{"start":{"line":4,"column":97,"index":191},"end":{"line":4,"column":105,"index":199},"identifierName":"ObjectId"},"name":"ObjectId"}},"arguments":[]}

      at visitRealmClassProperty (src/plugin/index.ts:329:17)
          at Array.map (<anonymous>)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new Types.ObjectId();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "objectId",
            optional: true,
            default: () => new Types.ObjectId()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    FISK 11: {"type":"NewExpression","start":164,"end":184,"loc":{"start":{"line":4,"column":70,"index":164},"end":{"line":4,"column":90,"index":184}},"callee":{"type":"MemberExpression","start":168,"end":182,"loc":{"start":{"line":4,"column":74,"index":168},"end":{"line":4,"column":88,"index":182}},"object":{"type":"Identifier","start":168,"end":173,"loc":{"start":{"line":4,"column":74,"index":168},"end":{"line":4,"column":79,"index":173},"identifierName":"Types"},"name":"Types"},"computed":false,"property":{"type":"Identifier","start":174,"end":182,"loc":{"start":{"line":4,"column":80,"index":174},"end":{"line":4,"column":88,"index":182},"identifierName":"ObjectId"},"name":"ObjectId"}},"arguments":[]}

      at visitRealmClassProperty (src/plugin/index.ts:329:17)
          at Array.map (<anonymous>)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new Types.ObjectId();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "objectId",
            optional: true,
            default: () => new Types.ObjectId()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    FISK 11: {"type":"NewExpression","start":175,"end":195,"loc":{"start":{"line":4,"column":81,"index":175},"end":{"line":4,"column":101,"index":195}},"callee":{"type":"MemberExpression","start":179,"end":193,"loc":{"start":{"line":4,"column":85,"index":179},"end":{"line":4,"column":99,"index":193}},"object":{"type":"Identifier","start":179,"end":184,"loc":{"start":{"line":4,"column":85,"index":179},"end":{"line":4,"column":90,"index":184},"identifierName":"Types"},"name":"Types"},"computed":false,"property":{"type":"Identifier","start":185,"end":193,"loc":{"start":{"line":4,"column":91,"index":185},"end":{"line":4,"column":99,"index":193},"identifierName":"ObjectId"},"name":"ObjectId"}},"arguments":[]}

      at visitRealmClassProperty (src/plugin/index.ts:329:17)
          at Array.map (<anonymous>)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new Types.ObjectId();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "objectId",
            optional: true,
            default: () => new Types.ObjectId()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    FISK 11: {"type":"NewExpression","start":175,"end":195,"loc":{"start":{"line":4,"column":81,"index":175},"end":{"line":4,"column":101,"index":195}},"callee":{"type":"MemberExpression","start":179,"end":193,"loc":{"start":{"line":4,"column":85,"index":179},"end":{"line":4,"column":99,"index":193}},"object":{"type":"Identifier","start":179,"end":184,"loc":{"start":{"line":4,"column":85,"index":179},"end":{"line":4,"column":90,"index":184},"identifierName":"Types"},"name":"Types"},"computed":false,"property":{"type":"Identifier","start":185,"end":193,"loc":{"start":{"line":4,"column":91,"index":185},"end":{"line":4,"column":99,"index":193},"identifierName":"ObjectId"},"name":"ObjectId"}},"arguments":[]}

      at visitRealmClassProperty (src/plugin/index.ts:329:17)
          at Array.map (<anonymous>)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new Types.ObjectId();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "objectId",
            optional: true,
            default: () => new Types.ObjectId()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    FISK 11: {"type":"NewExpression","start":149,"end":169,"loc":{"start":{"line":4,"column":55,"index":149},"end":{"line":4,"column":75,"index":169}},"callee":{"type":"MemberExpression","start":153,"end":167,"loc":{"start":{"line":4,"column":59,"index":153},"end":{"line":4,"column":73,"index":167}},"object":{"type":"Identifier","start":153,"end":158,"loc":{"start":{"line":4,"column":59,"index":153},"end":{"line":4,"column":64,"index":158},"identifierName":"Types"},"name":"Types"},"computed":false,"property":{"type":"Identifier","start":159,"end":167,"loc":{"start":{"line":4,"column":65,"index":159},"end":{"line":4,"column":73,"index":167},"identifierName":"ObjectId"},"name":"ObjectId"}},"arguments":[]}

      at visitRealmClassProperty (src/plugin/index.ts:329:17)
          at Array.map (<anonymous>)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new Types.ObjectId();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "objectId",
            optional: true,
            default: () => new Types.ObjectId()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    FISK 11: {"type":"NewExpression","start":170,"end":195,"loc":{"start":{"line":4,"column":76,"index":170},"end":{"line":4,"column":101,"index":195}},"callee":{"type":"MemberExpression","start":174,"end":193,"loc":{"start":{"line":4,"column":80,"index":174},"end":{"line":4,"column":99,"index":193}},"object":{"type":"MemberExpression","start":174,"end":184,"loc":{"start":{"line":4,"column":80,"index":174},"end":{"line":4,"column":90,"index":184}},"object":{"type":"Identifier","start":174,"end":179,"loc":{"start":{"line":4,"column":80,"index":174},"end":{"line":4,"column":85,"index":179},"identifierName":"Realm"},"name":"Realm"},"computed":false,"property":{"type":"Identifier","start":180,"end":184,"loc":{"start":{"line":4,"column":86,"index":180},"end":{"line":4,"column":90,"index":184},"identifierName":"BSON"},"name":"BSON"}},"computed":false,"property":{"type":"Identifier","start":185,"end":193,"loc":{"start":{"line":4,"column":91,"index":185},"end":{"line":4,"column":99,"index":193},"identifierName":"ObjectId"},"name":"ObjectId"}},"arguments":[]}

      at visitRealmClassProperty (src/plugin/index.ts:329:17)
          at Array.map (<anonymous>)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new Realm.BSON.ObjectId();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "objectId",
            default: () => new Realm.BSON.ObjectId()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    FISK 11: {"type":"NewExpression","start":164,"end":189,"loc":{"start":{"line":4,"column":70,"index":164},"end":{"line":4,"column":95,"index":189}},"callee":{"type":"MemberExpression","start":168,"end":187,"loc":{"start":{"line":4,"column":74,"index":168},"end":{"line":4,"column":93,"index":187}},"object":{"type":"MemberExpression","start":168,"end":178,"loc":{"start":{"line":4,"column":74,"index":168},"end":{"line":4,"column":84,"index":178}},"object":{"type":"Identifier","start":168,"end":173,"loc":{"start":{"line":4,"column":74,"index":168},"end":{"line":4,"column":79,"index":173},"identifierName":"Realm"},"name":"Realm"},"computed":false,"property":{"type":"Identifier","start":174,"end":178,"loc":{"start":{"line":4,"column":80,"index":174},"end":{"line":4,"column":84,"index":178},"identifierName":"BSON"},"name":"BSON"}},"computed":false,"property":{"type":"Identifier","start":179,"end":187,"loc":{"start":{"line":4,"column":85,"index":179},"end":{"line":4,"column":93,"index":187},"identifierName":"ObjectId"},"name":"ObjectId"}},"arguments":[]}

      at visitRealmClassProperty (src/plugin/index.ts:329:17)
          at Array.map (<anonymous>)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new Realm.BSON.ObjectId();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "objectId",
            default: () => new Realm.BSON.ObjectId()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    FISK 11: {"type":"NewExpression","start":169,"end":194,"loc":{"start":{"line":4,"column":75,"index":169},"end":{"line":4,"column":100,"index":194}},"callee":{"type":"MemberExpression","start":173,"end":192,"loc":{"start":{"line":4,"column":79,"index":173},"end":{"line":4,"column":98,"index":192}},"object":{"type":"MemberExpression","start":173,"end":183,"loc":{"start":{"line":4,"column":79,"index":173},"end":{"line":4,"column":89,"index":183}},"object":{"type":"Identifier","start":173,"end":178,"loc":{"start":{"line":4,"column":79,"index":173},"end":{"line":4,"column":84,"index":178},"identifierName":"Realm"},"name":"Realm"},"computed":false,"property":{"type":"Identifier","start":179,"end":183,"loc":{"start":{"line":4,"column":85,"index":179},"end":{"line":4,"column":89,"index":183},"identifierName":"BSON"},"name":"BSON"}},"computed":false,"property":{"type":"Identifier","start":184,"end":192,"loc":{"start":{"line":4,"column":90,"index":184},"end":{"line":4,"column":98,"index":192},"identifierName":"ObjectId"},"name":"ObjectId"}},"arguments":[]}

      at visitRealmClassProperty (src/plugin/index.ts:329:17)
          at Array.map (<anonymous>)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new Realm.BSON.ObjectId();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "objectId",
            default: () => new Realm.BSON.ObjectId()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    FISK 11: {"type":"NewExpression","start":163,"end":188,"loc":{"start":{"line":4,"column":69,"index":163},"end":{"line":4,"column":94,"index":188}},"callee":{"type":"MemberExpression","start":167,"end":186,"loc":{"start":{"line":4,"column":73,"index":167},"end":{"line":4,"column":92,"index":186}},"object":{"type":"MemberExpression","start":167,"end":177,"loc":{"start":{"line":4,"column":73,"index":167},"end":{"line":4,"column":83,"index":177}},"object":{"type":"Identifier","start":167,"end":172,"loc":{"start":{"line":4,"column":73,"index":167},"end":{"line":4,"column":78,"index":172},"identifierName":"Realm"},"name":"Realm"},"computed":false,"property":{"type":"Identifier","start":173,"end":177,"loc":{"start":{"line":4,"column":79,"index":173},"end":{"line":4,"column":83,"index":177},"identifierName":"BSON"},"name":"BSON"}},"computed":false,"property":{"type":"Identifier","start":178,"end":186,"loc":{"start":{"line":4,"column":84,"index":178},"end":{"line":4,"column":92,"index":186},"identifierName":"ObjectId"},"name":"ObjectId"}},"arguments":[]}

      at visitRealmClassProperty (src/plugin/index.ts:329:17)
          at Array.map (<anonymous>)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new Realm.BSON.ObjectId();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "objectId",
            default: () => new Realm.BSON.ObjectId()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    FISK 11: {"type":"NewExpression","start":148,"end":173,"loc":{"start":{"line":4,"column":54,"index":148},"end":{"line":4,"column":79,"index":173}},"callee":{"type":"MemberExpression","start":152,"end":171,"loc":{"start":{"line":4,"column":58,"index":152},"end":{"line":4,"column":77,"index":171}},"object":{"type":"MemberExpression","start":152,"end":162,"loc":{"start":{"line":4,"column":58,"index":152},"end":{"line":4,"column":68,"index":162}},"object":{"type":"Identifier","start":152,"end":157,"loc":{"start":{"line":4,"column":58,"index":152},"end":{"line":4,"column":63,"index":157},"identifierName":"Realm"},"name":"Realm"},"computed":false,"property":{"type":"Identifier","start":158,"end":162,"loc":{"start":{"line":4,"column":64,"index":158},"end":{"line":4,"column":68,"index":162},"identifierName":"BSON"},"name":"BSON"}},"computed":false,"property":{"type":"Identifier","start":163,"end":171,"loc":{"start":{"line":4,"column":69,"index":163},"end":{"line":4,"column":77,"index":171},"identifierName":"ObjectId"},"name":"ObjectId"}},"arguments":[]}

      at visitRealmClassProperty (src/plugin/index.ts:329:17)
          at Array.map (<anonymous>)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new Realm.BSON.ObjectId();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "objectId",
            default: () => new Realm.BSON.ObjectId()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    FISK 11: {"type":"NewExpression","start":171,"end":196,"loc":{"start":{"line":4,"column":77,"index":171},"end":{"line":4,"column":102,"index":196}},"callee":{"type":"MemberExpression","start":175,"end":194,"loc":{"start":{"line":4,"column":81,"index":175},"end":{"line":4,"column":100,"index":194}},"object":{"type":"MemberExpression","start":175,"end":185,"loc":{"start":{"line":4,"column":81,"index":175},"end":{"line":4,"column":91,"index":185}},"object":{"type":"Identifier","start":175,"end":180,"loc":{"start":{"line":4,"column":81,"index":175},"end":{"line":4,"column":86,"index":180},"identifierName":"Realm"},"name":"Realm"},"computed":false,"property":{"type":"Identifier","start":181,"end":185,"loc":{"start":{"line":4,"column":87,"index":181},"end":{"line":4,"column":91,"index":185},"identifierName":"BSON"},"name":"BSON"}},"computed":false,"property":{"type":"Identifier","start":186,"end":194,"loc":{"start":{"line":4,"column":92,"index":186},"end":{"line":4,"column":100,"index":194},"identifierName":"ObjectId"},"name":"ObjectId"}},"arguments":[]}

      at visitRealmClassProperty (src/plugin/index.ts:329:17)
          at Array.map (<anonymous>)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new Realm.BSON.ObjectId();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "objectId",
            optional: true,
            default: () => new Realm.BSON.ObjectId()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    FISK 11: {"type":"NewExpression","start":182,"end":207,"loc":{"start":{"line":4,"column":88,"index":182},"end":{"line":4,"column":113,"index":207}},"callee":{"type":"MemberExpression","start":186,"end":205,"loc":{"start":{"line":4,"column":92,"index":186},"end":{"line":4,"column":111,"index":205}},"object":{"type":"MemberExpression","start":186,"end":196,"loc":{"start":{"line":4,"column":92,"index":186},"end":{"line":4,"column":102,"index":196}},"object":{"type":"Identifier","start":186,"end":191,"loc":{"start":{"line":4,"column":92,"index":186},"end":{"line":4,"column":97,"index":191},"identifierName":"Realm"},"name":"Realm"},"computed":false,"property":{"type":"Identifier","start":192,"end":196,"loc":{"start":{"line":4,"column":98,"index":192},"end":{"line":4,"column":102,"index":196},"identifierName":"BSON"},"name":"BSON"}},"computed":false,"property":{"type":"Identifier","start":197,"end":205,"loc":{"start":{"line":4,"column":103,"index":197},"end":{"line":4,"column":111,"index":205},"identifierName":"ObjectId"},"name":"ObjectId"}},"arguments":[]}

      at visitRealmClassProperty (src/plugin/index.ts:329:17)
          at Array.map (<anonymous>)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new Realm.BSON.ObjectId();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "objectId",
            optional: true,
            default: () => new Realm.BSON.ObjectId()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    FISK 11: {"type":"NewExpression","start":182,"end":207,"loc":{"start":{"line":4,"column":88,"index":182},"end":{"line":4,"column":113,"index":207}},"callee":{"type":"MemberExpression","start":186,"end":205,"loc":{"start":{"line":4,"column":92,"index":186},"end":{"line":4,"column":111,"index":205}},"object":{"type":"MemberExpression","start":186,"end":196,"loc":{"start":{"line":4,"column":92,"index":186},"end":{"line":4,"column":102,"index":196}},"object":{"type":"Identifier","start":186,"end":191,"loc":{"start":{"line":4,"column":92,"index":186},"end":{"line":4,"column":97,"index":191},"identifierName":"Realm"},"name":"Realm"},"computed":false,"property":{"type":"Identifier","start":192,"end":196,"loc":{"start":{"line":4,"column":98,"index":192},"end":{"line":4,"column":102,"index":196},"identifierName":"BSON"},"name":"BSON"}},"computed":false,"property":{"type":"Identifier","start":197,"end":205,"loc":{"start":{"line":4,"column":103,"index":197},"end":{"line":4,"column":111,"index":205},"identifierName":"ObjectId"},"name":"ObjectId"}},"arguments":[]}

      at visitRealmClassProperty (src/plugin/index.ts:329:17)
          at Array.map (<anonymous>)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new Realm.BSON.ObjectId();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "objectId",
            optional: true,
            default: () => new Realm.BSON.ObjectId()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    FISK 11: {"type":"NewExpression","start":165,"end":190,"loc":{"start":{"line":4,"column":71,"index":165},"end":{"line":4,"column":96,"index":190}},"callee":{"type":"MemberExpression","start":169,"end":188,"loc":{"start":{"line":4,"column":75,"index":169},"end":{"line":4,"column":94,"index":188}},"object":{"type":"MemberExpression","start":169,"end":179,"loc":{"start":{"line":4,"column":75,"index":169},"end":{"line":4,"column":85,"index":179}},"object":{"type":"Identifier","start":169,"end":174,"loc":{"start":{"line":4,"column":75,"index":169},"end":{"line":4,"column":80,"index":174},"identifierName":"Realm"},"name":"Realm"},"computed":false,"property":{"type":"Identifier","start":175,"end":179,"loc":{"start":{"line":4,"column":81,"index":175},"end":{"line":4,"column":85,"index":179},"identifierName":"BSON"},"name":"BSON"}},"computed":false,"property":{"type":"Identifier","start":180,"end":188,"loc":{"start":{"line":4,"column":86,"index":180},"end":{"line":4,"column":94,"index":188},"identifierName":"ObjectId"},"name":"ObjectId"}},"arguments":[]}

      at visitRealmClassProperty (src/plugin/index.ts:329:17)
          at Array.map (<anonymous>)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new Realm.BSON.ObjectId();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "objectId",
            optional: true,
            default: () => new Realm.BSON.ObjectId()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    FISK 11: {"type":"NewExpression","start":176,"end":201,"loc":{"start":{"line":4,"column":82,"index":176},"end":{"line":4,"column":107,"index":201}},"callee":{"type":"MemberExpression","start":180,"end":199,"loc":{"start":{"line":4,"column":86,"index":180},"end":{"line":4,"column":105,"index":199}},"object":{"type":"MemberExpression","start":180,"end":190,"loc":{"start":{"line":4,"column":86,"index":180},"end":{"line":4,"column":96,"index":190}},"object":{"type":"Identifier","start":180,"end":185,"loc":{"start":{"line":4,"column":86,"index":180},"end":{"line":4,"column":91,"index":185},"identifierName":"Realm"},"name":"Realm"},"computed":false,"property":{"type":"Identifier","start":186,"end":190,"loc":{"start":{"line":4,"column":92,"index":186},"end":{"line":4,"column":96,"index":190},"identifierName":"BSON"},"name":"BSON"}},"computed":false,"property":{"type":"Identifier","start":191,"end":199,"loc":{"start":{"line":4,"column":97,"index":191},"end":{"line":4,"column":105,"index":199},"identifierName":"ObjectId"},"name":"ObjectId"}},"arguments":[]}

      at visitRealmClassProperty (src/plugin/index.ts:329:17)
          at Array.map (<anonymous>)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new Realm.BSON.ObjectId();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "objectId",
            optional: true,
            default: () => new Realm.BSON.ObjectId()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    FISK 11: {"type":"NewExpression","start":176,"end":201,"loc":{"start":{"line":4,"column":82,"index":176},"end":{"line":4,"column":107,"index":201}},"callee":{"type":"MemberExpression","start":180,"end":199,"loc":{"start":{"line":4,"column":86,"index":180},"end":{"line":4,"column":105,"index":199}},"object":{"type":"MemberExpression","start":180,"end":190,"loc":{"start":{"line":4,"column":86,"index":180},"end":{"line":4,"column":96,"index":190}},"object":{"type":"Identifier","start":180,"end":185,"loc":{"start":{"line":4,"column":86,"index":180},"end":{"line":4,"column":91,"index":185},"identifierName":"Realm"},"name":"Realm"},"computed":false,"property":{"type":"Identifier","start":186,"end":190,"loc":{"start":{"line":4,"column":92,"index":186},"end":{"line":4,"column":96,"index":190},"identifierName":"BSON"},"name":"BSON"}},"computed":false,"property":{"type":"Identifier","start":191,"end":199,"loc":{"start":{"line":4,"column":97,"index":191},"end":{"line":4,"column":105,"index":199},"identifierName":"ObjectId"},"name":"ObjectId"}},"arguments":[]}

      at visitRealmClassProperty (src/plugin/index.ts:329:17)
          at Array.map (<anonymous>)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new Realm.BSON.ObjectId();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "objectId",
            optional: true,
            default: () => new Realm.BSON.ObjectId()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    FISK 11: {"type":"NewExpression","start":170,"end":195,"loc":{"start":{"line":4,"column":76,"index":170},"end":{"line":4,"column":101,"index":195}},"callee":{"type":"MemberExpression","start":174,"end":193,"loc":{"start":{"line":4,"column":80,"index":174},"end":{"line":4,"column":99,"index":193}},"object":{"type":"MemberExpression","start":174,"end":184,"loc":{"start":{"line":4,"column":80,"index":174},"end":{"line":4,"column":90,"index":184}},"object":{"type":"Identifier","start":174,"end":179,"loc":{"start":{"line":4,"column":80,"index":174},"end":{"line":4,"column":85,"index":179},"identifierName":"Realm"},"name":"Realm"},"computed":false,"property":{"type":"Identifier","start":180,"end":184,"loc":{"start":{"line":4,"column":86,"index":180},"end":{"line":4,"column":90,"index":184},"identifierName":"BSON"},"name":"BSON"}},"computed":false,"property":{"type":"Identifier","start":185,"end":193,"loc":{"start":{"line":4,"column":91,"index":185},"end":{"line":4,"column":99,"index":193},"identifierName":"ObjectId"},"name":"ObjectId"}},"arguments":[]}

      at visitRealmClassProperty (src/plugin/index.ts:329:17)
          at Array.map (<anonymous>)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new Realm.BSON.ObjectId();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "objectId",
            optional: true,
            default: () => new Realm.BSON.ObjectId()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    FISK 11: {"type":"NewExpression","start":181,"end":206,"loc":{"start":{"line":4,"column":87,"index":181},"end":{"line":4,"column":112,"index":206}},"callee":{"type":"MemberExpression","start":185,"end":204,"loc":{"start":{"line":4,"column":91,"index":185},"end":{"line":4,"column":110,"index":204}},"object":{"type":"MemberExpression","start":185,"end":195,"loc":{"start":{"line":4,"column":91,"index":185},"end":{"line":4,"column":101,"index":195}},"object":{"type":"Identifier","start":185,"end":190,"loc":{"start":{"line":4,"column":91,"index":185},"end":{"line":4,"column":96,"index":190},"identifierName":"Realm"},"name":"Realm"},"computed":false,"property":{"type":"Identifier","start":191,"end":195,"loc":{"start":{"line":4,"column":97,"index":191},"end":{"line":4,"column":101,"index":195},"identifierName":"BSON"},"name":"BSON"}},"computed":false,"property":{"type":"Identifier","start":196,"end":204,"loc":{"start":{"line":4,"column":102,"index":196},"end":{"line":4,"column":110,"index":204},"identifierName":"ObjectId"},"name":"ObjectId"}},"arguments":[]}

      at visitRealmClassProperty (src/plugin/index.ts:329:17)
          at Array.map (<anonymous>)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new Realm.BSON.ObjectId();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "objectId",
            optional: true,
            default: () => new Realm.BSON.ObjectId()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    FISK 11: {"type":"NewExpression","start":181,"end":206,"loc":{"start":{"line":4,"column":87,"index":181},"end":{"line":4,"column":112,"index":206}},"callee":{"type":"MemberExpression","start":185,"end":204,"loc":{"start":{"line":4,"column":91,"index":185},"end":{"line":4,"column":110,"index":204}},"object":{"type":"MemberExpression","start":185,"end":195,"loc":{"start":{"line":4,"column":91,"index":185},"end":{"line":4,"column":101,"index":195}},"object":{"type":"Identifier","start":185,"end":190,"loc":{"start":{"line":4,"column":91,"index":185},"end":{"line":4,"column":96,"index":190},"identifierName":"Realm"},"name":"Realm"},"computed":false,"property":{"type":"Identifier","start":191,"end":195,"loc":{"start":{"line":4,"column":97,"index":191},"end":{"line":4,"column":101,"index":195},"identifierName":"BSON"},"name":"BSON"}},"computed":false,"property":{"type":"Identifier","start":196,"end":204,"loc":{"start":{"line":4,"column":102,"index":196},"end":{"line":4,"column":110,"index":204},"identifierName":"ObjectId"},"name":"ObjectId"}},"arguments":[]}

      at visitRealmClassProperty (src/plugin/index.ts:329:17)
          at Array.map (<anonymous>)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new Realm.BSON.ObjectId();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "objectId",
            optional: true,
            default: () => new Realm.BSON.ObjectId()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    FISK 11: {"type":"NewExpression","start":164,"end":189,"loc":{"start":{"line":4,"column":70,"index":164},"end":{"line":4,"column":95,"index":189}},"callee":{"type":"MemberExpression","start":168,"end":187,"loc":{"start":{"line":4,"column":74,"index":168},"end":{"line":4,"column":93,"index":187}},"object":{"type":"MemberExpression","start":168,"end":178,"loc":{"start":{"line":4,"column":74,"index":168},"end":{"line":4,"column":84,"index":178}},"object":{"type":"Identifier","start":168,"end":173,"loc":{"start":{"line":4,"column":74,"index":168},"end":{"line":4,"column":79,"index":173},"identifierName":"Realm"},"name":"Realm"},"computed":false,"property":{"type":"Identifier","start":174,"end":178,"loc":{"start":{"line":4,"column":80,"index":174},"end":{"line":4,"column":84,"index":178},"identifierName":"BSON"},"name":"BSON"}},"computed":false,"property":{"type":"Identifier","start":179,"end":187,"loc":{"start":{"line":4,"column":85,"index":179},"end":{"line":4,"column":93,"index":187},"identifierName":"ObjectId"},"name":"ObjectId"}},"arguments":[]}

      at visitRealmClassProperty (src/plugin/index.ts:329:17)
          at Array.map (<anonymous>)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new Realm.BSON.ObjectId();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "objectId",
            optional: true,
            default: () => new Realm.BSON.ObjectId()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    FISK 11: {"type":"NewExpression","start":175,"end":200,"loc":{"start":{"line":4,"column":81,"index":175},"end":{"line":4,"column":106,"index":200}},"callee":{"type":"MemberExpression","start":179,"end":198,"loc":{"start":{"line":4,"column":85,"index":179},"end":{"line":4,"column":104,"index":198}},"object":{"type":"MemberExpression","start":179,"end":189,"loc":{"start":{"line":4,"column":85,"index":179},"end":{"line":4,"column":95,"index":189}},"object":{"type":"Identifier","start":179,"end":184,"loc":{"start":{"line":4,"column":85,"index":179},"end":{"line":4,"column":90,"index":184},"identifierName":"Realm"},"name":"Realm"},"computed":false,"property":{"type":"Identifier","start":185,"end":189,"loc":{"start":{"line":4,"column":91,"index":185},"end":{"line":4,"column":95,"index":189},"identifierName":"BSON"},"name":"BSON"}},"computed":false,"property":{"type":"Identifier","start":190,"end":198,"loc":{"start":{"line":4,"column":96,"index":190},"end":{"line":4,"column":104,"index":198},"identifierName":"ObjectId"},"name":"ObjectId"}},"arguments":[]}

      at visitRealmClassProperty (src/plugin/index.ts:329:17)
          at Array.map (<anonymous>)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new Realm.BSON.ObjectId();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "objectId",
            optional: true,
            default: () => new Realm.BSON.ObjectId()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    FISK 11: {"type":"NewExpression","start":175,"end":200,"loc":{"start":{"line":4,"column":81,"index":175},"end":{"line":4,"column":106,"index":200}},"callee":{"type":"MemberExpression","start":179,"end":198,"loc":{"start":{"line":4,"column":85,"index":179},"end":{"line":4,"column":104,"index":198}},"object":{"type":"MemberExpression","start":179,"end":189,"loc":{"start":{"line":4,"column":85,"index":179},"end":{"line":4,"column":95,"index":189}},"object":{"type":"Identifier","start":179,"end":184,"loc":{"start":{"line":4,"column":85,"index":179},"end":{"line":4,"column":90,"index":184},"identifierName":"Realm"},"name":"Realm"},"computed":false,"property":{"type":"Identifier","start":185,"end":189,"loc":{"start":{"line":4,"column":91,"index":185},"end":{"line":4,"column":95,"index":189},"identifierName":"BSON"},"name":"BSON"}},"computed":false,"property":{"type":"Identifier","start":190,"end":198,"loc":{"start":{"line":4,"column":96,"index":190},"end":{"line":4,"column":104,"index":198},"identifierName":"ObjectId"},"name":"ObjectId"}},"arguments":[]}

      at visitRealmClassProperty (src/plugin/index.ts:329:17)
          at Array.map (<anonymous>)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new Realm.BSON.ObjectId();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "objectId",
            optional: true,
            default: () => new Realm.BSON.ObjectId()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    FISK 11: {"type":"NewExpression","start":149,"end":174,"loc":{"start":{"line":4,"column":55,"index":149},"end":{"line":4,"column":80,"index":174}},"callee":{"type":"MemberExpression","start":153,"end":172,"loc":{"start":{"line":4,"column":59,"index":153},"end":{"line":4,"column":78,"index":172}},"object":{"type":"MemberExpression","start":153,"end":163,"loc":{"start":{"line":4,"column":59,"index":153},"end":{"line":4,"column":69,"index":163}},"object":{"type":"Identifier","start":153,"end":158,"loc":{"start":{"line":4,"column":59,"index":153},"end":{"line":4,"column":64,"index":158},"identifierName":"Realm"},"name":"Realm"},"computed":false,"property":{"type":"Identifier","start":159,"end":163,"loc":{"start":{"line":4,"column":65,"index":159},"end":{"line":4,"column":69,"index":163},"identifierName":"BSON"},"name":"BSON"}},"computed":false,"property":{"type":"Identifier","start":164,"end":172,"loc":{"start":{"line":4,"column":70,"index":164},"end":{"line":4,"column":78,"index":172},"identifierName":"ObjectId"},"name":"ObjectId"}},"arguments":[]}

      at visitRealmClassProperty (src/plugin/index.ts:329:17)
          at Array.map (<anonymous>)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new Realm.BSON.ObjectId();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "objectId",
            optional: true,
            default: () => new Realm.BSON.ObjectId()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    FISK 11: {"type":"NewExpression","start":170,"end":189,"loc":{"start":{"line":4,"column":76,"index":170},"end":{"line":4,"column":95,"index":189}},"callee":{"type":"MemberExpression","start":174,"end":187,"loc":{"start":{"line":4,"column":80,"index":174},"end":{"line":4,"column":93,"index":187}},"object":{"type":"Identifier","start":174,"end":178,"loc":{"start":{"line":4,"column":80,"index":174},"end":{"line":4,"column":84,"index":178},"identifierName":"BSON"},"name":"BSON"},"computed":false,"property":{"type":"Identifier","start":179,"end":187,"loc":{"start":{"line":4,"column":85,"index":179},"end":{"line":4,"column":93,"index":187},"identifierName":"ObjectId"},"name":"ObjectId"}},"arguments":[]}

      at visitRealmClassProperty (src/plugin/index.ts:329:17)
          at Array.map (<anonymous>)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new BSON.ObjectId();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "objectId",
            default: () => new BSON.ObjectId()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    FISK 11: {"type":"NewExpression","start":164,"end":183,"loc":{"start":{"line":4,"column":70,"index":164},"end":{"line":4,"column":89,"index":183}},"callee":{"type":"MemberExpression","start":168,"end":181,"loc":{"start":{"line":4,"column":74,"index":168},"end":{"line":4,"column":87,"index":181}},"object":{"type":"Identifier","start":168,"end":172,"loc":{"start":{"line":4,"column":74,"index":168},"end":{"line":4,"column":78,"index":172},"identifierName":"BSON"},"name":"BSON"},"computed":false,"property":{"type":"Identifier","start":173,"end":181,"loc":{"start":{"line":4,"column":79,"index":173},"end":{"line":4,"column":87,"index":181},"identifierName":"ObjectId"},"name":"ObjectId"}},"arguments":[]}

      at visitRealmClassProperty (src/plugin/index.ts:329:17)
          at Array.map (<anonymous>)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new BSON.ObjectId();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "objectId",
            default: () => new BSON.ObjectId()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    FISK 11: {"type":"NewExpression","start":169,"end":188,"loc":{"start":{"line":4,"column":75,"index":169},"end":{"line":4,"column":94,"index":188}},"callee":{"type":"MemberExpression","start":173,"end":186,"loc":{"start":{"line":4,"column":79,"index":173},"end":{"line":4,"column":92,"index":186}},"object":{"type":"Identifier","start":173,"end":177,"loc":{"start":{"line":4,"column":79,"index":173},"end":{"line":4,"column":83,"index":177},"identifierName":"BSON"},"name":"BSON"},"computed":false,"property":{"type":"Identifier","start":178,"end":186,"loc":{"start":{"line":4,"column":84,"index":178},"end":{"line":4,"column":92,"index":186},"identifierName":"ObjectId"},"name":"ObjectId"}},"arguments":[]}

      at visitRealmClassProperty (src/plugin/index.ts:329:17)
          at Array.map (<anonymous>)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new BSON.ObjectId();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "objectId",
            default: () => new BSON.ObjectId()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    FISK 11: {"type":"NewExpression","start":163,"end":182,"loc":{"start":{"line":4,"column":69,"index":163},"end":{"line":4,"column":88,"index":182}},"callee":{"type":"MemberExpression","start":167,"end":180,"loc":{"start":{"line":4,"column":73,"index":167},"end":{"line":4,"column":86,"index":180}},"object":{"type":"Identifier","start":167,"end":171,"loc":{"start":{"line":4,"column":73,"index":167},"end":{"line":4,"column":77,"index":171},"identifierName":"BSON"},"name":"BSON"},"computed":false,"property":{"type":"Identifier","start":172,"end":180,"loc":{"start":{"line":4,"column":78,"index":172},"end":{"line":4,"column":86,"index":180},"identifierName":"ObjectId"},"name":"ObjectId"}},"arguments":[]}

      at visitRealmClassProperty (src/plugin/index.ts:329:17)
          at Array.map (<anonymous>)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new BSON.ObjectId();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "objectId",
            default: () => new BSON.ObjectId()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    FISK 11: {"type":"NewExpression","start":148,"end":167,"loc":{"start":{"line":4,"column":54,"index":148},"end":{"line":4,"column":73,"index":167}},"callee":{"type":"MemberExpression","start":152,"end":165,"loc":{"start":{"line":4,"column":58,"index":152},"end":{"line":4,"column":71,"index":165}},"object":{"type":"Identifier","start":152,"end":156,"loc":{"start":{"line":4,"column":58,"index":152},"end":{"line":4,"column":62,"index":156},"identifierName":"BSON"},"name":"BSON"},"computed":false,"property":{"type":"Identifier","start":157,"end":165,"loc":{"start":{"line":4,"column":63,"index":157},"end":{"line":4,"column":71,"index":165},"identifierName":"ObjectId"},"name":"ObjectId"}},"arguments":[]}

      at visitRealmClassProperty (src/plugin/index.ts:329:17)
          at Array.map (<anonymous>)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new BSON.ObjectId();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "objectId",
            default: () => new BSON.ObjectId()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    FISK 11: {"type":"NewExpression","start":171,"end":190,"loc":{"start":{"line":4,"column":77,"index":171},"end":{"line":4,"column":96,"index":190}},"callee":{"type":"MemberExpression","start":175,"end":188,"loc":{"start":{"line":4,"column":81,"index":175},"end":{"line":4,"column":94,"index":188}},"object":{"type":"Identifier","start":175,"end":179,"loc":{"start":{"line":4,"column":81,"index":175},"end":{"line":4,"column":85,"index":179},"identifierName":"BSON"},"name":"BSON"},"computed":false,"property":{"type":"Identifier","start":180,"end":188,"loc":{"start":{"line":4,"column":86,"index":180},"end":{"line":4,"column":94,"index":188},"identifierName":"ObjectId"},"name":"ObjectId"}},"arguments":[]}

      at visitRealmClassProperty (src/plugin/index.ts:329:17)
          at Array.map (<anonymous>)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new BSON.ObjectId();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "objectId",
            optional: true,
            default: () => new BSON.ObjectId()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    FISK 11: {"type":"NewExpression","start":182,"end":201,"loc":{"start":{"line":4,"column":88,"index":182},"end":{"line":4,"column":107,"index":201}},"callee":{"type":"MemberExpression","start":186,"end":199,"loc":{"start":{"line":4,"column":92,"index":186},"end":{"line":4,"column":105,"index":199}},"object":{"type":"Identifier","start":186,"end":190,"loc":{"start":{"line":4,"column":92,"index":186},"end":{"line":4,"column":96,"index":190},"identifierName":"BSON"},"name":"BSON"},"computed":false,"property":{"type":"Identifier","start":191,"end":199,"loc":{"start":{"line":4,"column":97,"index":191},"end":{"line":4,"column":105,"index":199},"identifierName":"ObjectId"},"name":"ObjectId"}},"arguments":[]}

      at visitRealmClassProperty (src/plugin/index.ts:329:17)
          at Array.map (<anonymous>)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new BSON.ObjectId();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "objectId",
            optional: true,
            default: () => new BSON.ObjectId()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    FISK 11: {"type":"NewExpression","start":182,"end":201,"loc":{"start":{"line":4,"column":88,"index":182},"end":{"line":4,"column":107,"index":201}},"callee":{"type":"MemberExpression","start":186,"end":199,"loc":{"start":{"line":4,"column":92,"index":186},"end":{"line":4,"column":105,"index":199}},"object":{"type":"Identifier","start":186,"end":190,"loc":{"start":{"line":4,"column":92,"index":186},"end":{"line":4,"column":96,"index":190},"identifierName":"BSON"},"name":"BSON"},"computed":false,"property":{"type":"Identifier","start":191,"end":199,"loc":{"start":{"line":4,"column":97,"index":191},"end":{"line":4,"column":105,"index":199},"identifierName":"ObjectId"},"name":"ObjectId"}},"arguments":[]}

      at visitRealmClassProperty (src/plugin/index.ts:329:17)
          at Array.map (<anonymous>)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new BSON.ObjectId();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "objectId",
            optional: true,
            default: () => new BSON.ObjectId()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    FISK 11: {"type":"NewExpression","start":165,"end":184,"loc":{"start":{"line":4,"column":71,"index":165},"end":{"line":4,"column":90,"index":184}},"callee":{"type":"MemberExpression","start":169,"end":182,"loc":{"start":{"line":4,"column":75,"index":169},"end":{"line":4,"column":88,"index":182}},"object":{"type":"Identifier","start":169,"end":173,"loc":{"start":{"line":4,"column":75,"index":169},"end":{"line":4,"column":79,"index":173},"identifierName":"BSON"},"name":"BSON"},"computed":false,"property":{"type":"Identifier","start":174,"end":182,"loc":{"start":{"line":4,"column":80,"index":174},"end":{"line":4,"column":88,"index":182},"identifierName":"ObjectId"},"name":"ObjectId"}},"arguments":[]}

      at visitRealmClassProperty (src/plugin/index.ts:329:17)
          at Array.map (<anonymous>)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new BSON.ObjectId();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "objectId",
            optional: true,
            default: () => new BSON.ObjectId()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    FISK 11: {"type":"NewExpression","start":176,"end":195,"loc":{"start":{"line":4,"column":82,"index":176},"end":{"line":4,"column":101,"index":195}},"callee":{"type":"MemberExpression","start":180,"end":193,"loc":{"start":{"line":4,"column":86,"index":180},"end":{"line":4,"column":99,"index":193}},"object":{"type":"Identifier","start":180,"end":184,"loc":{"start":{"line":4,"column":86,"index":180},"end":{"line":4,"column":90,"index":184},"identifierName":"BSON"},"name":"BSON"},"computed":false,"property":{"type":"Identifier","start":185,"end":193,"loc":{"start":{"line":4,"column":91,"index":185},"end":{"line":4,"column":99,"index":193},"identifierName":"ObjectId"},"name":"ObjectId"}},"arguments":[]}

      at visitRealmClassProperty (src/plugin/index.ts:329:17)
          at Array.map (<anonymous>)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new BSON.ObjectId();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "objectId",
            optional: true,
            default: () => new BSON.ObjectId()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    FISK 11: {"type":"NewExpression","start":176,"end":195,"loc":{"start":{"line":4,"column":82,"index":176},"end":{"line":4,"column":101,"index":195}},"callee":{"type":"MemberExpression","start":180,"end":193,"loc":{"start":{"line":4,"column":86,"index":180},"end":{"line":4,"column":99,"index":193}},"object":{"type":"Identifier","start":180,"end":184,"loc":{"start":{"line":4,"column":86,"index":180},"end":{"line":4,"column":90,"index":184},"identifierName":"BSON"},"name":"BSON"},"computed":false,"property":{"type":"Identifier","start":185,"end":193,"loc":{"start":{"line":4,"column":91,"index":185},"end":{"line":4,"column":99,"index":193},"identifierName":"ObjectId"},"name":"ObjectId"}},"arguments":[]}

      at visitRealmClassProperty (src/plugin/index.ts:329:17)
          at Array.map (<anonymous>)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new BSON.ObjectId();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "objectId",
            optional: true,
            default: () => new BSON.ObjectId()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    FISK 11: {"type":"NewExpression","start":170,"end":189,"loc":{"start":{"line":4,"column":76,"index":170},"end":{"line":4,"column":95,"index":189}},"callee":{"type":"MemberExpression","start":174,"end":187,"loc":{"start":{"line":4,"column":80,"index":174},"end":{"line":4,"column":93,"index":187}},"object":{"type":"Identifier","start":174,"end":178,"loc":{"start":{"line":4,"column":80,"index":174},"end":{"line":4,"column":84,"index":178},"identifierName":"BSON"},"name":"BSON"},"computed":false,"property":{"type":"Identifier","start":179,"end":187,"loc":{"start":{"line":4,"column":85,"index":179},"end":{"line":4,"column":93,"index":187},"identifierName":"ObjectId"},"name":"ObjectId"}},"arguments":[]}

      at visitRealmClassProperty (src/plugin/index.ts:329:17)
          at Array.map (<anonymous>)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new BSON.ObjectId();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "objectId",
            optional: true,
            default: () => new BSON.ObjectId()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    FISK 11: {"type":"NewExpression","start":181,"end":200,"loc":{"start":{"line":4,"column":87,"index":181},"end":{"line":4,"column":106,"index":200}},"callee":{"type":"MemberExpression","start":185,"end":198,"loc":{"start":{"line":4,"column":91,"index":185},"end":{"line":4,"column":104,"index":198}},"object":{"type":"Identifier","start":185,"end":189,"loc":{"start":{"line":4,"column":91,"index":185},"end":{"line":4,"column":95,"index":189},"identifierName":"BSON"},"name":"BSON"},"computed":false,"property":{"type":"Identifier","start":190,"end":198,"loc":{"start":{"line":4,"column":96,"index":190},"end":{"line":4,"column":104,"index":198},"identifierName":"ObjectId"},"name":"ObjectId"}},"arguments":[]}

      at visitRealmClassProperty (src/plugin/index.ts:329:17)
          at Array.map (<anonymous>)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new BSON.ObjectId();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "objectId",
            optional: true,
            default: () => new BSON.ObjectId()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    FISK 11: {"type":"NewExpression","start":181,"end":200,"loc":{"start":{"line":4,"column":87,"index":181},"end":{"line":4,"column":106,"index":200}},"callee":{"type":"MemberExpression","start":185,"end":198,"loc":{"start":{"line":4,"column":91,"index":185},"end":{"line":4,"column":104,"index":198}},"object":{"type":"Identifier","start":185,"end":189,"loc":{"start":{"line":4,"column":91,"index":185},"end":{"line":4,"column":95,"index":189},"identifierName":"BSON"},"name":"BSON"},"computed":false,"property":{"type":"Identifier","start":190,"end":198,"loc":{"start":{"line":4,"column":96,"index":190},"end":{"line":4,"column":104,"index":198},"identifierName":"ObjectId"},"name":"ObjectId"}},"arguments":[]}

      at visitRealmClassProperty (src/plugin/index.ts:329:17)
          at Array.map (<anonymous>)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new BSON.ObjectId();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "objectId",
            optional: true,
            default: () => new BSON.ObjectId()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    FISK 11: {"type":"NewExpression","start":164,"end":183,"loc":{"start":{"line":4,"column":70,"index":164},"end":{"line":4,"column":89,"index":183}},"callee":{"type":"MemberExpression","start":168,"end":181,"loc":{"start":{"line":4,"column":74,"index":168},"end":{"line":4,"column":87,"index":181}},"object":{"type":"Identifier","start":168,"end":172,"loc":{"start":{"line":4,"column":74,"index":168},"end":{"line":4,"column":78,"index":172},"identifierName":"BSON"},"name":"BSON"},"computed":false,"property":{"type":"Identifier","start":173,"end":181,"loc":{"start":{"line":4,"column":79,"index":173},"end":{"line":4,"column":87,"index":181},"identifierName":"ObjectId"},"name":"ObjectId"}},"arguments":[]}

      at visitRealmClassProperty (src/plugin/index.ts:329:17)
          at Array.map (<anonymous>)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new BSON.ObjectId();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "objectId",
            optional: true,
            default: () => new BSON.ObjectId()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    FISK 11: {"type":"NewExpression","start":175,"end":194,"loc":{"start":{"line":4,"column":81,"index":175},"end":{"line":4,"column":100,"index":194}},"callee":{"type":"MemberExpression","start":179,"end":192,"loc":{"start":{"line":4,"column":85,"index":179},"end":{"line":4,"column":98,"index":192}},"object":{"type":"Identifier","start":179,"end":183,"loc":{"start":{"line":4,"column":85,"index":179},"end":{"line":4,"column":89,"index":183},"identifierName":"BSON"},"name":"BSON"},"computed":false,"property":{"type":"Identifier","start":184,"end":192,"loc":{"start":{"line":4,"column":90,"index":184},"end":{"line":4,"column":98,"index":192},"identifierName":"ObjectId"},"name":"ObjectId"}},"arguments":[]}

      at visitRealmClassProperty (src/plugin/index.ts:329:17)
          at Array.map (<anonymous>)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new BSON.ObjectId();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "objectId",
            optional: true,
            default: () => new BSON.ObjectId()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    FISK 11: {"type":"NewExpression","start":175,"end":194,"loc":{"start":{"line":4,"column":81,"index":175},"end":{"line":4,"column":100,"index":194}},"callee":{"type":"MemberExpression","start":179,"end":192,"loc":{"start":{"line":4,"column":85,"index":179},"end":{"line":4,"column":98,"index":192}},"object":{"type":"Identifier","start":179,"end":183,"loc":{"start":{"line":4,"column":85,"index":179},"end":{"line":4,"column":89,"index":183},"identifierName":"BSON"},"name":"BSON"},"computed":false,"property":{"type":"Identifier","start":184,"end":192,"loc":{"start":{"line":4,"column":90,"index":184},"end":{"line":4,"column":98,"index":192},"identifierName":"ObjectId"},"name":"ObjectId"}},"arguments":[]}

      at visitRealmClassProperty (src/plugin/index.ts:329:17)
          at Array.map (<anonymous>)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new BSON.ObjectId();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "objectId",
            optional: true,
            default: () => new BSON.ObjectId()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    FISK 11: {"type":"NewExpression","start":149,"end":168,"loc":{"start":{"line":4,"column":55,"index":149},"end":{"line":4,"column":74,"index":168}},"callee":{"type":"MemberExpression","start":153,"end":166,"loc":{"start":{"line":4,"column":59,"index":153},"end":{"line":4,"column":72,"index":166}},"object":{"type":"Identifier","start":153,"end":157,"loc":{"start":{"line":4,"column":59,"index":153},"end":{"line":4,"column":63,"index":157},"identifierName":"BSON"},"name":"BSON"},"computed":false,"property":{"type":"Identifier","start":158,"end":166,"loc":{"start":{"line":4,"column":64,"index":158},"end":{"line":4,"column":72,"index":166},"identifierName":"ObjectId"},"name":"ObjectId"}},"arguments":[]}

      at visitRealmClassProperty (src/plugin/index.ts:329:17)
          at Array.map (<anonymous>)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new BSON.ObjectId();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "objectId",
            optional: true,
            default: () => new BSON.ObjectId()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "uuid"
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "uuid"
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "uuid"
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "uuid"
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "uuid",
            optional: true
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "uuid",
            optional: true
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "uuid",
            optional: true
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "uuid",
            optional: true
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "uuid",
            optional: true
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "uuid",
            optional: true
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "uuid",
            optional: true
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "uuid",
            optional: true
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "uuid",
            optional: true
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "uuid",
            optional: true
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "uuid",
            optional: true
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "uuid",
            optional: true
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    FISK 11: {"type":"NewExpression","start":166,"end":188,"loc":{"start":{"line":4,"column":72,"index":166},"end":{"line":4,"column":94,"index":188}},"callee":{"type":"MemberExpression","start":170,"end":186,"loc":{"start":{"line":4,"column":76,"index":170},"end":{"line":4,"column":92,"index":186}},"object":{"type":"MemberExpression","start":170,"end":181,"loc":{"start":{"line":4,"column":76,"index":170},"end":{"line":4,"column":87,"index":181}},"object":{"type":"Identifier","start":170,"end":175,"loc":{"start":{"line":4,"column":76,"index":170},"end":{"line":4,"column":81,"index":175},"identifierName":"Realm"},"name":"Realm"},"computed":false,"property":{"type":"Identifier","start":176,"end":181,"loc":{"start":{"line":4,"column":82,"index":176},"end":{"line":4,"column":87,"index":181},"identifierName":"Types"},"name":"Types"}},"computed":false,"property":{"type":"Identifier","start":182,"end":186,"loc":{"start":{"line":4,"column":88,"index":182},"end":{"line":4,"column":92,"index":186},"identifierName":"UUID"},"name":"UUID"}},"arguments":[]}

      at visitRealmClassProperty (src/plugin/index.ts:329:17)
          at Array.map (<anonymous>)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new Realm.Types.UUID();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "uuid",
            default: () => new Realm.Types.UUID()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    FISK 11: {"type":"NewExpression","start":160,"end":182,"loc":{"start":{"line":4,"column":66,"index":160},"end":{"line":4,"column":88,"index":182}},"callee":{"type":"MemberExpression","start":164,"end":180,"loc":{"start":{"line":4,"column":70,"index":164},"end":{"line":4,"column":86,"index":180}},"object":{"type":"MemberExpression","start":164,"end":175,"loc":{"start":{"line":4,"column":70,"index":164},"end":{"line":4,"column":81,"index":175}},"object":{"type":"Identifier","start":164,"end":169,"loc":{"start":{"line":4,"column":70,"index":164},"end":{"line":4,"column":75,"index":169},"identifierName":"Realm"},"name":"Realm"},"computed":false,"property":{"type":"Identifier","start":170,"end":175,"loc":{"start":{"line":4,"column":76,"index":170},"end":{"line":4,"column":81,"index":175},"identifierName":"Types"},"name":"Types"}},"computed":false,"property":{"type":"Identifier","start":176,"end":180,"loc":{"start":{"line":4,"column":82,"index":176},"end":{"line":4,"column":86,"index":180},"identifierName":"UUID"},"name":"UUID"}},"arguments":[]}

      at visitRealmClassProperty (src/plugin/index.ts:329:17)
          at Array.map (<anonymous>)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new Realm.Types.UUID();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "uuid",
            default: () => new Realm.Types.UUID()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    FISK 11: {"type":"NewExpression","start":165,"end":187,"loc":{"start":{"line":4,"column":71,"index":165},"end":{"line":4,"column":93,"index":187}},"callee":{"type":"MemberExpression","start":169,"end":185,"loc":{"start":{"line":4,"column":75,"index":169},"end":{"line":4,"column":91,"index":185}},"object":{"type":"MemberExpression","start":169,"end":180,"loc":{"start":{"line":4,"column":75,"index":169},"end":{"line":4,"column":86,"index":180}},"object":{"type":"Identifier","start":169,"end":174,"loc":{"start":{"line":4,"column":75,"index":169},"end":{"line":4,"column":80,"index":174},"identifierName":"Realm"},"name":"Realm"},"computed":false,"property":{"type":"Identifier","start":175,"end":180,"loc":{"start":{"line":4,"column":81,"index":175},"end":{"line":4,"column":86,"index":180},"identifierName":"Types"},"name":"Types"}},"computed":false,"property":{"type":"Identifier","start":181,"end":185,"loc":{"start":{"line":4,"column":87,"index":181},"end":{"line":4,"column":91,"index":185},"identifierName":"UUID"},"name":"UUID"}},"arguments":[]}

      at visitRealmClassProperty (src/plugin/index.ts:329:17)
          at Array.map (<anonymous>)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new Realm.Types.UUID();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "uuid",
            default: () => new Realm.Types.UUID()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    FISK 11: {"type":"NewExpression","start":159,"end":181,"loc":{"start":{"line":4,"column":65,"index":159},"end":{"line":4,"column":87,"index":181}},"callee":{"type":"MemberExpression","start":163,"end":179,"loc":{"start":{"line":4,"column":69,"index":163},"end":{"line":4,"column":85,"index":179}},"object":{"type":"MemberExpression","start":163,"end":174,"loc":{"start":{"line":4,"column":69,"index":163},"end":{"line":4,"column":80,"index":174}},"object":{"type":"Identifier","start":163,"end":168,"loc":{"start":{"line":4,"column":69,"index":163},"end":{"line":4,"column":74,"index":168},"identifierName":"Realm"},"name":"Realm"},"computed":false,"property":{"type":"Identifier","start":169,"end":174,"loc":{"start":{"line":4,"column":75,"index":169},"end":{"line":4,"column":80,"index":174},"identifierName":"Types"},"name":"Types"}},"computed":false,"property":{"type":"Identifier","start":175,"end":179,"loc":{"start":{"line":4,"column":81,"index":175},"end":{"line":4,"column":85,"index":179},"identifierName":"UUID"},"name":"UUID"}},"arguments":[]}

      at visitRealmClassProperty (src/plugin/index.ts:329:17)
          at Array.map (<anonymous>)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new Realm.Types.UUID();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "uuid",
            default: () => new Realm.Types.UUID()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    FISK 11: {"type":"NewExpression","start":148,"end":170,"loc":{"start":{"line":4,"column":54,"index":148},"end":{"line":4,"column":76,"index":170}},"callee":{"type":"MemberExpression","start":152,"end":168,"loc":{"start":{"line":4,"column":58,"index":152},"end":{"line":4,"column":74,"index":168}},"object":{"type":"MemberExpression","start":152,"end":163,"loc":{"start":{"line":4,"column":58,"index":152},"end":{"line":4,"column":69,"index":163}},"object":{"type":"Identifier","start":152,"end":157,"loc":{"start":{"line":4,"column":58,"index":152},"end":{"line":4,"column":63,"index":157},"identifierName":"Realm"},"name":"Realm"},"computed":false,"property":{"type":"Identifier","start":158,"end":163,"loc":{"start":{"line":4,"column":64,"index":158},"end":{"line":4,"column":69,"index":163},"identifierName":"Types"},"name":"Types"}},"computed":false,"property":{"type":"Identifier","start":164,"end":168,"loc":{"start":{"line":4,"column":70,"index":164},"end":{"line":4,"column":74,"index":168},"identifierName":"UUID"},"name":"UUID"}},"arguments":[]}

      at visitRealmClassProperty (src/plugin/index.ts:329:17)
          at Array.map (<anonymous>)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new Realm.Types.UUID();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "uuid",
            default: () => new Realm.Types.UUID()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    FISK 11: {"type":"NewExpression","start":167,"end":189,"loc":{"start":{"line":4,"column":73,"index":167},"end":{"line":4,"column":95,"index":189}},"callee":{"type":"MemberExpression","start":171,"end":187,"loc":{"start":{"line":4,"column":77,"index":171},"end":{"line":4,"column":93,"index":187}},"object":{"type":"MemberExpression","start":171,"end":182,"loc":{"start":{"line":4,"column":77,"index":171},"end":{"line":4,"column":88,"index":182}},"object":{"type":"Identifier","start":171,"end":176,"loc":{"start":{"line":4,"column":77,"index":171},"end":{"line":4,"column":82,"index":176},"identifierName":"Realm"},"name":"Realm"},"computed":false,"property":{"type":"Identifier","start":177,"end":182,"loc":{"start":{"line":4,"column":83,"index":177},"end":{"line":4,"column":88,"index":182},"identifierName":"Types"},"name":"Types"}},"computed":false,"property":{"type":"Identifier","start":183,"end":187,"loc":{"start":{"line":4,"column":89,"index":183},"end":{"line":4,"column":93,"index":187},"identifierName":"UUID"},"name":"UUID"}},"arguments":[]}

      at visitRealmClassProperty (src/plugin/index.ts:329:17)
          at Array.map (<anonymous>)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new Realm.Types.UUID();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "uuid",
            optional: true,
            default: () => new Realm.Types.UUID()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    FISK 11: {"type":"NewExpression","start":178,"end":200,"loc":{"start":{"line":4,"column":84,"index":178},"end":{"line":4,"column":106,"index":200}},"callee":{"type":"MemberExpression","start":182,"end":198,"loc":{"start":{"line":4,"column":88,"index":182},"end":{"line":4,"column":104,"index":198}},"object":{"type":"MemberExpression","start":182,"end":193,"loc":{"start":{"line":4,"column":88,"index":182},"end":{"line":4,"column":99,"index":193}},"object":{"type":"Identifier","start":182,"end":187,"loc":{"start":{"line":4,"column":88,"index":182},"end":{"line":4,"column":93,"index":187},"identifierName":"Realm"},"name":"Realm"},"computed":false,"property":{"type":"Identifier","start":188,"end":193,"loc":{"start":{"line":4,"column":94,"index":188},"end":{"line":4,"column":99,"index":193},"identifierName":"Types"},"name":"Types"}},"computed":false,"property":{"type":"Identifier","start":194,"end":198,"loc":{"start":{"line":4,"column":100,"index":194},"end":{"line":4,"column":104,"index":198},"identifierName":"UUID"},"name":"UUID"}},"arguments":[]}

      at visitRealmClassProperty (src/plugin/index.ts:329:17)
          at Array.map (<anonymous>)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new Realm.Types.UUID();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "uuid",
            optional: true,
            default: () => new Realm.Types.UUID()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    FISK 11: {"type":"NewExpression","start":178,"end":200,"loc":{"start":{"line":4,"column":84,"index":178},"end":{"line":4,"column":106,"index":200}},"callee":{"type":"MemberExpression","start":182,"end":198,"loc":{"start":{"line":4,"column":88,"index":182},"end":{"line":4,"column":104,"index":198}},"object":{"type":"MemberExpression","start":182,"end":193,"loc":{"start":{"line":4,"column":88,"index":182},"end":{"line":4,"column":99,"index":193}},"object":{"type":"Identifier","start":182,"end":187,"loc":{"start":{"line":4,"column":88,"index":182},"end":{"line":4,"column":93,"index":187},"identifierName":"Realm"},"name":"Realm"},"computed":false,"property":{"type":"Identifier","start":188,"end":193,"loc":{"start":{"line":4,"column":94,"index":188},"end":{"line":4,"column":99,"index":193},"identifierName":"Types"},"name":"Types"}},"computed":false,"property":{"type":"Identifier","start":194,"end":198,"loc":{"start":{"line":4,"column":100,"index":194},"end":{"line":4,"column":104,"index":198},"identifierName":"UUID"},"name":"UUID"}},"arguments":[]}

      at visitRealmClassProperty (src/plugin/index.ts:329:17)
          at Array.map (<anonymous>)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new Realm.Types.UUID();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "uuid",
            optional: true,
            default: () => new Realm.Types.UUID()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    FISK 11: {"type":"NewExpression","start":161,"end":183,"loc":{"start":{"line":4,"column":67,"index":161},"end":{"line":4,"column":89,"index":183}},"callee":{"type":"MemberExpression","start":165,"end":181,"loc":{"start":{"line":4,"column":71,"index":165},"end":{"line":4,"column":87,"index":181}},"object":{"type":"MemberExpression","start":165,"end":176,"loc":{"start":{"line":4,"column":71,"index":165},"end":{"line":4,"column":82,"index":176}},"object":{"type":"Identifier","start":165,"end":170,"loc":{"start":{"line":4,"column":71,"index":165},"end":{"line":4,"column":76,"index":170},"identifierName":"Realm"},"name":"Realm"},"computed":false,"property":{"type":"Identifier","start":171,"end":176,"loc":{"start":{"line":4,"column":77,"index":171},"end":{"line":4,"column":82,"index":176},"identifierName":"Types"},"name":"Types"}},"computed":false,"property":{"type":"Identifier","start":177,"end":181,"loc":{"start":{"line":4,"column":83,"index":177},"end":{"line":4,"column":87,"index":181},"identifierName":"UUID"},"name":"UUID"}},"arguments":[]}

      at visitRealmClassProperty (src/plugin/index.ts:329:17)
          at Array.map (<anonymous>)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new Realm.Types.UUID();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "uuid",
            optional: true,
            default: () => new Realm.Types.UUID()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    FISK 11: {"type":"NewExpression","start":172,"end":194,"loc":{"start":{"line":4,"column":78,"index":172},"end":{"line":4,"column":100,"index":194}},"callee":{"type":"MemberExpression","start":176,"end":192,"loc":{"start":{"line":4,"column":82,"index":176},"end":{"line":4,"column":98,"index":192}},"object":{"type":"MemberExpression","start":176,"end":187,"loc":{"start":{"line":4,"column":82,"index":176},"end":{"line":4,"column":93,"index":187}},"object":{"type":"Identifier","start":176,"end":181,"loc":{"start":{"line":4,"column":82,"index":176},"end":{"line":4,"column":87,"index":181},"identifierName":"Realm"},"name":"Realm"},"computed":false,"property":{"type":"Identifier","start":182,"end":187,"loc":{"start":{"line":4,"column":88,"index":182},"end":{"line":4,"column":93,"index":187},"identifierName":"Types"},"name":"Types"}},"computed":false,"property":{"type":"Identifier","start":188,"end":192,"loc":{"start":{"line":4,"column":94,"index":188},"end":{"line":4,"column":98,"index":192},"identifierName":"UUID"},"name":"UUID"}},"arguments":[]}

      at visitRealmClassProperty (src/plugin/index.ts:329:17)
          at Array.map (<anonymous>)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new Realm.Types.UUID();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "uuid",
            optional: true,
            default: () => new Realm.Types.UUID()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    FISK 11: {"type":"NewExpression","start":172,"end":194,"loc":{"start":{"line":4,"column":78,"index":172},"end":{"line":4,"column":100,"index":194}},"callee":{"type":"MemberExpression","start":176,"end":192,"loc":{"start":{"line":4,"column":82,"index":176},"end":{"line":4,"column":98,"index":192}},"object":{"type":"MemberExpression","start":176,"end":187,"loc":{"start":{"line":4,"column":82,"index":176},"end":{"line":4,"column":93,"index":187}},"object":{"type":"Identifier","start":176,"end":181,"loc":{"start":{"line":4,"column":82,"index":176},"end":{"line":4,"column":87,"index":181},"identifierName":"Realm"},"name":"Realm"},"computed":false,"property":{"type":"Identifier","start":182,"end":187,"loc":{"start":{"line":4,"column":88,"index":182},"end":{"line":4,"column":93,"index":187},"identifierName":"Types"},"name":"Types"}},"computed":false,"property":{"type":"Identifier","start":188,"end":192,"loc":{"start":{"line":4,"column":94,"index":188},"end":{"line":4,"column":98,"index":192},"identifierName":"UUID"},"name":"UUID"}},"arguments":[]}

      at visitRealmClassProperty (src/plugin/index.ts:329:17)
          at Array.map (<anonymous>)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new Realm.Types.UUID();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "uuid",
            optional: true,
            default: () => new Realm.Types.UUID()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    FISK 11: {"type":"NewExpression","start":166,"end":188,"loc":{"start":{"line":4,"column":72,"index":166},"end":{"line":4,"column":94,"index":188}},"callee":{"type":"MemberExpression","start":170,"end":186,"loc":{"start":{"line":4,"column":76,"index":170},"end":{"line":4,"column":92,"index":186}},"object":{"type":"MemberExpression","start":170,"end":181,"loc":{"start":{"line":4,"column":76,"index":170},"end":{"line":4,"column":87,"index":181}},"object":{"type":"Identifier","start":170,"end":175,"loc":{"start":{"line":4,"column":76,"index":170},"end":{"line":4,"column":81,"index":175},"identifierName":"Realm"},"name":"Realm"},"computed":false,"property":{"type":"Identifier","start":176,"end":181,"loc":{"start":{"line":4,"column":82,"index":176},"end":{"line":4,"column":87,"index":181},"identifierName":"Types"},"name":"Types"}},"computed":false,"property":{"type":"Identifier","start":182,"end":186,"loc":{"start":{"line":4,"column":88,"index":182},"end":{"line":4,"column":92,"index":186},"identifierName":"UUID"},"name":"UUID"}},"arguments":[]}

      at visitRealmClassProperty (src/plugin/index.ts:329:17)
          at Array.map (<anonymous>)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new Realm.Types.UUID();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "uuid",
            optional: true,
            default: () => new Realm.Types.UUID()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    FISK 11: {"type":"NewExpression","start":177,"end":199,"loc":{"start":{"line":4,"column":83,"index":177},"end":{"line":4,"column":105,"index":199}},"callee":{"type":"MemberExpression","start":181,"end":197,"loc":{"start":{"line":4,"column":87,"index":181},"end":{"line":4,"column":103,"index":197}},"object":{"type":"MemberExpression","start":181,"end":192,"loc":{"start":{"line":4,"column":87,"index":181},"end":{"line":4,"column":98,"index":192}},"object":{"type":"Identifier","start":181,"end":186,"loc":{"start":{"line":4,"column":87,"index":181},"end":{"line":4,"column":92,"index":186},"identifierName":"Realm"},"name":"Realm"},"computed":false,"property":{"type":"Identifier","start":187,"end":192,"loc":{"start":{"line":4,"column":93,"index":187},"end":{"line":4,"column":98,"index":192},"identifierName":"Types"},"name":"Types"}},"computed":false,"property":{"type":"Identifier","start":193,"end":197,"loc":{"start":{"line":4,"column":99,"index":193},"end":{"line":4,"column":103,"index":197},"identifierName":"UUID"},"name":"UUID"}},"arguments":[]}

      at visitRealmClassProperty (src/plugin/index.ts:329:17)
          at Array.map (<anonymous>)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new Realm.Types.UUID();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "uuid",
            optional: true,
            default: () => new Realm.Types.UUID()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    FISK 11: {"type":"NewExpression","start":177,"end":199,"loc":{"start":{"line":4,"column":83,"index":177},"end":{"line":4,"column":105,"index":199}},"callee":{"type":"MemberExpression","start":181,"end":197,"loc":{"start":{"line":4,"column":87,"index":181},"end":{"line":4,"column":103,"index":197}},"object":{"type":"MemberExpression","start":181,"end":192,"loc":{"start":{"line":4,"column":87,"index":181},"end":{"line":4,"column":98,"index":192}},"object":{"type":"Identifier","start":181,"end":186,"loc":{"start":{"line":4,"column":87,"index":181},"end":{"line":4,"column":92,"index":186},"identifierName":"Realm"},"name":"Realm"},"computed":false,"property":{"type":"Identifier","start":187,"end":192,"loc":{"start":{"line":4,"column":93,"index":187},"end":{"line":4,"column":98,"index":192},"identifierName":"Types"},"name":"Types"}},"computed":false,"property":{"type":"Identifier","start":193,"end":197,"loc":{"start":{"line":4,"column":99,"index":193},"end":{"line":4,"column":103,"index":197},"identifierName":"UUID"},"name":"UUID"}},"arguments":[]}

      at visitRealmClassProperty (src/plugin/index.ts:329:17)
          at Array.map (<anonymous>)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new Realm.Types.UUID();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "uuid",
            optional: true,
            default: () => new Realm.Types.UUID()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    FISK 11: {"type":"NewExpression","start":160,"end":182,"loc":{"start":{"line":4,"column":66,"index":160},"end":{"line":4,"column":88,"index":182}},"callee":{"type":"MemberExpression","start":164,"end":180,"loc":{"start":{"line":4,"column":70,"index":164},"end":{"line":4,"column":86,"index":180}},"object":{"type":"MemberExpression","start":164,"end":175,"loc":{"start":{"line":4,"column":70,"index":164},"end":{"line":4,"column":81,"index":175}},"object":{"type":"Identifier","start":164,"end":169,"loc":{"start":{"line":4,"column":70,"index":164},"end":{"line":4,"column":75,"index":169},"identifierName":"Realm"},"name":"Realm"},"computed":false,"property":{"type":"Identifier","start":170,"end":175,"loc":{"start":{"line":4,"column":76,"index":170},"end":{"line":4,"column":81,"index":175},"identifierName":"Types"},"name":"Types"}},"computed":false,"property":{"type":"Identifier","start":176,"end":180,"loc":{"start":{"line":4,"column":82,"index":176},"end":{"line":4,"column":86,"index":180},"identifierName":"UUID"},"name":"UUID"}},"arguments":[]}

      at visitRealmClassProperty (src/plugin/index.ts:329:17)
          at Array.map (<anonymous>)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new Realm.Types.UUID();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "uuid",
            optional: true,
            default: () => new Realm.Types.UUID()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    FISK 11: {"type":"NewExpression","start":171,"end":193,"loc":{"start":{"line":4,"column":77,"index":171},"end":{"line":4,"column":99,"index":193}},"callee":{"type":"MemberExpression","start":175,"end":191,"loc":{"start":{"line":4,"column":81,"index":175},"end":{"line":4,"column":97,"index":191}},"object":{"type":"MemberExpression","start":175,"end":186,"loc":{"start":{"line":4,"column":81,"index":175},"end":{"line":4,"column":92,"index":186}},"object":{"type":"Identifier","start":175,"end":180,"loc":{"start":{"line":4,"column":81,"index":175},"end":{"line":4,"column":86,"index":180},"identifierName":"Realm"},"name":"Realm"},"computed":false,"property":{"type":"Identifier","start":181,"end":186,"loc":{"start":{"line":4,"column":87,"index":181},"end":{"line":4,"column":92,"index":186},"identifierName":"Types"},"name":"Types"}},"computed":false,"property":{"type":"Identifier","start":187,"end":191,"loc":{"start":{"line":4,"column":93,"index":187},"end":{"line":4,"column":97,"index":191},"identifierName":"UUID"},"name":"UUID"}},"arguments":[]}

      at visitRealmClassProperty (src/plugin/index.ts:329:17)
          at Array.map (<anonymous>)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new Realm.Types.UUID();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "uuid",
            optional: true,
            default: () => new Realm.Types.UUID()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    FISK 11: {"type":"NewExpression","start":171,"end":193,"loc":{"start":{"line":4,"column":77,"index":171},"end":{"line":4,"column":99,"index":193}},"callee":{"type":"MemberExpression","start":175,"end":191,"loc":{"start":{"line":4,"column":81,"index":175},"end":{"line":4,"column":97,"index":191}},"object":{"type":"MemberExpression","start":175,"end":186,"loc":{"start":{"line":4,"column":81,"index":175},"end":{"line":4,"column":92,"index":186}},"object":{"type":"Identifier","start":175,"end":180,"loc":{"start":{"line":4,"column":81,"index":175},"end":{"line":4,"column":86,"index":180},"identifierName":"Realm"},"name":"Realm"},"computed":false,"property":{"type":"Identifier","start":181,"end":186,"loc":{"start":{"line":4,"column":87,"index":181},"end":{"line":4,"column":92,"index":186},"identifierName":"Types"},"name":"Types"}},"computed":false,"property":{"type":"Identifier","start":187,"end":191,"loc":{"start":{"line":4,"column":93,"index":187},"end":{"line":4,"column":97,"index":191},"identifierName":"UUID"},"name":"UUID"}},"arguments":[]}

      at visitRealmClassProperty (src/plugin/index.ts:329:17)
          at Array.map (<anonymous>)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new Realm.Types.UUID();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "uuid",
            optional: true,
            default: () => new Realm.Types.UUID()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    FISK 11: {"type":"NewExpression","start":149,"end":171,"loc":{"start":{"line":4,"column":55,"index":149},"end":{"line":4,"column":77,"index":171}},"callee":{"type":"MemberExpression","start":153,"end":169,"loc":{"start":{"line":4,"column":59,"index":153},"end":{"line":4,"column":75,"index":169}},"object":{"type":"MemberExpression","start":153,"end":164,"loc":{"start":{"line":4,"column":59,"index":153},"end":{"line":4,"column":70,"index":164}},"object":{"type":"Identifier","start":153,"end":158,"loc":{"start":{"line":4,"column":59,"index":153},"end":{"line":4,"column":64,"index":158},"identifierName":"Realm"},"name":"Realm"},"computed":false,"property":{"type":"Identifier","start":159,"end":164,"loc":{"start":{"line":4,"column":65,"index":159},"end":{"line":4,"column":70,"index":164},"identifierName":"Types"},"name":"Types"}},"computed":false,"property":{"type":"Identifier","start":165,"end":169,"loc":{"start":{"line":4,"column":71,"index":165},"end":{"line":4,"column":75,"index":169},"identifierName":"UUID"},"name":"UUID"}},"arguments":[]}

      at visitRealmClassProperty (src/plugin/index.ts:329:17)
          at Array.map (<anonymous>)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new Realm.Types.UUID();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "uuid",
            optional: true,
            default: () => new Realm.Types.UUID()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    FISK 11: {"type":"NewExpression","start":166,"end":182,"loc":{"start":{"line":4,"column":72,"index":166},"end":{"line":4,"column":88,"index":182}},"callee":{"type":"MemberExpression","start":170,"end":180,"loc":{"start":{"line":4,"column":76,"index":170},"end":{"line":4,"column":86,"index":180}},"object":{"type":"Identifier","start":170,"end":175,"loc":{"start":{"line":4,"column":76,"index":170},"end":{"line":4,"column":81,"index":175},"identifierName":"Types"},"name":"Types"},"computed":false,"property":{"type":"Identifier","start":176,"end":180,"loc":{"start":{"line":4,"column":82,"index":176},"end":{"line":4,"column":86,"index":180},"identifierName":"UUID"},"name":"UUID"}},"arguments":[]}

      at visitRealmClassProperty (src/plugin/index.ts:329:17)
          at Array.map (<anonymous>)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new Types.UUID();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "uuid",
            default: () => new Types.UUID()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    FISK 11: {"type":"NewExpression","start":160,"end":176,"loc":{"start":{"line":4,"column":66,"index":160},"end":{"line":4,"column":82,"index":176}},"callee":{"type":"MemberExpression","start":164,"end":174,"loc":{"start":{"line":4,"column":70,"index":164},"end":{"line":4,"column":80,"index":174}},"object":{"type":"Identifier","start":164,"end":169,"loc":{"start":{"line":4,"column":70,"index":164},"end":{"line":4,"column":75,"index":169},"identifierName":"Types"},"name":"Types"},"computed":false,"property":{"type":"Identifier","start":170,"end":174,"loc":{"start":{"line":4,"column":76,"index":170},"end":{"line":4,"column":80,"index":174},"identifierName":"UUID"},"name":"UUID"}},"arguments":[]}

      at visitRealmClassProperty (src/plugin/index.ts:329:17)
          at Array.map (<anonymous>)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new Types.UUID();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "uuid",
            default: () => new Types.UUID()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    FISK 11: {"type":"NewExpression","start":165,"end":181,"loc":{"start":{"line":4,"column":71,"index":165},"end":{"line":4,"column":87,"index":181}},"callee":{"type":"MemberExpression","start":169,"end":179,"loc":{"start":{"line":4,"column":75,"index":169},"end":{"line":4,"column":85,"index":179}},"object":{"type":"Identifier","start":169,"end":174,"loc":{"start":{"line":4,"column":75,"index":169},"end":{"line":4,"column":80,"index":174},"identifierName":"Types"},"name":"Types"},"computed":false,"property":{"type":"Identifier","start":175,"end":179,"loc":{"start":{"line":4,"column":81,"index":175},"end":{"line":4,"column":85,"index":179},"identifierName":"UUID"},"name":"UUID"}},"arguments":[]}

      at visitRealmClassProperty (src/plugin/index.ts:329:17)
          at Array.map (<anonymous>)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new Types.UUID();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "uuid",
            default: () => new Types.UUID()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    FISK 11: {"type":"NewExpression","start":159,"end":175,"loc":{"start":{"line":4,"column":65,"index":159},"end":{"line":4,"column":81,"index":175}},"callee":{"type":"MemberExpression","start":163,"end":173,"loc":{"start":{"line":4,"column":69,"index":163},"end":{"line":4,"column":79,"index":173}},"object":{"type":"Identifier","start":163,"end":168,"loc":{"start":{"line":4,"column":69,"index":163},"end":{"line":4,"column":74,"index":168},"identifierName":"Types"},"name":"Types"},"computed":false,"property":{"type":"Identifier","start":169,"end":173,"loc":{"start":{"line":4,"column":75,"index":169},"end":{"line":4,"column":79,"index":173},"identifierName":"UUID"},"name":"UUID"}},"arguments":[]}

      at visitRealmClassProperty (src/plugin/index.ts:329:17)
          at Array.map (<anonymous>)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new Types.UUID();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "uuid",
            default: () => new Types.UUID()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    FISK 11: {"type":"NewExpression","start":148,"end":164,"loc":{"start":{"line":4,"column":54,"index":148},"end":{"line":4,"column":70,"index":164}},"callee":{"type":"MemberExpression","start":152,"end":162,"loc":{"start":{"line":4,"column":58,"index":152},"end":{"line":4,"column":68,"index":162}},"object":{"type":"Identifier","start":152,"end":157,"loc":{"start":{"line":4,"column":58,"index":152},"end":{"line":4,"column":63,"index":157},"identifierName":"Types"},"name":"Types"},"computed":false,"property":{"type":"Identifier","start":158,"end":162,"loc":{"start":{"line":4,"column":64,"index":158},"end":{"line":4,"column":68,"index":162},"identifierName":"UUID"},"name":"UUID"}},"arguments":[]}

      at visitRealmClassProperty (src/plugin/index.ts:329:17)
          at Array.map (<anonymous>)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new Types.UUID();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "uuid",
            default: () => new Types.UUID()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    FISK 11: {"type":"NewExpression","start":167,"end":183,"loc":{"start":{"line":4,"column":73,"index":167},"end":{"line":4,"column":89,"index":183}},"callee":{"type":"MemberExpression","start":171,"end":181,"loc":{"start":{"line":4,"column":77,"index":171},"end":{"line":4,"column":87,"index":181}},"object":{"type":"Identifier","start":171,"end":176,"loc":{"start":{"line":4,"column":77,"index":171},"end":{"line":4,"column":82,"index":176},"identifierName":"Types"},"name":"Types"},"computed":false,"property":{"type":"Identifier","start":177,"end":181,"loc":{"start":{"line":4,"column":83,"index":177},"end":{"line":4,"column":87,"index":181},"identifierName":"UUID"},"name":"UUID"}},"arguments":[]}

      at visitRealmClassProperty (src/plugin/index.ts:329:17)
          at Array.map (<anonymous>)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new Types.UUID();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "uuid",
            optional: true,
            default: () => new Types.UUID()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    FISK 11: {"type":"NewExpression","start":178,"end":194,"loc":{"start":{"line":4,"column":84,"index":178},"end":{"line":4,"column":100,"index":194}},"callee":{"type":"MemberExpression","start":182,"end":192,"loc":{"start":{"line":4,"column":88,"index":182},"end":{"line":4,"column":98,"index":192}},"object":{"type":"Identifier","start":182,"end":187,"loc":{"start":{"line":4,"column":88,"index":182},"end":{"line":4,"column":93,"index":187},"identifierName":"Types"},"name":"Types"},"computed":false,"property":{"type":"Identifier","start":188,"end":192,"loc":{"start":{"line":4,"column":94,"index":188},"end":{"line":4,"column":98,"index":192},"identifierName":"UUID"},"name":"UUID"}},"arguments":[]}

      at visitRealmClassProperty (src/plugin/index.ts:329:17)
          at Array.map (<anonymous>)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new Types.UUID();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "uuid",
            optional: true,
            default: () => new Types.UUID()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    FISK 11: {"type":"NewExpression","start":178,"end":194,"loc":{"start":{"line":4,"column":84,"index":178},"end":{"line":4,"column":100,"index":194}},"callee":{"type":"MemberExpression","start":182,"end":192,"loc":{"start":{"line":4,"column":88,"index":182},"end":{"line":4,"column":98,"index":192}},"object":{"type":"Identifier","start":182,"end":187,"loc":{"start":{"line":4,"column":88,"index":182},"end":{"line":4,"column":93,"index":187},"identifierName":"Types"},"name":"Types"},"computed":false,"property":{"type":"Identifier","start":188,"end":192,"loc":{"start":{"line":4,"column":94,"index":188},"end":{"line":4,"column":98,"index":192},"identifierName":"UUID"},"name":"UUID"}},"arguments":[]}

      at visitRealmClassProperty (src/plugin/index.ts:329:17)
          at Array.map (<anonymous>)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new Types.UUID();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "uuid",
            optional: true,
            default: () => new Types.UUID()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    FISK 11: {"type":"NewExpression","start":161,"end":177,"loc":{"start":{"line":4,"column":67,"index":161},"end":{"line":4,"column":83,"index":177}},"callee":{"type":"MemberExpression","start":165,"end":175,"loc":{"start":{"line":4,"column":71,"index":165},"end":{"line":4,"column":81,"index":175}},"object":{"type":"Identifier","start":165,"end":170,"loc":{"start":{"line":4,"column":71,"index":165},"end":{"line":4,"column":76,"index":170},"identifierName":"Types"},"name":"Types"},"computed":false,"property":{"type":"Identifier","start":171,"end":175,"loc":{"start":{"line":4,"column":77,"index":171},"end":{"line":4,"column":81,"index":175},"identifierName":"UUID"},"name":"UUID"}},"arguments":[]}

      at visitRealmClassProperty (src/plugin/index.ts:329:17)
          at Array.map (<anonymous>)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new Types.UUID();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "uuid",
            optional: true,
            default: () => new Types.UUID()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    FISK 11: {"type":"NewExpression","start":172,"end":188,"loc":{"start":{"line":4,"column":78,"index":172},"end":{"line":4,"column":94,"index":188}},"callee":{"type":"MemberExpression","start":176,"end":186,"loc":{"start":{"line":4,"column":82,"index":176},"end":{"line":4,"column":92,"index":186}},"object":{"type":"Identifier","start":176,"end":181,"loc":{"start":{"line":4,"column":82,"index":176},"end":{"line":4,"column":87,"index":181},"identifierName":"Types"},"name":"Types"},"computed":false,"property":{"type":"Identifier","start":182,"end":186,"loc":{"start":{"line":4,"column":88,"index":182},"end":{"line":4,"column":92,"index":186},"identifierName":"UUID"},"name":"UUID"}},"arguments":[]}

      at visitRealmClassProperty (src/plugin/index.ts:329:17)
          at Array.map (<anonymous>)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new Types.UUID();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "uuid",
            optional: true,
            default: () => new Types.UUID()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    FISK 11: {"type":"NewExpression","start":172,"end":188,"loc":{"start":{"line":4,"column":78,"index":172},"end":{"line":4,"column":94,"index":188}},"callee":{"type":"MemberExpression","start":176,"end":186,"loc":{"start":{"line":4,"column":82,"index":176},"end":{"line":4,"column":92,"index":186}},"object":{"type":"Identifier","start":176,"end":181,"loc":{"start":{"line":4,"column":82,"index":176},"end":{"line":4,"column":87,"index":181},"identifierName":"Types"},"name":"Types"},"computed":false,"property":{"type":"Identifier","start":182,"end":186,"loc":{"start":{"line":4,"column":88,"index":182},"end":{"line":4,"column":92,"index":186},"identifierName":"UUID"},"name":"UUID"}},"arguments":[]}

      at visitRealmClassProperty (src/plugin/index.ts:329:17)
          at Array.map (<anonymous>)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new Types.UUID();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "uuid",
            optional: true,
            default: () => new Types.UUID()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    FISK 11: {"type":"NewExpression","start":166,"end":182,"loc":{"start":{"line":4,"column":72,"index":166},"end":{"line":4,"column":88,"index":182}},"callee":{"type":"MemberExpression","start":170,"end":180,"loc":{"start":{"line":4,"column":76,"index":170},"end":{"line":4,"column":86,"index":180}},"object":{"type":"Identifier","start":170,"end":175,"loc":{"start":{"line":4,"column":76,"index":170},"end":{"line":4,"column":81,"index":175},"identifierName":"Types"},"name":"Types"},"computed":false,"property":{"type":"Identifier","start":176,"end":180,"loc":{"start":{"line":4,"column":82,"index":176},"end":{"line":4,"column":86,"index":180},"identifierName":"UUID"},"name":"UUID"}},"arguments":[]}

      at visitRealmClassProperty (src/plugin/index.ts:329:17)
          at Array.map (<anonymous>)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new Types.UUID();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "uuid",
            optional: true,
            default: () => new Types.UUID()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    FISK 11: {"type":"NewExpression","start":177,"end":193,"loc":{"start":{"line":4,"column":83,"index":177},"end":{"line":4,"column":99,"index":193}},"callee":{"type":"MemberExpression","start":181,"end":191,"loc":{"start":{"line":4,"column":87,"index":181},"end":{"line":4,"column":97,"index":191}},"object":{"type":"Identifier","start":181,"end":186,"loc":{"start":{"line":4,"column":87,"index":181},"end":{"line":4,"column":92,"index":186},"identifierName":"Types"},"name":"Types"},"computed":false,"property":{"type":"Identifier","start":187,"end":191,"loc":{"start":{"line":4,"column":93,"index":187},"end":{"line":4,"column":97,"index":191},"identifierName":"UUID"},"name":"UUID"}},"arguments":[]}

      at visitRealmClassProperty (src/plugin/index.ts:329:17)
          at Array.map (<anonymous>)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new Types.UUID();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "uuid",
            optional: true,
            default: () => new Types.UUID()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    FISK 11: {"type":"NewExpression","start":177,"end":193,"loc":{"start":{"line":4,"column":83,"index":177},"end":{"line":4,"column":99,"index":193}},"callee":{"type":"MemberExpression","start":181,"end":191,"loc":{"start":{"line":4,"column":87,"index":181},"end":{"line":4,"column":97,"index":191}},"object":{"type":"Identifier","start":181,"end":186,"loc":{"start":{"line":4,"column":87,"index":181},"end":{"line":4,"column":92,"index":186},"identifierName":"Types"},"name":"Types"},"computed":false,"property":{"type":"Identifier","start":187,"end":191,"loc":{"start":{"line":4,"column":93,"index":187},"end":{"line":4,"column":97,"index":191},"identifierName":"UUID"},"name":"UUID"}},"arguments":[]}

      at visitRealmClassProperty (src/plugin/index.ts:329:17)
          at Array.map (<anonymous>)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new Types.UUID();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "uuid",
            optional: true,
            default: () => new Types.UUID()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    FISK 11: {"type":"NewExpression","start":160,"end":176,"loc":{"start":{"line":4,"column":66,"index":160},"end":{"line":4,"column":82,"index":176}},"callee":{"type":"MemberExpression","start":164,"end":174,"loc":{"start":{"line":4,"column":70,"index":164},"end":{"line":4,"column":80,"index":174}},"object":{"type":"Identifier","start":164,"end":169,"loc":{"start":{"line":4,"column":70,"index":164},"end":{"line":4,"column":75,"index":169},"identifierName":"Types"},"name":"Types"},"computed":false,"property":{"type":"Identifier","start":170,"end":174,"loc":{"start":{"line":4,"column":76,"index":170},"end":{"line":4,"column":80,"index":174},"identifierName":"UUID"},"name":"UUID"}},"arguments":[]}

      at visitRealmClassProperty (src/plugin/index.ts:329:17)
          at Array.map (<anonymous>)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new Types.UUID();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "uuid",
            optional: true,
            default: () => new Types.UUID()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    FISK 11: {"type":"NewExpression","start":171,"end":187,"loc":{"start":{"line":4,"column":77,"index":171},"end":{"line":4,"column":93,"index":187}},"callee":{"type":"MemberExpression","start":175,"end":185,"loc":{"start":{"line":4,"column":81,"index":175},"end":{"line":4,"column":91,"index":185}},"object":{"type":"Identifier","start":175,"end":180,"loc":{"start":{"line":4,"column":81,"index":175},"end":{"line":4,"column":86,"index":180},"identifierName":"Types"},"name":"Types"},"computed":false,"property":{"type":"Identifier","start":181,"end":185,"loc":{"start":{"line":4,"column":87,"index":181},"end":{"line":4,"column":91,"index":185},"identifierName":"UUID"},"name":"UUID"}},"arguments":[]}

      at visitRealmClassProperty (src/plugin/index.ts:329:17)
          at Array.map (<anonymous>)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new Types.UUID();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "uuid",
            optional: true,
            default: () => new Types.UUID()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    FISK 11: {"type":"NewExpression","start":171,"end":187,"loc":{"start":{"line":4,"column":77,"index":171},"end":{"line":4,"column":93,"index":187}},"callee":{"type":"MemberExpression","start":175,"end":185,"loc":{"start":{"line":4,"column":81,"index":175},"end":{"line":4,"column":91,"index":185}},"object":{"type":"Identifier","start":175,"end":180,"loc":{"start":{"line":4,"column":81,"index":175},"end":{"line":4,"column":86,"index":180},"identifierName":"Types"},"name":"Types"},"computed":false,"property":{"type":"Identifier","start":181,"end":185,"loc":{"start":{"line":4,"column":87,"index":181},"end":{"line":4,"column":91,"index":185},"identifierName":"UUID"},"name":"UUID"}},"arguments":[]}

      at visitRealmClassProperty (src/plugin/index.ts:329:17)
          at Array.map (<anonymous>)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new Types.UUID();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "uuid",
            optional: true,
            default: () => new Types.UUID()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    FISK 11: {"type":"NewExpression","start":149,"end":165,"loc":{"start":{"line":4,"column":55,"index":149},"end":{"line":4,"column":71,"index":165}},"callee":{"type":"MemberExpression","start":153,"end":163,"loc":{"start":{"line":4,"column":59,"index":153},"end":{"line":4,"column":69,"index":163}},"object":{"type":"Identifier","start":153,"end":158,"loc":{"start":{"line":4,"column":59,"index":153},"end":{"line":4,"column":64,"index":158},"identifierName":"Types"},"name":"Types"},"computed":false,"property":{"type":"Identifier","start":159,"end":163,"loc":{"start":{"line":4,"column":65,"index":159},"end":{"line":4,"column":69,"index":163},"identifierName":"UUID"},"name":"UUID"}},"arguments":[]}

      at visitRealmClassProperty (src/plugin/index.ts:329:17)
          at Array.map (<anonymous>)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new Types.UUID();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "uuid",
            optional: true,
            default: () => new Types.UUID()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    FISK 11: {"type":"NewExpression","start":166,"end":187,"loc":{"start":{"line":4,"column":72,"index":166},"end":{"line":4,"column":93,"index":187}},"callee":{"type":"MemberExpression","start":170,"end":185,"loc":{"start":{"line":4,"column":76,"index":170},"end":{"line":4,"column":91,"index":185}},"object":{"type":"MemberExpression","start":170,"end":180,"loc":{"start":{"line":4,"column":76,"index":170},"end":{"line":4,"column":86,"index":180}},"object":{"type":"Identifier","start":170,"end":175,"loc":{"start":{"line":4,"column":76,"index":170},"end":{"line":4,"column":81,"index":175},"identifierName":"Realm"},"name":"Realm"},"computed":false,"property":{"type":"Identifier","start":176,"end":180,"loc":{"start":{"line":4,"column":82,"index":176},"end":{"line":4,"column":86,"index":180},"identifierName":"BSON"},"name":"BSON"}},"computed":false,"property":{"type":"Identifier","start":181,"end":185,"loc":{"start":{"line":4,"column":87,"index":181},"end":{"line":4,"column":91,"index":185},"identifierName":"UUID"},"name":"UUID"}},"arguments":[]}

      at visitRealmClassProperty (src/plugin/index.ts:329:17)
          at Array.map (<anonymous>)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new Realm.BSON.UUID();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "uuid",
            default: () => new Realm.BSON.UUID()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    FISK 11: {"type":"NewExpression","start":160,"end":181,"loc":{"start":{"line":4,"column":66,"index":160},"end":{"line":4,"column":87,"index":181}},"callee":{"type":"MemberExpression","start":164,"end":179,"loc":{"start":{"line":4,"column":70,"index":164},"end":{"line":4,"column":85,"index":179}},"object":{"type":"MemberExpression","start":164,"end":174,"loc":{"start":{"line":4,"column":70,"index":164},"end":{"line":4,"column":80,"index":174}},"object":{"type":"Identifier","start":164,"end":169,"loc":{"start":{"line":4,"column":70,"index":164},"end":{"line":4,"column":75,"index":169},"identifierName":"Realm"},"name":"Realm"},"computed":false,"property":{"type":"Identifier","start":170,"end":174,"loc":{"start":{"line":4,"column":76,"index":170},"end":{"line":4,"column":80,"index":174},"identifierName":"BSON"},"name":"BSON"}},"computed":false,"property":{"type":"Identifier","start":175,"end":179,"loc":{"start":{"line":4,"column":81,"index":175},"end":{"line":4,"column":85,"index":179},"identifierName":"UUID"},"name":"UUID"}},"arguments":[]}

      at visitRealmClassProperty (src/plugin/index.ts:329:17)
          at Array.map (<anonymous>)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new Realm.BSON.UUID();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "uuid",
            default: () => new Realm.BSON.UUID()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    FISK 11: {"type":"NewExpression","start":165,"end":186,"loc":{"start":{"line":4,"column":71,"index":165},"end":{"line":4,"column":92,"index":186}},"callee":{"type":"MemberExpression","start":169,"end":184,"loc":{"start":{"line":4,"column":75,"index":169},"end":{"line":4,"column":90,"index":184}},"object":{"type":"MemberExpression","start":169,"end":179,"loc":{"start":{"line":4,"column":75,"index":169},"end":{"line":4,"column":85,"index":179}},"object":{"type":"Identifier","start":169,"end":174,"loc":{"start":{"line":4,"column":75,"index":169},"end":{"line":4,"column":80,"index":174},"identifierName":"Realm"},"name":"Realm"},"computed":false,"property":{"type":"Identifier","start":175,"end":179,"loc":{"start":{"line":4,"column":81,"index":175},"end":{"line":4,"column":85,"index":179},"identifierName":"BSON"},"name":"BSON"}},"computed":false,"property":{"type":"Identifier","start":180,"end":184,"loc":{"start":{"line":4,"column":86,"index":180},"end":{"line":4,"column":90,"index":184},"identifierName":"UUID"},"name":"UUID"}},"arguments":[]}

      at visitRealmClassProperty (src/plugin/index.ts:329:17)
          at Array.map (<anonymous>)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new Realm.BSON.UUID();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "uuid",
            default: () => new Realm.BSON.UUID()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    FISK 11: {"type":"NewExpression","start":159,"end":180,"loc":{"start":{"line":4,"column":65,"index":159},"end":{"line":4,"column":86,"index":180}},"callee":{"type":"MemberExpression","start":163,"end":178,"loc":{"start":{"line":4,"column":69,"index":163},"end":{"line":4,"column":84,"index":178}},"object":{"type":"MemberExpression","start":163,"end":173,"loc":{"start":{"line":4,"column":69,"index":163},"end":{"line":4,"column":79,"index":173}},"object":{"type":"Identifier","start":163,"end":168,"loc":{"start":{"line":4,"column":69,"index":163},"end":{"line":4,"column":74,"index":168},"identifierName":"Realm"},"name":"Realm"},"computed":false,"property":{"type":"Identifier","start":169,"end":173,"loc":{"start":{"line":4,"column":75,"index":169},"end":{"line":4,"column":79,"index":173},"identifierName":"BSON"},"name":"BSON"}},"computed":false,"property":{"type":"Identifier","start":174,"end":178,"loc":{"start":{"line":4,"column":80,"index":174},"end":{"line":4,"column":84,"index":178},"identifierName":"UUID"},"name":"UUID"}},"arguments":[]}

      at visitRealmClassProperty (src/plugin/index.ts:329:17)
          at Array.map (<anonymous>)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new Realm.BSON.UUID();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "uuid",
            default: () => new Realm.BSON.UUID()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    FISK 11: {"type":"NewExpression","start":148,"end":169,"loc":{"start":{"line":4,"column":54,"index":148},"end":{"line":4,"column":75,"index":169}},"callee":{"type":"MemberExpression","start":152,"end":167,"loc":{"start":{"line":4,"column":58,"index":152},"end":{"line":4,"column":73,"index":167}},"object":{"type":"MemberExpression","start":152,"end":162,"loc":{"start":{"line":4,"column":58,"index":152},"end":{"line":4,"column":68,"index":162}},"object":{"type":"Identifier","start":152,"end":157,"loc":{"start":{"line":4,"column":58,"index":152},"end":{"line":4,"column":63,"index":157},"identifierName":"Realm"},"name":"Realm"},"computed":false,"property":{"type":"Identifier","start":158,"end":162,"loc":{"start":{"line":4,"column":64,"index":158},"end":{"line":4,"column":68,"index":162},"identifierName":"BSON"},"name":"BSON"}},"computed":false,"property":{"type":"Identifier","start":163,"end":167,"loc":{"start":{"line":4,"column":69,"index":163},"end":{"line":4,"column":73,"index":167},"identifierName":"UUID"},"name":"UUID"}},"arguments":[]}

      at visitRealmClassProperty (src/plugin/index.ts:329:17)
          at Array.map (<anonymous>)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new Realm.BSON.UUID();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "uuid",
            default: () => new Realm.BSON.UUID()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    FISK 11: {"type":"NewExpression","start":167,"end":188,"loc":{"start":{"line":4,"column":73,"index":167},"end":{"line":4,"column":94,"index":188}},"callee":{"type":"MemberExpression","start":171,"end":186,"loc":{"start":{"line":4,"column":77,"index":171},"end":{"line":4,"column":92,"index":186}},"object":{"type":"MemberExpression","start":171,"end":181,"loc":{"start":{"line":4,"column":77,"index":171},"end":{"line":4,"column":87,"index":181}},"object":{"type":"Identifier","start":171,"end":176,"loc":{"start":{"line":4,"column":77,"index":171},"end":{"line":4,"column":82,"index":176},"identifierName":"Realm"},"name":"Realm"},"computed":false,"property":{"type":"Identifier","start":177,"end":181,"loc":{"start":{"line":4,"column":83,"index":177},"end":{"line":4,"column":87,"index":181},"identifierName":"BSON"},"name":"BSON"}},"computed":false,"property":{"type":"Identifier","start":182,"end":186,"loc":{"start":{"line":4,"column":88,"index":182},"end":{"line":4,"column":92,"index":186},"identifierName":"UUID"},"name":"UUID"}},"arguments":[]}

      at visitRealmClassProperty (src/plugin/index.ts:329:17)
          at Array.map (<anonymous>)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new Realm.BSON.UUID();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "uuid",
            optional: true,
            default: () => new Realm.BSON.UUID()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    FISK 11: {"type":"NewExpression","start":178,"end":199,"loc":{"start":{"line":4,"column":84,"index":178},"end":{"line":4,"column":105,"index":199}},"callee":{"type":"MemberExpression","start":182,"end":197,"loc":{"start":{"line":4,"column":88,"index":182},"end":{"line":4,"column":103,"index":197}},"object":{"type":"MemberExpression","start":182,"end":192,"loc":{"start":{"line":4,"column":88,"index":182},"end":{"line":4,"column":98,"index":192}},"object":{"type":"Identifier","start":182,"end":187,"loc":{"start":{"line":4,"column":88,"index":182},"end":{"line":4,"column":93,"index":187},"identifierName":"Realm"},"name":"Realm"},"computed":false,"property":{"type":"Identifier","start":188,"end":192,"loc":{"start":{"line":4,"column":94,"index":188},"end":{"line":4,"column":98,"index":192},"identifierName":"BSON"},"name":"BSON"}},"computed":false,"property":{"type":"Identifier","start":193,"end":197,"loc":{"start":{"line":4,"column":99,"index":193},"end":{"line":4,"column":103,"index":197},"identifierName":"UUID"},"name":"UUID"}},"arguments":[]}

      at visitRealmClassProperty (src/plugin/index.ts:329:17)
          at Array.map (<anonymous>)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new Realm.BSON.UUID();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "uuid",
            optional: true,
            default: () => new Realm.BSON.UUID()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    FISK 11: {"type":"NewExpression","start":178,"end":199,"loc":{"start":{"line":4,"column":84,"index":178},"end":{"line":4,"column":105,"index":199}},"callee":{"type":"MemberExpression","start":182,"end":197,"loc":{"start":{"line":4,"column":88,"index":182},"end":{"line":4,"column":103,"index":197}},"object":{"type":"MemberExpression","start":182,"end":192,"loc":{"start":{"line":4,"column":88,"index":182},"end":{"line":4,"column":98,"index":192}},"object":{"type":"Identifier","start":182,"end":187,"loc":{"start":{"line":4,"column":88,"index":182},"end":{"line":4,"column":93,"index":187},"identifierName":"Realm"},"name":"Realm"},"computed":false,"property":{"type":"Identifier","start":188,"end":192,"loc":{"start":{"line":4,"column":94,"index":188},"end":{"line":4,"column":98,"index":192},"identifierName":"BSON"},"name":"BSON"}},"computed":false,"property":{"type":"Identifier","start":193,"end":197,"loc":{"start":{"line":4,"column":99,"index":193},"end":{"line":4,"column":103,"index":197},"identifierName":"UUID"},"name":"UUID"}},"arguments":[]}

      at visitRealmClassProperty (src/plugin/index.ts:329:17)
          at Array.map (<anonymous>)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new Realm.BSON.UUID();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "uuid",
            optional: true,
            default: () => new Realm.BSON.UUID()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    FISK 11: {"type":"NewExpression","start":161,"end":182,"loc":{"start":{"line":4,"column":67,"index":161},"end":{"line":4,"column":88,"index":182}},"callee":{"type":"MemberExpression","start":165,"end":180,"loc":{"start":{"line":4,"column":71,"index":165},"end":{"line":4,"column":86,"index":180}},"object":{"type":"MemberExpression","start":165,"end":175,"loc":{"start":{"line":4,"column":71,"index":165},"end":{"line":4,"column":81,"index":175}},"object":{"type":"Identifier","start":165,"end":170,"loc":{"start":{"line":4,"column":71,"index":165},"end":{"line":4,"column":76,"index":170},"identifierName":"Realm"},"name":"Realm"},"computed":false,"property":{"type":"Identifier","start":171,"end":175,"loc":{"start":{"line":4,"column":77,"index":171},"end":{"line":4,"column":81,"index":175},"identifierName":"BSON"},"name":"BSON"}},"computed":false,"property":{"type":"Identifier","start":176,"end":180,"loc":{"start":{"line":4,"column":82,"index":176},"end":{"line":4,"column":86,"index":180},"identifierName":"UUID"},"name":"UUID"}},"arguments":[]}

      at visitRealmClassProperty (src/plugin/index.ts:329:17)
          at Array.map (<anonymous>)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new Realm.BSON.UUID();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "uuid",
            optional: true,
            default: () => new Realm.BSON.UUID()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    FISK 11: {"type":"NewExpression","start":172,"end":193,"loc":{"start":{"line":4,"column":78,"index":172},"end":{"line":4,"column":99,"index":193}},"callee":{"type":"MemberExpression","start":176,"end":191,"loc":{"start":{"line":4,"column":82,"index":176},"end":{"line":4,"column":97,"index":191}},"object":{"type":"MemberExpression","start":176,"end":186,"loc":{"start":{"line":4,"column":82,"index":176},"end":{"line":4,"column":92,"index":186}},"object":{"type":"Identifier","start":176,"end":181,"loc":{"start":{"line":4,"column":82,"index":176},"end":{"line":4,"column":87,"index":181},"identifierName":"Realm"},"name":"Realm"},"computed":false,"property":{"type":"Identifier","start":182,"end":186,"loc":{"start":{"line":4,"column":88,"index":182},"end":{"line":4,"column":92,"index":186},"identifierName":"BSON"},"name":"BSON"}},"computed":false,"property":{"type":"Identifier","start":187,"end":191,"loc":{"start":{"line":4,"column":93,"index":187},"end":{"line":4,"column":97,"index":191},"identifierName":"UUID"},"name":"UUID"}},"arguments":[]}

      at visitRealmClassProperty (src/plugin/index.ts:329:17)
          at Array.map (<anonymous>)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new Realm.BSON.UUID();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "uuid",
            optional: true,
            default: () => new Realm.BSON.UUID()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    FISK 11: {"type":"NewExpression","start":172,"end":193,"loc":{"start":{"line":4,"column":78,"index":172},"end":{"line":4,"column":99,"index":193}},"callee":{"type":"MemberExpression","start":176,"end":191,"loc":{"start":{"line":4,"column":82,"index":176},"end":{"line":4,"column":97,"index":191}},"object":{"type":"MemberExpression","start":176,"end":186,"loc":{"start":{"line":4,"column":82,"index":176},"end":{"line":4,"column":92,"index":186}},"object":{"type":"Identifier","start":176,"end":181,"loc":{"start":{"line":4,"column":82,"index":176},"end":{"line":4,"column":87,"index":181},"identifierName":"Realm"},"name":"Realm"},"computed":false,"property":{"type":"Identifier","start":182,"end":186,"loc":{"start":{"line":4,"column":88,"index":182},"end":{"line":4,"column":92,"index":186},"identifierName":"BSON"},"name":"BSON"}},"computed":false,"property":{"type":"Identifier","start":187,"end":191,"loc":{"start":{"line":4,"column":93,"index":187},"end":{"line":4,"column":97,"index":191},"identifierName":"UUID"},"name":"UUID"}},"arguments":[]}

      at visitRealmClassProperty (src/plugin/index.ts:329:17)
          at Array.map (<anonymous>)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new Realm.BSON.UUID();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "uuid",
            optional: true,
            default: () => new Realm.BSON.UUID()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    FISK 11: {"type":"NewExpression","start":166,"end":187,"loc":{"start":{"line":4,"column":72,"index":166},"end":{"line":4,"column":93,"index":187}},"callee":{"type":"MemberExpression","start":170,"end":185,"loc":{"start":{"line":4,"column":76,"index":170},"end":{"line":4,"column":91,"index":185}},"object":{"type":"MemberExpression","start":170,"end":180,"loc":{"start":{"line":4,"column":76,"index":170},"end":{"line":4,"column":86,"index":180}},"object":{"type":"Identifier","start":170,"end":175,"loc":{"start":{"line":4,"column":76,"index":170},"end":{"line":4,"column":81,"index":175},"identifierName":"Realm"},"name":"Realm"},"computed":false,"property":{"type":"Identifier","start":176,"end":180,"loc":{"start":{"line":4,"column":82,"index":176},"end":{"line":4,"column":86,"index":180},"identifierName":"BSON"},"name":"BSON"}},"computed":false,"property":{"type":"Identifier","start":181,"end":185,"loc":{"start":{"line":4,"column":87,"index":181},"end":{"line":4,"column":91,"index":185},"identifierName":"UUID"},"name":"UUID"}},"arguments":[]}

      at visitRealmClassProperty (src/plugin/index.ts:329:17)
          at Array.map (<anonymous>)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new Realm.BSON.UUID();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "uuid",
            optional: true,
            default: () => new Realm.BSON.UUID()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    FISK 11: {"type":"NewExpression","start":177,"end":198,"loc":{"start":{"line":4,"column":83,"index":177},"end":{"line":4,"column":104,"index":198}},"callee":{"type":"MemberExpression","start":181,"end":196,"loc":{"start":{"line":4,"column":87,"index":181},"end":{"line":4,"column":102,"index":196}},"object":{"type":"MemberExpression","start":181,"end":191,"loc":{"start":{"line":4,"column":87,"index":181},"end":{"line":4,"column":97,"index":191}},"object":{"type":"Identifier","start":181,"end":186,"loc":{"start":{"line":4,"column":87,"index":181},"end":{"line":4,"column":92,"index":186},"identifierName":"Realm"},"name":"Realm"},"computed":false,"property":{"type":"Identifier","start":187,"end":191,"loc":{"start":{"line":4,"column":93,"index":187},"end":{"line":4,"column":97,"index":191},"identifierName":"BSON"},"name":"BSON"}},"computed":false,"property":{"type":"Identifier","start":192,"end":196,"loc":{"start":{"line":4,"column":98,"index":192},"end":{"line":4,"column":102,"index":196},"identifierName":"UUID"},"name":"UUID"}},"arguments":[]}

      at visitRealmClassProperty (src/plugin/index.ts:329:17)
          at Array.map (<anonymous>)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new Realm.BSON.UUID();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "uuid",
            optional: true,
            default: () => new Realm.BSON.UUID()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    FISK 11: {"type":"NewExpression","start":177,"end":198,"loc":{"start":{"line":4,"column":83,"index":177},"end":{"line":4,"column":104,"index":198}},"callee":{"type":"MemberExpression","start":181,"end":196,"loc":{"start":{"line":4,"column":87,"index":181},"end":{"line":4,"column":102,"index":196}},"object":{"type":"MemberExpression","start":181,"end":191,"loc":{"start":{"line":4,"column":87,"index":181},"end":{"line":4,"column":97,"index":191}},"object":{"type":"Identifier","start":181,"end":186,"loc":{"start":{"line":4,"column":87,"index":181},"end":{"line":4,"column":92,"index":186},"identifierName":"Realm"},"name":"Realm"},"computed":false,"property":{"type":"Identifier","start":187,"end":191,"loc":{"start":{"line":4,"column":93,"index":187},"end":{"line":4,"column":97,"index":191},"identifierName":"BSON"},"name":"BSON"}},"computed":false,"property":{"type":"Identifier","start":192,"end":196,"loc":{"start":{"line":4,"column":98,"index":192},"end":{"line":4,"column":102,"index":196},"identifierName":"UUID"},"name":"UUID"}},"arguments":[]}

      at visitRealmClassProperty (src/plugin/index.ts:329:17)
          at Array.map (<anonymous>)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new Realm.BSON.UUID();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "uuid",
            optional: true,
            default: () => new Realm.BSON.UUID()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    FISK 11: {"type":"NewExpression","start":160,"end":181,"loc":{"start":{"line":4,"column":66,"index":160},"end":{"line":4,"column":87,"index":181}},"callee":{"type":"MemberExpression","start":164,"end":179,"loc":{"start":{"line":4,"column":70,"index":164},"end":{"line":4,"column":85,"index":179}},"object":{"type":"MemberExpression","start":164,"end":174,"loc":{"start":{"line":4,"column":70,"index":164},"end":{"line":4,"column":80,"index":174}},"object":{"type":"Identifier","start":164,"end":169,"loc":{"start":{"line":4,"column":70,"index":164},"end":{"line":4,"column":75,"index":169},"identifierName":"Realm"},"name":"Realm"},"computed":false,"property":{"type":"Identifier","start":170,"end":174,"loc":{"start":{"line":4,"column":76,"index":170},"end":{"line":4,"column":80,"index":174},"identifierName":"BSON"},"name":"BSON"}},"computed":false,"property":{"type":"Identifier","start":175,"end":179,"loc":{"start":{"line":4,"column":81,"index":175},"end":{"line":4,"column":85,"index":179},"identifierName":"UUID"},"name":"UUID"}},"arguments":[]}

      at visitRealmClassProperty (src/plugin/index.ts:329:17)
          at Array.map (<anonymous>)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new Realm.BSON.UUID();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "uuid",
            optional: true,
            default: () => new Realm.BSON.UUID()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    FISK 11: {"type":"NewExpression","start":171,"end":192,"loc":{"start":{"line":4,"column":77,"index":171},"end":{"line":4,"column":98,"index":192}},"callee":{"type":"MemberExpression","start":175,"end":190,"loc":{"start":{"line":4,"column":81,"index":175},"end":{"line":4,"column":96,"index":190}},"object":{"type":"MemberExpression","start":175,"end":185,"loc":{"start":{"line":4,"column":81,"index":175},"end":{"line":4,"column":91,"index":185}},"object":{"type":"Identifier","start":175,"end":180,"loc":{"start":{"line":4,"column":81,"index":175},"end":{"line":4,"column":86,"index":180},"identifierName":"Realm"},"name":"Realm"},"computed":false,"property":{"type":"Identifier","start":181,"end":185,"loc":{"start":{"line":4,"column":87,"index":181},"end":{"line":4,"column":91,"index":185},"identifierName":"BSON"},"name":"BSON"}},"computed":false,"property":{"type":"Identifier","start":186,"end":190,"loc":{"start":{"line":4,"column":92,"index":186},"end":{"line":4,"column":96,"index":190},"identifierName":"UUID"},"name":"UUID"}},"arguments":[]}

      at visitRealmClassProperty (src/plugin/index.ts:329:17)
          at Array.map (<anonymous>)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new Realm.BSON.UUID();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "uuid",
            optional: true,
            default: () => new Realm.BSON.UUID()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    FISK 11: {"type":"NewExpression","start":171,"end":192,"loc":{"start":{"line":4,"column":77,"index":171},"end":{"line":4,"column":98,"index":192}},"callee":{"type":"MemberExpression","start":175,"end":190,"loc":{"start":{"line":4,"column":81,"index":175},"end":{"line":4,"column":96,"index":190}},"object":{"type":"MemberExpression","start":175,"end":185,"loc":{"start":{"line":4,"column":81,"index":175},"end":{"line":4,"column":91,"index":185}},"object":{"type":"Identifier","start":175,"end":180,"loc":{"start":{"line":4,"column":81,"index":175},"end":{"line":4,"column":86,"index":180},"identifierName":"Realm"},"name":"Realm"},"computed":false,"property":{"type":"Identifier","start":181,"end":185,"loc":{"start":{"line":4,"column":87,"index":181},"end":{"line":4,"column":91,"index":185},"identifierName":"BSON"},"name":"BSON"}},"computed":false,"property":{"type":"Identifier","start":186,"end":190,"loc":{"start":{"line":4,"column":92,"index":186},"end":{"line":4,"column":96,"index":190},"identifierName":"UUID"},"name":"UUID"}},"arguments":[]}

      at visitRealmClassProperty (src/plugin/index.ts:329:17)
          at Array.map (<anonymous>)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new Realm.BSON.UUID();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "uuid",
            optional: true,
            default: () => new Realm.BSON.UUID()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    FISK 11: {"type":"NewExpression","start":149,"end":170,"loc":{"start":{"line":4,"column":55,"index":149},"end":{"line":4,"column":76,"index":170}},"callee":{"type":"MemberExpression","start":153,"end":168,"loc":{"start":{"line":4,"column":59,"index":153},"end":{"line":4,"column":74,"index":168}},"object":{"type":"MemberExpression","start":153,"end":163,"loc":{"start":{"line":4,"column":59,"index":153},"end":{"line":4,"column":69,"index":163}},"object":{"type":"Identifier","start":153,"end":158,"loc":{"start":{"line":4,"column":59,"index":153},"end":{"line":4,"column":64,"index":158},"identifierName":"Realm"},"name":"Realm"},"computed":false,"property":{"type":"Identifier","start":159,"end":163,"loc":{"start":{"line":4,"column":65,"index":159},"end":{"line":4,"column":69,"index":163},"identifierName":"BSON"},"name":"BSON"}},"computed":false,"property":{"type":"Identifier","start":164,"end":168,"loc":{"start":{"line":4,"column":70,"index":164},"end":{"line":4,"column":74,"index":168},"identifierName":"UUID"},"name":"UUID"}},"arguments":[]}

      at visitRealmClassProperty (src/plugin/index.ts:329:17)
          at Array.map (<anonymous>)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new Realm.BSON.UUID();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "uuid",
            optional: true,
            default: () => new Realm.BSON.UUID()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    FISK 11: {"type":"NewExpression","start":166,"end":181,"loc":{"start":{"line":4,"column":72,"index":166},"end":{"line":4,"column":87,"index":181}},"callee":{"type":"MemberExpression","start":170,"end":179,"loc":{"start":{"line":4,"column":76,"index":170},"end":{"line":4,"column":85,"index":179}},"object":{"type":"Identifier","start":170,"end":174,"loc":{"start":{"line":4,"column":76,"index":170},"end":{"line":4,"column":80,"index":174},"identifierName":"BSON"},"name":"BSON"},"computed":false,"property":{"type":"Identifier","start":175,"end":179,"loc":{"start":{"line":4,"column":81,"index":175},"end":{"line":4,"column":85,"index":179},"identifierName":"UUID"},"name":"UUID"}},"arguments":[]}

      at visitRealmClassProperty (src/plugin/index.ts:329:17)
          at Array.map (<anonymous>)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new BSON.UUID();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "uuid",
            default: () => new BSON.UUID()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    FISK 11: {"type":"NewExpression","start":160,"end":175,"loc":{"start":{"line":4,"column":66,"index":160},"end":{"line":4,"column":81,"index":175}},"callee":{"type":"MemberExpression","start":164,"end":173,"loc":{"start":{"line":4,"column":70,"index":164},"end":{"line":4,"column":79,"index":173}},"object":{"type":"Identifier","start":164,"end":168,"loc":{"start":{"line":4,"column":70,"index":164},"end":{"line":4,"column":74,"index":168},"identifierName":"BSON"},"name":"BSON"},"computed":false,"property":{"type":"Identifier","start":169,"end":173,"loc":{"start":{"line":4,"column":75,"index":169},"end":{"line":4,"column":79,"index":173},"identifierName":"UUID"},"name":"UUID"}},"arguments":[]}

      at visitRealmClassProperty (src/plugin/index.ts:329:17)
          at Array.map (<anonymous>)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new BSON.UUID();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "uuid",
            default: () => new BSON.UUID()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    FISK 11: {"type":"NewExpression","start":165,"end":180,"loc":{"start":{"line":4,"column":71,"index":165},"end":{"line":4,"column":86,"index":180}},"callee":{"type":"MemberExpression","start":169,"end":178,"loc":{"start":{"line":4,"column":75,"index":169},"end":{"line":4,"column":84,"index":178}},"object":{"type":"Identifier","start":169,"end":173,"loc":{"start":{"line":4,"column":75,"index":169},"end":{"line":4,"column":79,"index":173},"identifierName":"BSON"},"name":"BSON"},"computed":false,"property":{"type":"Identifier","start":174,"end":178,"loc":{"start":{"line":4,"column":80,"index":174},"end":{"line":4,"column":84,"index":178},"identifierName":"UUID"},"name":"UUID"}},"arguments":[]}

      at visitRealmClassProperty (src/plugin/index.ts:329:17)
          at Array.map (<anonymous>)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new BSON.UUID();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "uuid",
            default: () => new BSON.UUID()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    FISK 11: {"type":"NewExpression","start":159,"end":174,"loc":{"start":{"line":4,"column":65,"index":159},"end":{"line":4,"column":80,"index":174}},"callee":{"type":"MemberExpression","start":163,"end":172,"loc":{"start":{"line":4,"column":69,"index":163},"end":{"line":4,"column":78,"index":172}},"object":{"type":"Identifier","start":163,"end":167,"loc":{"start":{"line":4,"column":69,"index":163},"end":{"line":4,"column":73,"index":167},"identifierName":"BSON"},"name":"BSON"},"computed":false,"property":{"type":"Identifier","start":168,"end":172,"loc":{"start":{"line":4,"column":74,"index":168},"end":{"line":4,"column":78,"index":172},"identifierName":"UUID"},"name":"UUID"}},"arguments":[]}

      at visitRealmClassProperty (src/plugin/index.ts:329:17)
          at Array.map (<anonymous>)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new BSON.UUID();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "uuid",
            default: () => new BSON.UUID()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    FISK 11: {"type":"NewExpression","start":148,"end":163,"loc":{"start":{"line":4,"column":54,"index":148},"end":{"line":4,"column":69,"index":163}},"callee":{"type":"MemberExpression","start":152,"end":161,"loc":{"start":{"line":4,"column":58,"index":152},"end":{"line":4,"column":67,"index":161}},"object":{"type":"Identifier","start":152,"end":156,"loc":{"start":{"line":4,"column":58,"index":152},"end":{"line":4,"column":62,"index":156},"identifierName":"BSON"},"name":"BSON"},"computed":false,"property":{"type":"Identifier","start":157,"end":161,"loc":{"start":{"line":4,"column":63,"index":157},"end":{"line":4,"column":67,"index":161},"identifierName":"UUID"},"name":"UUID"}},"arguments":[]}

      at visitRealmClassProperty (src/plugin/index.ts:329:17)
          at Array.map (<anonymous>)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new BSON.UUID();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "uuid",
            default: () => new BSON.UUID()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    FISK 11: {"type":"NewExpression","start":167,"end":182,"loc":{"start":{"line":4,"column":73,"index":167},"end":{"line":4,"column":88,"index":182}},"callee":{"type":"MemberExpression","start":171,"end":180,"loc":{"start":{"line":4,"column":77,"index":171},"end":{"line":4,"column":86,"index":180}},"object":{"type":"Identifier","start":171,"end":175,"loc":{"start":{"line":4,"column":77,"index":171},"end":{"line":4,"column":81,"index":175},"identifierName":"BSON"},"name":"BSON"},"computed":false,"property":{"type":"Identifier","start":176,"end":180,"loc":{"start":{"line":4,"column":82,"index":176},"end":{"line":4,"column":86,"index":180},"identifierName":"UUID"},"name":"UUID"}},"arguments":[]}

      at visitRealmClassProperty (src/plugin/index.ts:329:17)
          at Array.map (<anonymous>)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new BSON.UUID();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "uuid",
            optional: true,
            default: () => new BSON.UUID()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    FISK 11: {"type":"NewExpression","start":178,"end":193,"loc":{"start":{"line":4,"column":84,"index":178},"end":{"line":4,"column":99,"index":193}},"callee":{"type":"MemberExpression","start":182,"end":191,"loc":{"start":{"line":4,"column":88,"index":182},"end":{"line":4,"column":97,"index":191}},"object":{"type":"Identifier","start":182,"end":186,"loc":{"start":{"line":4,"column":88,"index":182},"end":{"line":4,"column":92,"index":186},"identifierName":"BSON"},"name":"BSON"},"computed":false,"property":{"type":"Identifier","start":187,"end":191,"loc":{"start":{"line":4,"column":93,"index":187},"end":{"line":4,"column":97,"index":191},"identifierName":"UUID"},"name":"UUID"}},"arguments":[]}

      at visitRealmClassProperty (src/plugin/index.ts:329:17)
          at Array.map (<anonymous>)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new BSON.UUID();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "uuid",
            optional: true,
            default: () => new BSON.UUID()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    FISK 11: {"type":"NewExpression","start":178,"end":193,"loc":{"start":{"line":4,"column":84,"index":178},"end":{"line":4,"column":99,"index":193}},"callee":{"type":"MemberExpression","start":182,"end":191,"loc":{"start":{"line":4,"column":88,"index":182},"end":{"line":4,"column":97,"index":191}},"object":{"type":"Identifier","start":182,"end":186,"loc":{"start":{"line":4,"column":88,"index":182},"end":{"line":4,"column":92,"index":186},"identifierName":"BSON"},"name":"BSON"},"computed":false,"property":{"type":"Identifier","start":187,"end":191,"loc":{"start":{"line":4,"column":93,"index":187},"end":{"line":4,"column":97,"index":191},"identifierName":"UUID"},"name":"UUID"}},"arguments":[]}

      at visitRealmClassProperty (src/plugin/index.ts:329:17)
          at Array.map (<anonymous>)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new BSON.UUID();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "uuid",
            optional: true,
            default: () => new BSON.UUID()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    FISK 11: {"type":"NewExpression","start":161,"end":176,"loc":{"start":{"line":4,"column":67,"index":161},"end":{"line":4,"column":82,"index":176}},"callee":{"type":"MemberExpression","start":165,"end":174,"loc":{"start":{"line":4,"column":71,"index":165},"end":{"line":4,"column":80,"index":174}},"object":{"type":"Identifier","start":165,"end":169,"loc":{"start":{"line":4,"column":71,"index":165},"end":{"line":4,"column":75,"index":169},"identifierName":"BSON"},"name":"BSON"},"computed":false,"property":{"type":"Identifier","start":170,"end":174,"loc":{"start":{"line":4,"column":76,"index":170},"end":{"line":4,"column":80,"index":174},"identifierName":"UUID"},"name":"UUID"}},"arguments":[]}

      at visitRealmClassProperty (src/plugin/index.ts:329:17)
          at Array.map (<anonymous>)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new BSON.UUID();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "uuid",
            optional: true,
            default: () => new BSON.UUID()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    FISK 11: {"type":"NewExpression","start":172,"end":187,"loc":{"start":{"line":4,"column":78,"index":172},"end":{"line":4,"column":93,"index":187}},"callee":{"type":"MemberExpression","start":176,"end":185,"loc":{"start":{"line":4,"column":82,"index":176},"end":{"line":4,"column":91,"index":185}},"object":{"type":"Identifier","start":176,"end":180,"loc":{"start":{"line":4,"column":82,"index":176},"end":{"line":4,"column":86,"index":180},"identifierName":"BSON"},"name":"BSON"},"computed":false,"property":{"type":"Identifier","start":181,"end":185,"loc":{"start":{"line":4,"column":87,"index":181},"end":{"line":4,"column":91,"index":185},"identifierName":"UUID"},"name":"UUID"}},"arguments":[]}

      at visitRealmClassProperty (src/plugin/index.ts:329:17)
          at Array.map (<anonymous>)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new BSON.UUID();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "uuid",
            optional: true,
            default: () => new BSON.UUID()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    FISK 11: {"type":"NewExpression","start":172,"end":187,"loc":{"start":{"line":4,"column":78,"index":172},"end":{"line":4,"column":93,"index":187}},"callee":{"type":"MemberExpression","start":176,"end":185,"loc":{"start":{"line":4,"column":82,"index":176},"end":{"line":4,"column":91,"index":185}},"object":{"type":"Identifier","start":176,"end":180,"loc":{"start":{"line":4,"column":82,"index":176},"end":{"line":4,"column":86,"index":180},"identifierName":"BSON"},"name":"BSON"},"computed":false,"property":{"type":"Identifier","start":181,"end":185,"loc":{"start":{"line":4,"column":87,"index":181},"end":{"line":4,"column":91,"index":185},"identifierName":"UUID"},"name":"UUID"}},"arguments":[]}

      at visitRealmClassProperty (src/plugin/index.ts:329:17)
          at Array.map (<anonymous>)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new BSON.UUID();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "uuid",
            optional: true,
            default: () => new BSON.UUID()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    FISK 11: {"type":"NewExpression","start":166,"end":181,"loc":{"start":{"line":4,"column":72,"index":166},"end":{"line":4,"column":87,"index":181}},"callee":{"type":"MemberExpression","start":170,"end":179,"loc":{"start":{"line":4,"column":76,"index":170},"end":{"line":4,"column":85,"index":179}},"object":{"type":"Identifier","start":170,"end":174,"loc":{"start":{"line":4,"column":76,"index":170},"end":{"line":4,"column":80,"index":174},"identifierName":"BSON"},"name":"BSON"},"computed":false,"property":{"type":"Identifier","start":175,"end":179,"loc":{"start":{"line":4,"column":81,"index":175},"end":{"line":4,"column":85,"index":179},"identifierName":"UUID"},"name":"UUID"}},"arguments":[]}

      at visitRealmClassProperty (src/plugin/index.ts:329:17)
          at Array.map (<anonymous>)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new BSON.UUID();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "uuid",
            optional: true,
            default: () => new BSON.UUID()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    FISK 11: {"type":"NewExpression","start":177,"end":192,"loc":{"start":{"line":4,"column":83,"index":177},"end":{"line":4,"column":98,"index":192}},"callee":{"type":"MemberExpression","start":181,"end":190,"loc":{"start":{"line":4,"column":87,"index":181},"end":{"line":4,"column":96,"index":190}},"object":{"type":"Identifier","start":181,"end":185,"loc":{"start":{"line":4,"column":87,"index":181},"end":{"line":4,"column":91,"index":185},"identifierName":"BSON"},"name":"BSON"},"computed":false,"property":{"type":"Identifier","start":186,"end":190,"loc":{"start":{"line":4,"column":92,"index":186},"end":{"line":4,"column":96,"index":190},"identifierName":"UUID"},"name":"UUID"}},"arguments":[]}

      at visitRealmClassProperty (src/plugin/index.ts:329:17)
          at Array.map (<anonymous>)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new BSON.UUID();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "uuid",
            optional: true,
            default: () => new BSON.UUID()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    FISK 11: {"type":"NewExpression","start":177,"end":192,"loc":{"start":{"line":4,"column":83,"index":177},"end":{"line":4,"column":98,"index":192}},"callee":{"type":"MemberExpression","start":181,"end":190,"loc":{"start":{"line":4,"column":87,"index":181},"end":{"line":4,"column":96,"index":190}},"object":{"type":"Identifier","start":181,"end":185,"loc":{"start":{"line":4,"column":87,"index":181},"end":{"line":4,"column":91,"index":185},"identifierName":"BSON"},"name":"BSON"},"computed":false,"property":{"type":"Identifier","start":186,"end":190,"loc":{"start":{"line":4,"column":92,"index":186},"end":{"line":4,"column":96,"index":190},"identifierName":"UUID"},"name":"UUID"}},"arguments":[]}

      at visitRealmClassProperty (src/plugin/index.ts:329:17)
          at Array.map (<anonymous>)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new BSON.UUID();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "uuid",
            optional: true,
            default: () => new BSON.UUID()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    FISK 11: {"type":"NewExpression","start":160,"end":175,"loc":{"start":{"line":4,"column":66,"index":160},"end":{"line":4,"column":81,"index":175}},"callee":{"type":"MemberExpression","start":164,"end":173,"loc":{"start":{"line":4,"column":70,"index":164},"end":{"line":4,"column":79,"index":173}},"object":{"type":"Identifier","start":164,"end":168,"loc":{"start":{"line":4,"column":70,"index":164},"end":{"line":4,"column":74,"index":168},"identifierName":"BSON"},"name":"BSON"},"computed":false,"property":{"type":"Identifier","start":169,"end":173,"loc":{"start":{"line":4,"column":75,"index":169},"end":{"line":4,"column":79,"index":173},"identifierName":"UUID"},"name":"UUID"}},"arguments":[]}

      at visitRealmClassProperty (src/plugin/index.ts:329:17)
          at Array.map (<anonymous>)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new BSON.UUID();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "uuid",
            optional: true,
            default: () => new BSON.UUID()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    FISK 11: {"type":"NewExpression","start":171,"end":186,"loc":{"start":{"line":4,"column":77,"index":171},"end":{"line":4,"column":92,"index":186}},"callee":{"type":"MemberExpression","start":175,"end":184,"loc":{"start":{"line":4,"column":81,"index":175},"end":{"line":4,"column":90,"index":184}},"object":{"type":"Identifier","start":175,"end":179,"loc":{"start":{"line":4,"column":81,"index":175},"end":{"line":4,"column":85,"index":179},"identifierName":"BSON"},"name":"BSON"},"computed":false,"property":{"type":"Identifier","start":180,"end":184,"loc":{"start":{"line":4,"column":86,"index":180},"end":{"line":4,"column":90,"index":184},"identifierName":"UUID"},"name":"UUID"}},"arguments":[]}

      at visitRealmClassProperty (src/plugin/index.ts:329:17)
          at Array.map (<anonymous>)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new BSON.UUID();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "uuid",
            optional: true,
            default: () => new BSON.UUID()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    FISK 11: {"type":"NewExpression","start":171,"end":186,"loc":{"start":{"line":4,"column":77,"index":171},"end":{"line":4,"column":92,"index":186}},"callee":{"type":"MemberExpression","start":175,"end":184,"loc":{"start":{"line":4,"column":81,"index":175},"end":{"line":4,"column":90,"index":184}},"object":{"type":"Identifier","start":175,"end":179,"loc":{"start":{"line":4,"column":81,"index":175},"end":{"line":4,"column":85,"index":179},"identifierName":"BSON"},"name":"BSON"},"computed":false,"property":{"type":"Identifier","start":180,"end":184,"loc":{"start":{"line":4,"column":86,"index":180},"end":{"line":4,"column":90,"index":184},"identifierName":"UUID"},"name":"UUID"}},"arguments":[]}

      at visitRealmClassProperty (src/plugin/index.ts:329:17)
          at Array.map (<anonymous>)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new BSON.UUID();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "uuid",
            optional: true,
            default: () => new BSON.UUID()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    FISK 11: {"type":"NewExpression","start":149,"end":164,"loc":{"start":{"line":4,"column":55,"index":149},"end":{"line":4,"column":70,"index":164}},"callee":{"type":"MemberExpression","start":153,"end":162,"loc":{"start":{"line":4,"column":59,"index":153},"end":{"line":4,"column":68,"index":162}},"object":{"type":"Identifier","start":153,"end":157,"loc":{"start":{"line":4,"column":59,"index":153},"end":{"line":4,"column":63,"index":157},"identifierName":"BSON"},"name":"BSON"},"computed":false,"property":{"type":"Identifier","start":158,"end":162,"loc":{"start":{"line":4,"column":64,"index":158},"end":{"line":4,"column":68,"index":162},"identifierName":"UUID"},"name":"UUID"}},"arguments":[]}

      at visitRealmClassProperty (src/plugin/index.ts:329:17)
          at Array.map (<anonymous>)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new BSON.UUID();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "uuid",
            optional: true,
            default: () => new BSON.UUID()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "date"
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "date"
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "date"
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "date",
            optional: true
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "date",
            optional: true
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "date",
            optional: true
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "date",
            optional: true
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "date",
            optional: true
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "date",
            optional: true
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "date",
            optional: true
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "date",
            optional: true
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "date",
            optional: true
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    FISK 11: {"type":"NewExpression","start":154,"end":164,"loc":{"start":{"line":4,"column":60,"index":154},"end":{"line":4,"column":70,"index":164}},"callee":{"type":"Identifier","start":158,"end":162,"loc":{"start":{"line":4,"column":64,"index":158},"end":{"line":4,"column":68,"index":162},"identifierName":"Date"},"name":"Date"},"arguments":[]}

      at visitRealmClassProperty (src/plugin/index.ts:329:17)
          at Array.map (<anonymous>)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new Date();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "date",
            default: () => new Date()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    FISK 11: {"type":"NewExpression","start":160,"end":170,"loc":{"start":{"line":4,"column":66,"index":160},"end":{"line":4,"column":76,"index":170}},"callee":{"type":"Identifier","start":164,"end":168,"loc":{"start":{"line":4,"column":70,"index":164},"end":{"line":4,"column":74,"index":168},"identifierName":"Date"},"name":"Date"},"arguments":[]}

      at visitRealmClassProperty (src/plugin/index.ts:329:17)
          at Array.map (<anonymous>)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new Date();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "date",
            default: () => new Date()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    FISK 11: {"type":"NewExpression","start":166,"end":176,"loc":{"start":{"line":4,"column":72,"index":166},"end":{"line":4,"column":82,"index":176}},"callee":{"type":"Identifier","start":170,"end":174,"loc":{"start":{"line":4,"column":76,"index":170},"end":{"line":4,"column":80,"index":174},"identifierName":"Date"},"name":"Date"},"arguments":[]}

      at visitRealmClassProperty (src/plugin/index.ts:329:17)
          at Array.map (<anonymous>)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new Date();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "date",
            default: () => new Date()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    FISK 11: {"type":"NewExpression","start":148,"end":158,"loc":{"start":{"line":4,"column":54,"index":148},"end":{"line":4,"column":64,"index":158}},"callee":{"type":"Identifier","start":152,"end":156,"loc":{"start":{"line":4,"column":58,"index":152},"end":{"line":4,"column":62,"index":156},"identifierName":"Date"},"name":"Date"},"arguments":[]}

      at visitRealmClassProperty (src/plugin/index.ts:329:17)
          at Array.map (<anonymous>)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new Date();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "date",
            default: () => new Date()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    FISK 11: {"type":"NewExpression","start":155,"end":165,"loc":{"start":{"line":4,"column":61,"index":155},"end":{"line":4,"column":71,"index":165}},"callee":{"type":"Identifier","start":159,"end":163,"loc":{"start":{"line":4,"column":65,"index":159},"end":{"line":4,"column":69,"index":163},"identifierName":"Date"},"name":"Date"},"arguments":[]}

      at visitRealmClassProperty (src/plugin/index.ts:329:17)
          at Array.map (<anonymous>)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new Date();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "date",
            optional: true,
            default: () => new Date()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    FISK 11: {"type":"NewExpression","start":166,"end":176,"loc":{"start":{"line":4,"column":72,"index":166},"end":{"line":4,"column":82,"index":176}},"callee":{"type":"Identifier","start":170,"end":174,"loc":{"start":{"line":4,"column":76,"index":170},"end":{"line":4,"column":80,"index":174},"identifierName":"Date"},"name":"Date"},"arguments":[]}

      at visitRealmClassProperty (src/plugin/index.ts:329:17)
          at Array.map (<anonymous>)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new Date();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "date",
            optional: true,
            default: () => new Date()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    FISK 11: {"type":"NewExpression","start":166,"end":176,"loc":{"start":{"line":4,"column":72,"index":166},"end":{"line":4,"column":82,"index":176}},"callee":{"type":"Identifier","start":170,"end":174,"loc":{"start":{"line":4,"column":76,"index":170},"end":{"line":4,"column":80,"index":174},"identifierName":"Date"},"name":"Date"},"arguments":[]}

      at visitRealmClassProperty (src/plugin/index.ts:329:17)
          at Array.map (<anonymous>)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new Date();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "date",
            optional: true,
            default: () => new Date()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    FISK 11: {"type":"NewExpression","start":161,"end":171,"loc":{"start":{"line":4,"column":67,"index":161},"end":{"line":4,"column":77,"index":171}},"callee":{"type":"Identifier","start":165,"end":169,"loc":{"start":{"line":4,"column":71,"index":165},"end":{"line":4,"column":75,"index":169},"identifierName":"Date"},"name":"Date"},"arguments":[]}

      at visitRealmClassProperty (src/plugin/index.ts:329:17)
          at Array.map (<anonymous>)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new Date();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "date",
            optional: true,
            default: () => new Date()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    FISK 11: {"type":"NewExpression","start":172,"end":182,"loc":{"start":{"line":4,"column":78,"index":172},"end":{"line":4,"column":88,"index":182}},"callee":{"type":"Identifier","start":176,"end":180,"loc":{"start":{"line":4,"column":82,"index":176},"end":{"line":4,"column":86,"index":180},"identifierName":"Date"},"name":"Date"},"arguments":[]}

      at visitRealmClassProperty (src/plugin/index.ts:329:17)
          at Array.map (<anonymous>)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new Date();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "date",
            optional: true,
            default: () => new Date()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    FISK 11: {"type":"NewExpression","start":172,"end":182,"loc":{"start":{"line":4,"column":78,"index":172},"end":{"line":4,"column":88,"index":182}},"callee":{"type":"Identifier","start":176,"end":180,"loc":{"start":{"line":4,"column":82,"index":176},"end":{"line":4,"column":86,"index":180},"identifierName":"Date"},"name":"Date"},"arguments":[]}

      at visitRealmClassProperty (src/plugin/index.ts:329:17)
          at Array.map (<anonymous>)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new Date();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "date",
            optional: true,
            default: () => new Date()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    FISK 11: {"type":"NewExpression","start":167,"end":177,"loc":{"start":{"line":4,"column":73,"index":167},"end":{"line":4,"column":83,"index":177}},"callee":{"type":"Identifier","start":171,"end":175,"loc":{"start":{"line":4,"column":77,"index":171},"end":{"line":4,"column":81,"index":175},"identifierName":"Date"},"name":"Date"},"arguments":[]}

      at visitRealmClassProperty (src/plugin/index.ts:329:17)
          at Array.map (<anonymous>)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new Date();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "date",
            optional: true,
            default: () => new Date()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    FISK 11: {"type":"NewExpression","start":178,"end":188,"loc":{"start":{"line":4,"column":84,"index":178},"end":{"line":4,"column":94,"index":188}},"callee":{"type":"Identifier","start":182,"end":186,"loc":{"start":{"line":4,"column":88,"index":182},"end":{"line":4,"column":92,"index":186},"identifierName":"Date"},"name":"Date"},"arguments":[]}

      at visitRealmClassProperty (src/plugin/index.ts:329:17)
          at Array.map (<anonymous>)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new Date();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "date",
            optional: true,
            default: () => new Date()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    FISK 11: {"type":"NewExpression","start":178,"end":188,"loc":{"start":{"line":4,"column":84,"index":178},"end":{"line":4,"column":94,"index":188}},"callee":{"type":"Identifier","start":182,"end":186,"loc":{"start":{"line":4,"column":88,"index":182},"end":{"line":4,"column":92,"index":186},"identifierName":"Date"},"name":"Date"},"arguments":[]}

      at visitRealmClassProperty (src/plugin/index.ts:329:17)
          at Array.map (<anonymous>)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new Date();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "date",
            optional: true,
            default: () => new Date()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    FISK 11: {"type":"NewExpression","start":149,"end":159,"loc":{"start":{"line":4,"column":55,"index":149},"end":{"line":4,"column":65,"index":159}},"callee":{"type":"Identifier","start":153,"end":157,"loc":{"start":{"line":4,"column":59,"index":153},"end":{"line":4,"column":63,"index":157},"identifierName":"Date"},"name":"Date"},"arguments":[]}

      at visitRealmClassProperty (src/plugin/index.ts:329:17)
          at Array.map (<anonymous>)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new Date();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "date",
            optional: true,
            default: () => new Date()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    FISK 11: {"type":"NewExpression","start":154,"end":170,"loc":{"start":{"line":4,"column":60,"index":154},"end":{"line":4,"column":76,"index":170}},"callee":{"type":"MemberExpression","start":158,"end":168,"loc":{"start":{"line":4,"column":64,"index":158},"end":{"line":4,"column":74,"index":168}},"object":{"type":"Identifier","start":158,"end":163,"loc":{"start":{"line":4,"column":64,"index":158},"end":{"line":4,"column":69,"index":163},"identifierName":"Types"},"name":"Types"},"computed":false,"property":{"type":"Identifier","start":164,"end":168,"loc":{"start":{"line":4,"column":70,"index":164},"end":{"line":4,"column":74,"index":168},"identifierName":"Date"},"name":"Date"}},"arguments":[]}

      at visitRealmClassProperty (src/plugin/index.ts:329:17)
          at Array.map (<anonymous>)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new Types.Date();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "date",
            default: () => new Types.Date()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    FISK 11: {"type":"NewExpression","start":160,"end":176,"loc":{"start":{"line":4,"column":66,"index":160},"end":{"line":4,"column":82,"index":176}},"callee":{"type":"MemberExpression","start":164,"end":174,"loc":{"start":{"line":4,"column":70,"index":164},"end":{"line":4,"column":80,"index":174}},"object":{"type":"Identifier","start":164,"end":169,"loc":{"start":{"line":4,"column":70,"index":164},"end":{"line":4,"column":75,"index":169},"identifierName":"Types"},"name":"Types"},"computed":false,"property":{"type":"Identifier","start":170,"end":174,"loc":{"start":{"line":4,"column":76,"index":170},"end":{"line":4,"column":80,"index":174},"identifierName":"Date"},"name":"Date"}},"arguments":[]}

      at visitRealmClassProperty (src/plugin/index.ts:329:17)
          at Array.map (<anonymous>)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new Types.Date();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "date",
            default: () => new Types.Date()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    FISK 11: {"type":"NewExpression","start":166,"end":182,"loc":{"start":{"line":4,"column":72,"index":166},"end":{"line":4,"column":88,"index":182}},"callee":{"type":"MemberExpression","start":170,"end":180,"loc":{"start":{"line":4,"column":76,"index":170},"end":{"line":4,"column":86,"index":180}},"object":{"type":"Identifier","start":170,"end":175,"loc":{"start":{"line":4,"column":76,"index":170},"end":{"line":4,"column":81,"index":175},"identifierName":"Types"},"name":"Types"},"computed":false,"property":{"type":"Identifier","start":176,"end":180,"loc":{"start":{"line":4,"column":82,"index":176},"end":{"line":4,"column":86,"index":180},"identifierName":"Date"},"name":"Date"}},"arguments":[]}

      at visitRealmClassProperty (src/plugin/index.ts:329:17)
          at Array.map (<anonymous>)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new Types.Date();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "date",
            default: () => new Types.Date()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    FISK 11: {"type":"NewExpression","start":148,"end":164,"loc":{"start":{"line":4,"column":54,"index":148},"end":{"line":4,"column":70,"index":164}},"callee":{"type":"MemberExpression","start":152,"end":162,"loc":{"start":{"line":4,"column":58,"index":152},"end":{"line":4,"column":68,"index":162}},"object":{"type":"Identifier","start":152,"end":157,"loc":{"start":{"line":4,"column":58,"index":152},"end":{"line":4,"column":63,"index":157},"identifierName":"Types"},"name":"Types"},"computed":false,"property":{"type":"Identifier","start":158,"end":162,"loc":{"start":{"line":4,"column":64,"index":158},"end":{"line":4,"column":68,"index":162},"identifierName":"Date"},"name":"Date"}},"arguments":[]}

      at visitRealmClassProperty (src/plugin/index.ts:329:17)
          at Array.map (<anonymous>)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new Types.Date();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "date",
            default: () => new Types.Date()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    FISK 11: {"type":"NewExpression","start":155,"end":171,"loc":{"start":{"line":4,"column":61,"index":155},"end":{"line":4,"column":77,"index":171}},"callee":{"type":"MemberExpression","start":159,"end":169,"loc":{"start":{"line":4,"column":65,"index":159},"end":{"line":4,"column":75,"index":169}},"object":{"type":"Identifier","start":159,"end":164,"loc":{"start":{"line":4,"column":65,"index":159},"end":{"line":4,"column":70,"index":164},"identifierName":"Types"},"name":"Types"},"computed":false,"property":{"type":"Identifier","start":165,"end":169,"loc":{"start":{"line":4,"column":71,"index":165},"end":{"line":4,"column":75,"index":169},"identifierName":"Date"},"name":"Date"}},"arguments":[]}

      at visitRealmClassProperty (src/plugin/index.ts:329:17)
          at Array.map (<anonymous>)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new Types.Date();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "date",
            optional: true,
            default: () => new Types.Date()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    FISK 11: {"type":"NewExpression","start":166,"end":182,"loc":{"start":{"line":4,"column":72,"index":166},"end":{"line":4,"column":88,"index":182}},"callee":{"type":"MemberExpression","start":170,"end":180,"loc":{"start":{"line":4,"column":76,"index":170},"end":{"line":4,"column":86,"index":180}},"object":{"type":"Identifier","start":170,"end":175,"loc":{"start":{"line":4,"column":76,"index":170},"end":{"line":4,"column":81,"index":175},"identifierName":"Types"},"name":"Types"},"computed":false,"property":{"type":"Identifier","start":176,"end":180,"loc":{"start":{"line":4,"column":82,"index":176},"end":{"line":4,"column":86,"index":180},"identifierName":"Date"},"name":"Date"}},"arguments":[]}

      at visitRealmClassProperty (src/plugin/index.ts:329:17)
          at Array.map (<anonymous>)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new Types.Date();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "date",
            optional: true,
            default: () => new Types.Date()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    FISK 11: {"type":"NewExpression","start":166,"end":182,"loc":{"start":{"line":4,"column":72,"index":166},"end":{"line":4,"column":88,"index":182}},"callee":{"type":"MemberExpression","start":170,"end":180,"loc":{"start":{"line":4,"column":76,"index":170},"end":{"line":4,"column":86,"index":180}},"object":{"type":"Identifier","start":170,"end":175,"loc":{"start":{"line":4,"column":76,"index":170},"end":{"line":4,"column":81,"index":175},"identifierName":"Types"},"name":"Types"},"computed":false,"property":{"type":"Identifier","start":176,"end":180,"loc":{"start":{"line":4,"column":82,"index":176},"end":{"line":4,"column":86,"index":180},"identifierName":"Date"},"name":"Date"}},"arguments":[]}

      at visitRealmClassProperty (src/plugin/index.ts:329:17)
          at Array.map (<anonymous>)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new Types.Date();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "date",
            optional: true,
            default: () => new Types.Date()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    FISK 11: {"type":"NewExpression","start":161,"end":177,"loc":{"start":{"line":4,"column":67,"index":161},"end":{"line":4,"column":83,"index":177}},"callee":{"type":"MemberExpression","start":165,"end":175,"loc":{"start":{"line":4,"column":71,"index":165},"end":{"line":4,"column":81,"index":175}},"object":{"type":"Identifier","start":165,"end":170,"loc":{"start":{"line":4,"column":71,"index":165},"end":{"line":4,"column":76,"index":170},"identifierName":"Types"},"name":"Types"},"computed":false,"property":{"type":"Identifier","start":171,"end":175,"loc":{"start":{"line":4,"column":77,"index":171},"end":{"line":4,"column":81,"index":175},"identifierName":"Date"},"name":"Date"}},"arguments":[]}

      at visitRealmClassProperty (src/plugin/index.ts:329:17)
          at Array.map (<anonymous>)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new Types.Date();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "date",
            optional: true,
            default: () => new Types.Date()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    FISK 11: {"type":"NewExpression","start":172,"end":188,"loc":{"start":{"line":4,"column":78,"index":172},"end":{"line":4,"column":94,"index":188}},"callee":{"type":"MemberExpression","start":176,"end":186,"loc":{"start":{"line":4,"column":82,"index":176},"end":{"line":4,"column":92,"index":186}},"object":{"type":"Identifier","start":176,"end":181,"loc":{"start":{"line":4,"column":82,"index":176},"end":{"line":4,"column":87,"index":181},"identifierName":"Types"},"name":"Types"},"computed":false,"property":{"type":"Identifier","start":182,"end":186,"loc":{"start":{"line":4,"column":88,"index":182},"end":{"line":4,"column":92,"index":186},"identifierName":"Date"},"name":"Date"}},"arguments":[]}

      at visitRealmClassProperty (src/plugin/index.ts:329:17)
          at Array.map (<anonymous>)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new Types.Date();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "date",
            optional: true,
            default: () => new Types.Date()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    FISK 11: {"type":"NewExpression","start":172,"end":188,"loc":{"start":{"line":4,"column":78,"index":172},"end":{"line":4,"column":94,"index":188}},"callee":{"type":"MemberExpression","start":176,"end":186,"loc":{"start":{"line":4,"column":82,"index":176},"end":{"line":4,"column":92,"index":186}},"object":{"type":"Identifier","start":176,"end":181,"loc":{"start":{"line":4,"column":82,"index":176},"end":{"line":4,"column":87,"index":181},"identifierName":"Types"},"name":"Types"},"computed":false,"property":{"type":"Identifier","start":182,"end":186,"loc":{"start":{"line":4,"column":88,"index":182},"end":{"line":4,"column":92,"index":186},"identifierName":"Date"},"name":"Date"}},"arguments":[]}

      at visitRealmClassProperty (src/plugin/index.ts:329:17)
          at Array.map (<anonymous>)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new Types.Date();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "date",
            optional: true,
            default: () => new Types.Date()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    FISK 11: {"type":"NewExpression","start":167,"end":183,"loc":{"start":{"line":4,"column":73,"index":167},"end":{"line":4,"column":89,"index":183}},"callee":{"type":"MemberExpression","start":171,"end":181,"loc":{"start":{"line":4,"column":77,"index":171},"end":{"line":4,"column":87,"index":181}},"object":{"type":"Identifier","start":171,"end":176,"loc":{"start":{"line":4,"column":77,"index":171},"end":{"line":4,"column":82,"index":176},"identifierName":"Types"},"name":"Types"},"computed":false,"property":{"type":"Identifier","start":177,"end":181,"loc":{"start":{"line":4,"column":83,"index":177},"end":{"line":4,"column":87,"index":181},"identifierName":"Date"},"name":"Date"}},"arguments":[]}

      at visitRealmClassProperty (src/plugin/index.ts:329:17)
          at Array.map (<anonymous>)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new Types.Date();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "date",
            optional: true,
            default: () => new Types.Date()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    FISK 11: {"type":"NewExpression","start":178,"end":194,"loc":{"start":{"line":4,"column":84,"index":178},"end":{"line":4,"column":100,"index":194}},"callee":{"type":"MemberExpression","start":182,"end":192,"loc":{"start":{"line":4,"column":88,"index":182},"end":{"line":4,"column":98,"index":192}},"object":{"type":"Identifier","start":182,"end":187,"loc":{"start":{"line":4,"column":88,"index":182},"end":{"line":4,"column":93,"index":187},"identifierName":"Types"},"name":"Types"},"computed":false,"property":{"type":"Identifier","start":188,"end":192,"loc":{"start":{"line":4,"column":94,"index":188},"end":{"line":4,"column":98,"index":192},"identifierName":"Date"},"name":"Date"}},"arguments":[]}

      at visitRealmClassProperty (src/plugin/index.ts:329:17)
          at Array.map (<anonymous>)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new Types.Date();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "date",
            optional: true,
            default: () => new Types.Date()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    FISK 11: {"type":"NewExpression","start":178,"end":194,"loc":{"start":{"line":4,"column":84,"index":178},"end":{"line":4,"column":100,"index":194}},"callee":{"type":"MemberExpression","start":182,"end":192,"loc":{"start":{"line":4,"column":88,"index":182},"end":{"line":4,"column":98,"index":192}},"object":{"type":"Identifier","start":182,"end":187,"loc":{"start":{"line":4,"column":88,"index":182},"end":{"line":4,"column":93,"index":187},"identifierName":"Types"},"name":"Types"},"computed":false,"property":{"type":"Identifier","start":188,"end":192,"loc":{"start":{"line":4,"column":94,"index":188},"end":{"line":4,"column":98,"index":192},"identifierName":"Date"},"name":"Date"}},"arguments":[]}

      at visitRealmClassProperty (src/plugin/index.ts:329:17)
          at Array.map (<anonymous>)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new Types.Date();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "date",
            optional: true,
            default: () => new Types.Date()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    FISK 11: {"type":"NewExpression","start":149,"end":165,"loc":{"start":{"line":4,"column":55,"index":149},"end":{"line":4,"column":71,"index":165}},"callee":{"type":"MemberExpression","start":153,"end":163,"loc":{"start":{"line":4,"column":59,"index":153},"end":{"line":4,"column":69,"index":163}},"object":{"type":"Identifier","start":153,"end":158,"loc":{"start":{"line":4,"column":59,"index":153},"end":{"line":4,"column":64,"index":158},"identifierName":"Types"},"name":"Types"},"computed":false,"property":{"type":"Identifier","start":159,"end":163,"loc":{"start":{"line":4,"column":65,"index":159},"end":{"line":4,"column":69,"index":163},"identifierName":"Date"},"name":"Date"}},"arguments":[]}

      at visitRealmClassProperty (src/plugin/index.ts:329:17)
          at Array.map (<anonymous>)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new Types.Date();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "date",
            optional: true,
            default: () => new Types.Date()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    FISK 11: {"type":"NewExpression","start":154,"end":176,"loc":{"start":{"line":4,"column":60,"index":154},"end":{"line":4,"column":82,"index":176}},"callee":{"type":"MemberExpression","start":158,"end":174,"loc":{"start":{"line":4,"column":64,"index":158},"end":{"line":4,"column":80,"index":174}},"object":{"type":"MemberExpression","start":158,"end":169,"loc":{"start":{"line":4,"column":64,"index":158},"end":{"line":4,"column":75,"index":169}},"object":{"type":"Identifier","start":158,"end":163,"loc":{"start":{"line":4,"column":64,"index":158},"end":{"line":4,"column":69,"index":163},"identifierName":"Realm"},"name":"Realm"},"computed":false,"property":{"type":"Identifier","start":164,"end":169,"loc":{"start":{"line":4,"column":70,"index":164},"end":{"line":4,"column":75,"index":169},"identifierName":"Types"},"name":"Types"}},"computed":false,"property":{"type":"Identifier","start":170,"end":174,"loc":{"start":{"line":4,"column":76,"index":170},"end":{"line":4,"column":80,"index":174},"identifierName":"Date"},"name":"Date"}},"arguments":[]}

      at visitRealmClassProperty (src/plugin/index.ts:329:17)
          at Array.map (<anonymous>)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new Realm.Types.Date();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "date",
            default: () => new Realm.Types.Date()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    FISK 11: {"type":"NewExpression","start":160,"end":182,"loc":{"start":{"line":4,"column":66,"index":160},"end":{"line":4,"column":88,"index":182}},"callee":{"type":"MemberExpression","start":164,"end":180,"loc":{"start":{"line":4,"column":70,"index":164},"end":{"line":4,"column":86,"index":180}},"object":{"type":"MemberExpression","start":164,"end":175,"loc":{"start":{"line":4,"column":70,"index":164},"end":{"line":4,"column":81,"index":175}},"object":{"type":"Identifier","start":164,"end":169,"loc":{"start":{"line":4,"column":70,"index":164},"end":{"line":4,"column":75,"index":169},"identifierName":"Realm"},"name":"Realm"},"computed":false,"property":{"type":"Identifier","start":170,"end":175,"loc":{"start":{"line":4,"column":76,"index":170},"end":{"line":4,"column":81,"index":175},"identifierName":"Types"},"name":"Types"}},"computed":false,"property":{"type":"Identifier","start":176,"end":180,"loc":{"start":{"line":4,"column":82,"index":176},"end":{"line":4,"column":86,"index":180},"identifierName":"Date"},"name":"Date"}},"arguments":[]}

      at visitRealmClassProperty (src/plugin/index.ts:329:17)
          at Array.map (<anonymous>)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new Realm.Types.Date();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "date",
            default: () => new Realm.Types.Date()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    FISK 11: {"type":"NewExpression","start":166,"end":188,"loc":{"start":{"line":4,"column":72,"index":166},"end":{"line":4,"column":94,"index":188}},"callee":{"type":"MemberExpression","start":170,"end":186,"loc":{"start":{"line":4,"column":76,"index":170},"end":{"line":4,"column":92,"index":186}},"object":{"type":"MemberExpression","start":170,"end":181,"loc":{"start":{"line":4,"column":76,"index":170},"end":{"line":4,"column":87,"index":181}},"object":{"type":"Identifier","start":170,"end":175,"loc":{"start":{"line":4,"column":76,"index":170},"end":{"line":4,"column":81,"index":175},"identifierName":"Realm"},"name":"Realm"},"computed":false,"property":{"type":"Identifier","start":176,"end":181,"loc":{"start":{"line":4,"column":82,"index":176},"end":{"line":4,"column":87,"index":181},"identifierName":"Types"},"name":"Types"}},"computed":false,"property":{"type":"Identifier","start":182,"end":186,"loc":{"start":{"line":4,"column":88,"index":182},"end":{"line":4,"column":92,"index":186},"identifierName":"Date"},"name":"Date"}},"arguments":[]}

      at visitRealmClassProperty (src/plugin/index.ts:329:17)
          at Array.map (<anonymous>)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new Realm.Types.Date();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "date",
            default: () => new Realm.Types.Date()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    FISK 11: {"type":"NewExpression","start":148,"end":170,"loc":{"start":{"line":4,"column":54,"index":148},"end":{"line":4,"column":76,"index":170}},"callee":{"type":"MemberExpression","start":152,"end":168,"loc":{"start":{"line":4,"column":58,"index":152},"end":{"line":4,"column":74,"index":168}},"object":{"type":"MemberExpression","start":152,"end":163,"loc":{"start":{"line":4,"column":58,"index":152},"end":{"line":4,"column":69,"index":163}},"object":{"type":"Identifier","start":152,"end":157,"loc":{"start":{"line":4,"column":58,"index":152},"end":{"line":4,"column":63,"index":157},"identifierName":"Realm"},"name":"Realm"},"computed":false,"property":{"type":"Identifier","start":158,"end":163,"loc":{"start":{"line":4,"column":64,"index":158},"end":{"line":4,"column":69,"index":163},"identifierName":"Types"},"name":"Types"}},"computed":false,"property":{"type":"Identifier","start":164,"end":168,"loc":{"start":{"line":4,"column":70,"index":164},"end":{"line":4,"column":74,"index":168},"identifierName":"Date"},"name":"Date"}},"arguments":[]}

      at visitRealmClassProperty (src/plugin/index.ts:329:17)
          at Array.map (<anonymous>)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new Realm.Types.Date();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "date",
            default: () => new Realm.Types.Date()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    FISK 11: {"type":"NewExpression","start":155,"end":177,"loc":{"start":{"line":4,"column":61,"index":155},"end":{"line":4,"column":83,"index":177}},"callee":{"type":"MemberExpression","start":159,"end":175,"loc":{"start":{"line":4,"column":65,"index":159},"end":{"line":4,"column":81,"index":175}},"object":{"type":"MemberExpression","start":159,"end":170,"loc":{"start":{"line":4,"column":65,"index":159},"end":{"line":4,"column":76,"index":170}},"object":{"type":"Identifier","start":159,"end":164,"loc":{"start":{"line":4,"column":65,"index":159},"end":{"line":4,"column":70,"index":164},"identifierName":"Realm"},"name":"Realm"},"computed":false,"property":{"type":"Identifier","start":165,"end":170,"loc":{"start":{"line":4,"column":71,"index":165},"end":{"line":4,"column":76,"index":170},"identifierName":"Types"},"name":"Types"}},"computed":false,"property":{"type":"Identifier","start":171,"end":175,"loc":{"start":{"line":4,"column":77,"index":171},"end":{"line":4,"column":81,"index":175},"identifierName":"Date"},"name":"Date"}},"arguments":[]}

      at visitRealmClassProperty (src/plugin/index.ts:329:17)
          at Array.map (<anonymous>)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new Realm.Types.Date();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "date",
            optional: true,
            default: () => new Realm.Types.Date()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    FISK 11: {"type":"NewExpression","start":166,"end":188,"loc":{"start":{"line":4,"column":72,"index":166},"end":{"line":4,"column":94,"index":188}},"callee":{"type":"MemberExpression","start":170,"end":186,"loc":{"start":{"line":4,"column":76,"index":170},"end":{"line":4,"column":92,"index":186}},"object":{"type":"MemberExpression","start":170,"end":181,"loc":{"start":{"line":4,"column":76,"index":170},"end":{"line":4,"column":87,"index":181}},"object":{"type":"Identifier","start":170,"end":175,"loc":{"start":{"line":4,"column":76,"index":170},"end":{"line":4,"column":81,"index":175},"identifierName":"Realm"},"name":"Realm"},"computed":false,"property":{"type":"Identifier","start":176,"end":181,"loc":{"start":{"line":4,"column":82,"index":176},"end":{"line":4,"column":87,"index":181},"identifierName":"Types"},"name":"Types"}},"computed":false,"property":{"type":"Identifier","start":182,"end":186,"loc":{"start":{"line":4,"column":88,"index":182},"end":{"line":4,"column":92,"index":186},"identifierName":"Date"},"name":"Date"}},"arguments":[]}

      at visitRealmClassProperty (src/plugin/index.ts:329:17)
          at Array.map (<anonymous>)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new Realm.Types.Date();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "date",
            optional: true,
            default: () => new Realm.Types.Date()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    FISK 11: {"type":"NewExpression","start":166,"end":188,"loc":{"start":{"line":4,"column":72,"index":166},"end":{"line":4,"column":94,"index":188}},"callee":{"type":"MemberExpression","start":170,"end":186,"loc":{"start":{"line":4,"column":76,"index":170},"end":{"line":4,"column":92,"index":186}},"object":{"type":"MemberExpression","start":170,"end":181,"loc":{"start":{"line":4,"column":76,"index":170},"end":{"line":4,"column":87,"index":181}},"object":{"type":"Identifier","start":170,"end":175,"loc":{"start":{"line":4,"column":76,"index":170},"end":{"line":4,"column":81,"index":175},"identifierName":"Realm"},"name":"Realm"},"computed":false,"property":{"type":"Identifier","start":176,"end":181,"loc":{"start":{"line":4,"column":82,"index":176},"end":{"line":4,"column":87,"index":181},"identifierName":"Types"},"name":"Types"}},"computed":false,"property":{"type":"Identifier","start":182,"end":186,"loc":{"start":{"line":4,"column":88,"index":182},"end":{"line":4,"column":92,"index":186},"identifierName":"Date"},"name":"Date"}},"arguments":[]}

      at visitRealmClassProperty (src/plugin/index.ts:329:17)
          at Array.map (<anonymous>)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new Realm.Types.Date();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "date",
            optional: true,
            default: () => new Realm.Types.Date()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    FISK 11: {"type":"NewExpression","start":161,"end":183,"loc":{"start":{"line":4,"column":67,"index":161},"end":{"line":4,"column":89,"index":183}},"callee":{"type":"MemberExpression","start":165,"end":181,"loc":{"start":{"line":4,"column":71,"index":165},"end":{"line":4,"column":87,"index":181}},"object":{"type":"MemberExpression","start":165,"end":176,"loc":{"start":{"line":4,"column":71,"index":165},"end":{"line":4,"column":82,"index":176}},"object":{"type":"Identifier","start":165,"end":170,"loc":{"start":{"line":4,"column":71,"index":165},"end":{"line":4,"column":76,"index":170},"identifierName":"Realm"},"name":"Realm"},"computed":false,"property":{"type":"Identifier","start":171,"end":176,"loc":{"start":{"line":4,"column":77,"index":171},"end":{"line":4,"column":82,"index":176},"identifierName":"Types"},"name":"Types"}},"computed":false,"property":{"type":"Identifier","start":177,"end":181,"loc":{"start":{"line":4,"column":83,"index":177},"end":{"line":4,"column":87,"index":181},"identifierName":"Date"},"name":"Date"}},"arguments":[]}

      at visitRealmClassProperty (src/plugin/index.ts:329:17)
          at Array.map (<anonymous>)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new Realm.Types.Date();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "date",
            optional: true,
            default: () => new Realm.Types.Date()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    FISK 11: {"type":"NewExpression","start":172,"end":194,"loc":{"start":{"line":4,"column":78,"index":172},"end":{"line":4,"column":100,"index":194}},"callee":{"type":"MemberExpression","start":176,"end":192,"loc":{"start":{"line":4,"column":82,"index":176},"end":{"line":4,"column":98,"index":192}},"object":{"type":"MemberExpression","start":176,"end":187,"loc":{"start":{"line":4,"column":82,"index":176},"end":{"line":4,"column":93,"index":187}},"object":{"type":"Identifier","start":176,"end":181,"loc":{"start":{"line":4,"column":82,"index":176},"end":{"line":4,"column":87,"index":181},"identifierName":"Realm"},"name":"Realm"},"computed":false,"property":{"type":"Identifier","start":182,"end":187,"loc":{"start":{"line":4,"column":88,"index":182},"end":{"line":4,"column":93,"index":187},"identifierName":"Types"},"name":"Types"}},"computed":false,"property":{"type":"Identifier","start":188,"end":192,"loc":{"start":{"line":4,"column":94,"index":188},"end":{"line":4,"column":98,"index":192},"identifierName":"Date"},"name":"Date"}},"arguments":[]}

      at visitRealmClassProperty (src/plugin/index.ts:329:17)
          at Array.map (<anonymous>)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new Realm.Types.Date();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "date",
            optional: true,
            default: () => new Realm.Types.Date()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    FISK 11: {"type":"NewExpression","start":172,"end":194,"loc":{"start":{"line":4,"column":78,"index":172},"end":{"line":4,"column":100,"index":194}},"callee":{"type":"MemberExpression","start":176,"end":192,"loc":{"start":{"line":4,"column":82,"index":176},"end":{"line":4,"column":98,"index":192}},"object":{"type":"MemberExpression","start":176,"end":187,"loc":{"start":{"line":4,"column":82,"index":176},"end":{"line":4,"column":93,"index":187}},"object":{"type":"Identifier","start":176,"end":181,"loc":{"start":{"line":4,"column":82,"index":176},"end":{"line":4,"column":87,"index":181},"identifierName":"Realm"},"name":"Realm"},"computed":false,"property":{"type":"Identifier","start":182,"end":187,"loc":{"start":{"line":4,"column":88,"index":182},"end":{"line":4,"column":93,"index":187},"identifierName":"Types"},"name":"Types"}},"computed":false,"property":{"type":"Identifier","start":188,"end":192,"loc":{"start":{"line":4,"column":94,"index":188},"end":{"line":4,"column":98,"index":192},"identifierName":"Date"},"name":"Date"}},"arguments":[]}

      at visitRealmClassProperty (src/plugin/index.ts:329:17)
          at Array.map (<anonymous>)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new Realm.Types.Date();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "date",
            optional: true,
            default: () => new Realm.Types.Date()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    FISK 11: {"type":"NewExpression","start":167,"end":189,"loc":{"start":{"line":4,"column":73,"index":167},"end":{"line":4,"column":95,"index":189}},"callee":{"type":"MemberExpression","start":171,"end":187,"loc":{"start":{"line":4,"column":77,"index":171},"end":{"line":4,"column":93,"index":187}},"object":{"type":"MemberExpression","start":171,"end":182,"loc":{"start":{"line":4,"column":77,"index":171},"end":{"line":4,"column":88,"index":182}},"object":{"type":"Identifier","start":171,"end":176,"loc":{"start":{"line":4,"column":77,"index":171},"end":{"line":4,"column":82,"index":176},"identifierName":"Realm"},"name":"Realm"},"computed":false,"property":{"type":"Identifier","start":177,"end":182,"loc":{"start":{"line":4,"column":83,"index":177},"end":{"line":4,"column":88,"index":182},"identifierName":"Types"},"name":"Types"}},"computed":false,"property":{"type":"Identifier","start":183,"end":187,"loc":{"start":{"line":4,"column":89,"index":183},"end":{"line":4,"column":93,"index":187},"identifierName":"Date"},"name":"Date"}},"arguments":[]}

      at visitRealmClassProperty (src/plugin/index.ts:329:17)
          at Array.map (<anonymous>)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new Realm.Types.Date();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "date",
            optional: true,
            default: () => new Realm.Types.Date()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    FISK 11: {"type":"NewExpression","start":178,"end":200,"loc":{"start":{"line":4,"column":84,"index":178},"end":{"line":4,"column":106,"index":200}},"callee":{"type":"MemberExpression","start":182,"end":198,"loc":{"start":{"line":4,"column":88,"index":182},"end":{"line":4,"column":104,"index":198}},"object":{"type":"MemberExpression","start":182,"end":193,"loc":{"start":{"line":4,"column":88,"index":182},"end":{"line":4,"column":99,"index":193}},"object":{"type":"Identifier","start":182,"end":187,"loc":{"start":{"line":4,"column":88,"index":182},"end":{"line":4,"column":93,"index":187},"identifierName":"Realm"},"name":"Realm"},"computed":false,"property":{"type":"Identifier","start":188,"end":193,"loc":{"start":{"line":4,"column":94,"index":188},"end":{"line":4,"column":99,"index":193},"identifierName":"Types"},"name":"Types"}},"computed":false,"property":{"type":"Identifier","start":194,"end":198,"loc":{"start":{"line":4,"column":100,"index":194},"end":{"line":4,"column":104,"index":198},"identifierName":"Date"},"name":"Date"}},"arguments":[]}

      at visitRealmClassProperty (src/plugin/index.ts:329:17)
          at Array.map (<anonymous>)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new Realm.Types.Date();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "date",
            optional: true,
            default: () => new Realm.Types.Date()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    FISK 11: {"type":"NewExpression","start":178,"end":200,"loc":{"start":{"line":4,"column":84,"index":178},"end":{"line":4,"column":106,"index":200}},"callee":{"type":"MemberExpression","start":182,"end":198,"loc":{"start":{"line":4,"column":88,"index":182},"end":{"line":4,"column":104,"index":198}},"object":{"type":"MemberExpression","start":182,"end":193,"loc":{"start":{"line":4,"column":88,"index":182},"end":{"line":4,"column":99,"index":193}},"object":{"type":"Identifier","start":182,"end":187,"loc":{"start":{"line":4,"column":88,"index":182},"end":{"line":4,"column":93,"index":187},"identifierName":"Realm"},"name":"Realm"},"computed":false,"property":{"type":"Identifier","start":188,"end":193,"loc":{"start":{"line":4,"column":94,"index":188},"end":{"line":4,"column":99,"index":193},"identifierName":"Types"},"name":"Types"}},"computed":false,"property":{"type":"Identifier","start":194,"end":198,"loc":{"start":{"line":4,"column":100,"index":194},"end":{"line":4,"column":104,"index":198},"identifierName":"Date"},"name":"Date"}},"arguments":[]}

      at visitRealmClassProperty (src/plugin/index.ts:329:17)
          at Array.map (<anonymous>)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new Realm.Types.Date();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "date",
            optional: true,
            default: () => new Realm.Types.Date()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    FISK 11: {"type":"NewExpression","start":149,"end":171,"loc":{"start":{"line":4,"column":55,"index":149},"end":{"line":4,"column":77,"index":171}},"callee":{"type":"MemberExpression","start":153,"end":169,"loc":{"start":{"line":4,"column":59,"index":153},"end":{"line":4,"column":75,"index":169}},"object":{"type":"MemberExpression","start":153,"end":164,"loc":{"start":{"line":4,"column":59,"index":153},"end":{"line":4,"column":70,"index":164}},"object":{"type":"Identifier","start":153,"end":158,"loc":{"start":{"line":4,"column":59,"index":153},"end":{"line":4,"column":64,"index":158},"identifierName":"Realm"},"name":"Realm"},"computed":false,"property":{"type":"Identifier","start":159,"end":164,"loc":{"start":{"line":4,"column":65,"index":159},"end":{"line":4,"column":70,"index":164},"identifierName":"Types"},"name":"Types"}},"computed":false,"property":{"type":"Identifier","start":165,"end":169,"loc":{"start":{"line":4,"column":71,"index":165},"end":{"line":4,"column":75,"index":169},"identifierName":"Date"},"name":"Date"}},"arguments":[]}

      at visitRealmClassProperty (src/plugin/index.ts:329:17)
          at Array.map (<anonymous>)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new Realm.Types.Date();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "date",
            optional: true,
            default: () => new Realm.Types.Date()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "data"
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "data"
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "data"
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "data",
            optional: true
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "data",
            optional: true
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "data",
            optional: true
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "data",
            optional: true
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "data",
            optional: true
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "data",
            optional: true
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "data",
            optional: true
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "data",
            optional: true
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "data",
            optional: true
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    FISK 11: {"type":"NewExpression","start":161,"end":178,"loc":{"start":{"line":4,"column":67,"index":161},"end":{"line":4,"column":84,"index":178}},"callee":{"type":"Identifier","start":165,"end":176,"loc":{"start":{"line":4,"column":71,"index":165},"end":{"line":4,"column":82,"index":176},"identifierName":"ArrayBuffer"},"name":"ArrayBuffer"},"arguments":[]}

      at visitRealmClassProperty (src/plugin/index.ts:329:17)
          at Array.map (<anonymous>)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new ArrayBuffer();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "data",
            default: () => new ArrayBuffer()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    FISK 11: {"type":"NewExpression","start":160,"end":177,"loc":{"start":{"line":4,"column":66,"index":160},"end":{"line":4,"column":83,"index":177}},"callee":{"type":"Identifier","start":164,"end":175,"loc":{"start":{"line":4,"column":70,"index":164},"end":{"line":4,"column":81,"index":175},"identifierName":"ArrayBuffer"},"name":"ArrayBuffer"},"arguments":[]}

      at visitRealmClassProperty (src/plugin/index.ts:329:17)
          at Array.map (<anonymous>)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new ArrayBuffer();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "data",
            default: () => new ArrayBuffer()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    FISK 11: {"type":"NewExpression","start":166,"end":183,"loc":{"start":{"line":4,"column":72,"index":166},"end":{"line":4,"column":89,"index":183}},"callee":{"type":"Identifier","start":170,"end":181,"loc":{"start":{"line":4,"column":76,"index":170},"end":{"line":4,"column":87,"index":181},"identifierName":"ArrayBuffer"},"name":"ArrayBuffer"},"arguments":[]}

      at visitRealmClassProperty (src/plugin/index.ts:329:17)
          at Array.map (<anonymous>)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new ArrayBuffer();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "data",
            default: () => new ArrayBuffer()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    FISK 11: {"type":"NewExpression","start":148,"end":165,"loc":{"start":{"line":4,"column":54,"index":148},"end":{"line":4,"column":71,"index":165}},"callee":{"type":"Identifier","start":152,"end":163,"loc":{"start":{"line":4,"column":58,"index":152},"end":{"line":4,"column":69,"index":163},"identifierName":"ArrayBuffer"},"name":"ArrayBuffer"},"arguments":[]}

      at visitRealmClassProperty (src/plugin/index.ts:329:17)
          at Array.map (<anonymous>)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new ArrayBuffer();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "data",
            default: () => new ArrayBuffer()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    FISK 11: {"type":"NewExpression","start":162,"end":179,"loc":{"start":{"line":4,"column":68,"index":162},"end":{"line":4,"column":85,"index":179}},"callee":{"type":"Identifier","start":166,"end":177,"loc":{"start":{"line":4,"column":72,"index":166},"end":{"line":4,"column":83,"index":177},"identifierName":"ArrayBuffer"},"name":"ArrayBuffer"},"arguments":[]}

      at visitRealmClassProperty (src/plugin/index.ts:329:17)
          at Array.map (<anonymous>)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new ArrayBuffer();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "data",
            optional: true,
            default: () => new ArrayBuffer()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    FISK 11: {"type":"NewExpression","start":173,"end":190,"loc":{"start":{"line":4,"column":79,"index":173},"end":{"line":4,"column":96,"index":190}},"callee":{"type":"Identifier","start":177,"end":188,"loc":{"start":{"line":4,"column":83,"index":177},"end":{"line":4,"column":94,"index":188},"identifierName":"ArrayBuffer"},"name":"ArrayBuffer"},"arguments":[]}

      at visitRealmClassProperty (src/plugin/index.ts:329:17)
          at Array.map (<anonymous>)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new ArrayBuffer();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "data",
            optional: true,
            default: () => new ArrayBuffer()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    FISK 11: {"type":"NewExpression","start":173,"end":190,"loc":{"start":{"line":4,"column":79,"index":173},"end":{"line":4,"column":96,"index":190}},"callee":{"type":"Identifier","start":177,"end":188,"loc":{"start":{"line":4,"column":83,"index":177},"end":{"line":4,"column":94,"index":188},"identifierName":"ArrayBuffer"},"name":"ArrayBuffer"},"arguments":[]}

      at visitRealmClassProperty (src/plugin/index.ts:329:17)
          at Array.map (<anonymous>)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new ArrayBuffer();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "data",
            optional: true,
            default: () => new ArrayBuffer()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    FISK 11: {"type":"NewExpression","start":161,"end":178,"loc":{"start":{"line":4,"column":67,"index":161},"end":{"line":4,"column":84,"index":178}},"callee":{"type":"Identifier","start":165,"end":176,"loc":{"start":{"line":4,"column":71,"index":165},"end":{"line":4,"column":82,"index":176},"identifierName":"ArrayBuffer"},"name":"ArrayBuffer"},"arguments":[]}

      at visitRealmClassProperty (src/plugin/index.ts:329:17)
          at Array.map (<anonymous>)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new ArrayBuffer();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "data",
            optional: true,
            default: () => new ArrayBuffer()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    FISK 11: {"type":"NewExpression","start":172,"end":189,"loc":{"start":{"line":4,"column":78,"index":172},"end":{"line":4,"column":95,"index":189}},"callee":{"type":"Identifier","start":176,"end":187,"loc":{"start":{"line":4,"column":82,"index":176},"end":{"line":4,"column":93,"index":187},"identifierName":"ArrayBuffer"},"name":"ArrayBuffer"},"arguments":[]}

      at visitRealmClassProperty (src/plugin/index.ts:329:17)
          at Array.map (<anonymous>)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new ArrayBuffer();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "data",
            optional: true,
            default: () => new ArrayBuffer()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    FISK 11: {"type":"NewExpression","start":172,"end":189,"loc":{"start":{"line":4,"column":78,"index":172},"end":{"line":4,"column":95,"index":189}},"callee":{"type":"Identifier","start":176,"end":187,"loc":{"start":{"line":4,"column":82,"index":176},"end":{"line":4,"column":93,"index":187},"identifierName":"ArrayBuffer"},"name":"ArrayBuffer"},"arguments":[]}

      at visitRealmClassProperty (src/plugin/index.ts:329:17)
          at Array.map (<anonymous>)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new ArrayBuffer();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "data",
            optional: true,
            default: () => new ArrayBuffer()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    FISK 11: {"type":"NewExpression","start":167,"end":184,"loc":{"start":{"line":4,"column":73,"index":167},"end":{"line":4,"column":90,"index":184}},"callee":{"type":"Identifier","start":171,"end":182,"loc":{"start":{"line":4,"column":77,"index":171},"end":{"line":4,"column":88,"index":182},"identifierName":"ArrayBuffer"},"name":"ArrayBuffer"},"arguments":[]}

      at visitRealmClassProperty (src/plugin/index.ts:329:17)
          at Array.map (<anonymous>)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new ArrayBuffer();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "data",
            optional: true,
            default: () => new ArrayBuffer()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    FISK 11: {"type":"NewExpression","start":178,"end":195,"loc":{"start":{"line":4,"column":84,"index":178},"end":{"line":4,"column":101,"index":195}},"callee":{"type":"Identifier","start":182,"end":193,"loc":{"start":{"line":4,"column":88,"index":182},"end":{"line":4,"column":99,"index":193},"identifierName":"ArrayBuffer"},"name":"ArrayBuffer"},"arguments":[]}

      at visitRealmClassProperty (src/plugin/index.ts:329:17)
          at Array.map (<anonymous>)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new ArrayBuffer();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "data",
            optional: true,
            default: () => new ArrayBuffer()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    FISK 11: {"type":"NewExpression","start":178,"end":195,"loc":{"start":{"line":4,"column":84,"index":178},"end":{"line":4,"column":101,"index":195}},"callee":{"type":"Identifier","start":182,"end":193,"loc":{"start":{"line":4,"column":88,"index":182},"end":{"line":4,"column":99,"index":193},"identifierName":"ArrayBuffer"},"name":"ArrayBuffer"},"arguments":[]}

      at visitRealmClassProperty (src/plugin/index.ts:329:17)
          at Array.map (<anonymous>)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new ArrayBuffer();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "data",
            optional: true,
            default: () => new ArrayBuffer()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    FISK 11: {"type":"NewExpression","start":149,"end":166,"loc":{"start":{"line":4,"column":55,"index":149},"end":{"line":4,"column":72,"index":166}},"callee":{"type":"Identifier","start":153,"end":164,"loc":{"start":{"line":4,"column":59,"index":153},"end":{"line":4,"column":70,"index":164},"identifierName":"ArrayBuffer"},"name":"ArrayBuffer"},"arguments":[]}

      at visitRealmClassProperty (src/plugin/index.ts:329:17)
          at Array.map (<anonymous>)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new ArrayBuffer();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "data",
            optional: true,
            default: () => new ArrayBuffer()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    FISK 11: {"type":"NewExpression","start":161,"end":177,"loc":{"start":{"line":4,"column":67,"index":161},"end":{"line":4,"column":83,"index":177}},"callee":{"type":"MemberExpression","start":165,"end":175,"loc":{"start":{"line":4,"column":71,"index":165},"end":{"line":4,"column":81,"index":175}},"object":{"type":"Identifier","start":165,"end":170,"loc":{"start":{"line":4,"column":71,"index":165},"end":{"line":4,"column":76,"index":170},"identifierName":"Types"},"name":"Types"},"computed":false,"property":{"type":"Identifier","start":171,"end":175,"loc":{"start":{"line":4,"column":77,"index":171},"end":{"line":4,"column":81,"index":175},"identifierName":"Data"},"name":"Data"}},"arguments":[]}

      at visitRealmClassProperty (src/plugin/index.ts:329:17)
          at Array.map (<anonymous>)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new Types.Data();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "data",
            default: () => new Types.Data()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    FISK 11: {"type":"NewExpression","start":160,"end":176,"loc":{"start":{"line":4,"column":66,"index":160},"end":{"line":4,"column":82,"index":176}},"callee":{"type":"MemberExpression","start":164,"end":174,"loc":{"start":{"line":4,"column":70,"index":164},"end":{"line":4,"column":80,"index":174}},"object":{"type":"Identifier","start":164,"end":169,"loc":{"start":{"line":4,"column":70,"index":164},"end":{"line":4,"column":75,"index":169},"identifierName":"Types"},"name":"Types"},"computed":false,"property":{"type":"Identifier","start":170,"end":174,"loc":{"start":{"line":4,"column":76,"index":170},"end":{"line":4,"column":80,"index":174},"identifierName":"Data"},"name":"Data"}},"arguments":[]}

      at visitRealmClassProperty (src/plugin/index.ts:329:17)
          at Array.map (<anonymous>)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new Types.Data();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "data",
            default: () => new Types.Data()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    FISK 11: {"type":"NewExpression","start":166,"end":182,"loc":{"start":{"line":4,"column":72,"index":166},"end":{"line":4,"column":88,"index":182}},"callee":{"type":"MemberExpression","start":170,"end":180,"loc":{"start":{"line":4,"column":76,"index":170},"end":{"line":4,"column":86,"index":180}},"object":{"type":"Identifier","start":170,"end":175,"loc":{"start":{"line":4,"column":76,"index":170},"end":{"line":4,"column":81,"index":175},"identifierName":"Types"},"name":"Types"},"computed":false,"property":{"type":"Identifier","start":176,"end":180,"loc":{"start":{"line":4,"column":82,"index":176},"end":{"line":4,"column":86,"index":180},"identifierName":"Data"},"name":"Data"}},"arguments":[]}

      at visitRealmClassProperty (src/plugin/index.ts:329:17)
          at Array.map (<anonymous>)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new Types.Data();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "data",
            default: () => new Types.Data()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    FISK 11: {"type":"NewExpression","start":148,"end":164,"loc":{"start":{"line":4,"column":54,"index":148},"end":{"line":4,"column":70,"index":164}},"callee":{"type":"MemberExpression","start":152,"end":162,"loc":{"start":{"line":4,"column":58,"index":152},"end":{"line":4,"column":68,"index":162}},"object":{"type":"Identifier","start":152,"end":157,"loc":{"start":{"line":4,"column":58,"index":152},"end":{"line":4,"column":63,"index":157},"identifierName":"Types"},"name":"Types"},"computed":false,"property":{"type":"Identifier","start":158,"end":162,"loc":{"start":{"line":4,"column":64,"index":158},"end":{"line":4,"column":68,"index":162},"identifierName":"Data"},"name":"Data"}},"arguments":[]}

      at visitRealmClassProperty (src/plugin/index.ts:329:17)
          at Array.map (<anonymous>)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new Types.Data();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "data",
            default: () => new Types.Data()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    FISK 11: {"type":"NewExpression","start":162,"end":178,"loc":{"start":{"line":4,"column":68,"index":162},"end":{"line":4,"column":84,"index":178}},"callee":{"type":"MemberExpression","start":166,"end":176,"loc":{"start":{"line":4,"column":72,"index":166},"end":{"line":4,"column":82,"index":176}},"object":{"type":"Identifier","start":166,"end":171,"loc":{"start":{"line":4,"column":72,"index":166},"end":{"line":4,"column":77,"index":171},"identifierName":"Types"},"name":"Types"},"computed":false,"property":{"type":"Identifier","start":172,"end":176,"loc":{"start":{"line":4,"column":78,"index":172},"end":{"line":4,"column":82,"index":176},"identifierName":"Data"},"name":"Data"}},"arguments":[]}

      at visitRealmClassProperty (src/plugin/index.ts:329:17)
          at Array.map (<anonymous>)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new Types.Data();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "data",
            optional: true,
            default: () => new Types.Data()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    FISK 11: {"type":"NewExpression","start":173,"end":189,"loc":{"start":{"line":4,"column":79,"index":173},"end":{"line":4,"column":95,"index":189}},"callee":{"type":"MemberExpression","start":177,"end":187,"loc":{"start":{"line":4,"column":83,"index":177},"end":{"line":4,"column":93,"index":187}},"object":{"type":"Identifier","start":177,"end":182,"loc":{"start":{"line":4,"column":83,"index":177},"end":{"line":4,"column":88,"index":182},"identifierName":"Types"},"name":"Types"},"computed":false,"property":{"type":"Identifier","start":183,"end":187,"loc":{"start":{"line":4,"column":89,"index":183},"end":{"line":4,"column":93,"index":187},"identifierName":"Data"},"name":"Data"}},"arguments":[]}

      at visitRealmClassProperty (src/plugin/index.ts:329:17)
          at Array.map (<anonymous>)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new Types.Data();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "data",
            optional: true,
            default: () => new Types.Data()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    FISK 11: {"type":"NewExpression","start":173,"end":189,"loc":{"start":{"line":4,"column":79,"index":173},"end":{"line":4,"column":95,"index":189}},"callee":{"type":"MemberExpression","start":177,"end":187,"loc":{"start":{"line":4,"column":83,"index":177},"end":{"line":4,"column":93,"index":187}},"object":{"type":"Identifier","start":177,"end":182,"loc":{"start":{"line":4,"column":83,"index":177},"end":{"line":4,"column":88,"index":182},"identifierName":"Types"},"name":"Types"},"computed":false,"property":{"type":"Identifier","start":183,"end":187,"loc":{"start":{"line":4,"column":89,"index":183},"end":{"line":4,"column":93,"index":187},"identifierName":"Data"},"name":"Data"}},"arguments":[]}

      at visitRealmClassProperty (src/plugin/index.ts:329:17)
          at Array.map (<anonymous>)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new Types.Data();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "data",
            optional: true,
            default: () => new Types.Data()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    FISK 11: {"type":"NewExpression","start":161,"end":177,"loc":{"start":{"line":4,"column":67,"index":161},"end":{"line":4,"column":83,"index":177}},"callee":{"type":"MemberExpression","start":165,"end":175,"loc":{"start":{"line":4,"column":71,"index":165},"end":{"line":4,"column":81,"index":175}},"object":{"type":"Identifier","start":165,"end":170,"loc":{"start":{"line":4,"column":71,"index":165},"end":{"line":4,"column":76,"index":170},"identifierName":"Types"},"name":"Types"},"computed":false,"property":{"type":"Identifier","start":171,"end":175,"loc":{"start":{"line":4,"column":77,"index":171},"end":{"line":4,"column":81,"index":175},"identifierName":"Data"},"name":"Data"}},"arguments":[]}

      at visitRealmClassProperty (src/plugin/index.ts:329:17)
          at Array.map (<anonymous>)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new Types.Data();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "data",
            optional: true,
            default: () => new Types.Data()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    FISK 11: {"type":"NewExpression","start":172,"end":188,"loc":{"start":{"line":4,"column":78,"index":172},"end":{"line":4,"column":94,"index":188}},"callee":{"type":"MemberExpression","start":176,"end":186,"loc":{"start":{"line":4,"column":82,"index":176},"end":{"line":4,"column":92,"index":186}},"object":{"type":"Identifier","start":176,"end":181,"loc":{"start":{"line":4,"column":82,"index":176},"end":{"line":4,"column":87,"index":181},"identifierName":"Types"},"name":"Types"},"computed":false,"property":{"type":"Identifier","start":182,"end":186,"loc":{"start":{"line":4,"column":88,"index":182},"end":{"line":4,"column":92,"index":186},"identifierName":"Data"},"name":"Data"}},"arguments":[]}

      at visitRealmClassProperty (src/plugin/index.ts:329:17)
          at Array.map (<anonymous>)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new Types.Data();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "data",
            optional: true,
            default: () => new Types.Data()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    FISK 11: {"type":"NewExpression","start":172,"end":188,"loc":{"start":{"line":4,"column":78,"index":172},"end":{"line":4,"column":94,"index":188}},"callee":{"type":"MemberExpression","start":176,"end":186,"loc":{"start":{"line":4,"column":82,"index":176},"end":{"line":4,"column":92,"index":186}},"object":{"type":"Identifier","start":176,"end":181,"loc":{"start":{"line":4,"column":82,"index":176},"end":{"line":4,"column":87,"index":181},"identifierName":"Types"},"name":"Types"},"computed":false,"property":{"type":"Identifier","start":182,"end":186,"loc":{"start":{"line":4,"column":88,"index":182},"end":{"line":4,"column":92,"index":186},"identifierName":"Data"},"name":"Data"}},"arguments":[]}

      at visitRealmClassProperty (src/plugin/index.ts:329:17)
          at Array.map (<anonymous>)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new Types.Data();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "data",
            optional: true,
            default: () => new Types.Data()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    FISK 11: {"type":"NewExpression","start":167,"end":183,"loc":{"start":{"line":4,"column":73,"index":167},"end":{"line":4,"column":89,"index":183}},"callee":{"type":"MemberExpression","start":171,"end":181,"loc":{"start":{"line":4,"column":77,"index":171},"end":{"line":4,"column":87,"index":181}},"object":{"type":"Identifier","start":171,"end":176,"loc":{"start":{"line":4,"column":77,"index":171},"end":{"line":4,"column":82,"index":176},"identifierName":"Types"},"name":"Types"},"computed":false,"property":{"type":"Identifier","start":177,"end":181,"loc":{"start":{"line":4,"column":83,"index":177},"end":{"line":4,"column":87,"index":181},"identifierName":"Data"},"name":"Data"}},"arguments":[]}

      at visitRealmClassProperty (src/plugin/index.ts:329:17)
          at Array.map (<anonymous>)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new Types.Data();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "data",
            optional: true,
            default: () => new Types.Data()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    FISK 11: {"type":"NewExpression","start":178,"end":194,"loc":{"start":{"line":4,"column":84,"index":178},"end":{"line":4,"column":100,"index":194}},"callee":{"type":"MemberExpression","start":182,"end":192,"loc":{"start":{"line":4,"column":88,"index":182},"end":{"line":4,"column":98,"index":192}},"object":{"type":"Identifier","start":182,"end":187,"loc":{"start":{"line":4,"column":88,"index":182},"end":{"line":4,"column":93,"index":187},"identifierName":"Types"},"name":"Types"},"computed":false,"property":{"type":"Identifier","start":188,"end":192,"loc":{"start":{"line":4,"column":94,"index":188},"end":{"line":4,"column":98,"index":192},"identifierName":"Data"},"name":"Data"}},"arguments":[]}

      at visitRealmClassProperty (src/plugin/index.ts:329:17)
          at Array.map (<anonymous>)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new Types.Data();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "data",
            optional: true,
            default: () => new Types.Data()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    FISK 11: {"type":"NewExpression","start":178,"end":194,"loc":{"start":{"line":4,"column":84,"index":178},"end":{"line":4,"column":100,"index":194}},"callee":{"type":"MemberExpression","start":182,"end":192,"loc":{"start":{"line":4,"column":88,"index":182},"end":{"line":4,"column":98,"index":192}},"object":{"type":"Identifier","start":182,"end":187,"loc":{"start":{"line":4,"column":88,"index":182},"end":{"line":4,"column":93,"index":187},"identifierName":"Types"},"name":"Types"},"computed":false,"property":{"type":"Identifier","start":188,"end":192,"loc":{"start":{"line":4,"column":94,"index":188},"end":{"line":4,"column":98,"index":192},"identifierName":"Data"},"name":"Data"}},"arguments":[]}

      at visitRealmClassProperty (src/plugin/index.ts:329:17)
          at Array.map (<anonymous>)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new Types.Data();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "data",
            optional: true,
            default: () => new Types.Data()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    FISK 11: {"type":"NewExpression","start":149,"end":165,"loc":{"start":{"line":4,"column":55,"index":149},"end":{"line":4,"column":71,"index":165}},"callee":{"type":"MemberExpression","start":153,"end":163,"loc":{"start":{"line":4,"column":59,"index":153},"end":{"line":4,"column":69,"index":163}},"object":{"type":"Identifier","start":153,"end":158,"loc":{"start":{"line":4,"column":59,"index":153},"end":{"line":4,"column":64,"index":158},"identifierName":"Types"},"name":"Types"},"computed":false,"property":{"type":"Identifier","start":159,"end":163,"loc":{"start":{"line":4,"column":65,"index":159},"end":{"line":4,"column":69,"index":163},"identifierName":"Data"},"name":"Data"}},"arguments":[]}

      at visitRealmClassProperty (src/plugin/index.ts:329:17)
          at Array.map (<anonymous>)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new Types.Data();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "data",
            optional: true,
            default: () => new Types.Data()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    FISK 11: {"type":"NewExpression","start":161,"end":183,"loc":{"start":{"line":4,"column":67,"index":161},"end":{"line":4,"column":89,"index":183}},"callee":{"type":"MemberExpression","start":165,"end":181,"loc":{"start":{"line":4,"column":71,"index":165},"end":{"line":4,"column":87,"index":181}},"object":{"type":"MemberExpression","start":165,"end":176,"loc":{"start":{"line":4,"column":71,"index":165},"end":{"line":4,"column":82,"index":176}},"object":{"type":"Identifier","start":165,"end":170,"loc":{"start":{"line":4,"column":71,"index":165},"end":{"line":4,"column":76,"index":170},"identifierName":"Realm"},"name":"Realm"},"computed":false,"property":{"type":"Identifier","start":171,"end":176,"loc":{"start":{"line":4,"column":77,"index":171},"end":{"line":4,"column":82,"index":176},"identifierName":"Types"},"name":"Types"}},"computed":false,"property":{"type":"Identifier","start":177,"end":181,"loc":{"start":{"line":4,"column":83,"index":177},"end":{"line":4,"column":87,"index":181},"identifierName":"Data"},"name":"Data"}},"arguments":[]}

      at visitRealmClassProperty (src/plugin/index.ts:329:17)
          at Array.map (<anonymous>)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new Realm.Types.Data();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "data",
            default: () => new Realm.Types.Data()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    FISK 11: {"type":"NewExpression","start":160,"end":182,"loc":{"start":{"line":4,"column":66,"index":160},"end":{"line":4,"column":88,"index":182}},"callee":{"type":"MemberExpression","start":164,"end":180,"loc":{"start":{"line":4,"column":70,"index":164},"end":{"line":4,"column":86,"index":180}},"object":{"type":"MemberExpression","start":164,"end":175,"loc":{"start":{"line":4,"column":70,"index":164},"end":{"line":4,"column":81,"index":175}},"object":{"type":"Identifier","start":164,"end":169,"loc":{"start":{"line":4,"column":70,"index":164},"end":{"line":4,"column":75,"index":169},"identifierName":"Realm"},"name":"Realm"},"computed":false,"property":{"type":"Identifier","start":170,"end":175,"loc":{"start":{"line":4,"column":76,"index":170},"end":{"line":4,"column":81,"index":175},"identifierName":"Types"},"name":"Types"}},"computed":false,"property":{"type":"Identifier","start":176,"end":180,"loc":{"start":{"line":4,"column":82,"index":176},"end":{"line":4,"column":86,"index":180},"identifierName":"Data"},"name":"Data"}},"arguments":[]}

      at visitRealmClassProperty (src/plugin/index.ts:329:17)
          at Array.map (<anonymous>)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new Realm.Types.Data();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "data",
            default: () => new Realm.Types.Data()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    FISK 11: {"type":"NewExpression","start":166,"end":188,"loc":{"start":{"line":4,"column":72,"index":166},"end":{"line":4,"column":94,"index":188}},"callee":{"type":"MemberExpression","start":170,"end":186,"loc":{"start":{"line":4,"column":76,"index":170},"end":{"line":4,"column":92,"index":186}},"object":{"type":"MemberExpression","start":170,"end":181,"loc":{"start":{"line":4,"column":76,"index":170},"end":{"line":4,"column":87,"index":181}},"object":{"type":"Identifier","start":170,"end":175,"loc":{"start":{"line":4,"column":76,"index":170},"end":{"line":4,"column":81,"index":175},"identifierName":"Realm"},"name":"Realm"},"computed":false,"property":{"type":"Identifier","start":176,"end":181,"loc":{"start":{"line":4,"column":82,"index":176},"end":{"line":4,"column":87,"index":181},"identifierName":"Types"},"name":"Types"}},"computed":false,"property":{"type":"Identifier","start":182,"end":186,"loc":{"start":{"line":4,"column":88,"index":182},"end":{"line":4,"column":92,"index":186},"identifierName":"Data"},"name":"Data"}},"arguments":[]}

      at visitRealmClassProperty (src/plugin/index.ts:329:17)
          at Array.map (<anonymous>)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new Realm.Types.Data();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "data",
            default: () => new Realm.Types.Data()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    FISK 11: {"type":"NewExpression","start":148,"end":170,"loc":{"start":{"line":4,"column":54,"index":148},"end":{"line":4,"column":76,"index":170}},"callee":{"type":"MemberExpression","start":152,"end":168,"loc":{"start":{"line":4,"column":58,"index":152},"end":{"line":4,"column":74,"index":168}},"object":{"type":"MemberExpression","start":152,"end":163,"loc":{"start":{"line":4,"column":58,"index":152},"end":{"line":4,"column":69,"index":163}},"object":{"type":"Identifier","start":152,"end":157,"loc":{"start":{"line":4,"column":58,"index":152},"end":{"line":4,"column":63,"index":157},"identifierName":"Realm"},"name":"Realm"},"computed":false,"property":{"type":"Identifier","start":158,"end":163,"loc":{"start":{"line":4,"column":64,"index":158},"end":{"line":4,"column":69,"index":163},"identifierName":"Types"},"name":"Types"}},"computed":false,"property":{"type":"Identifier","start":164,"end":168,"loc":{"start":{"line":4,"column":70,"index":164},"end":{"line":4,"column":74,"index":168},"identifierName":"Data"},"name":"Data"}},"arguments":[]}

      at visitRealmClassProperty (src/plugin/index.ts:329:17)
          at Array.map (<anonymous>)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new Realm.Types.Data();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "data",
            default: () => new Realm.Types.Data()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    FISK 11: {"type":"NewExpression","start":162,"end":184,"loc":{"start":{"line":4,"column":68,"index":162},"end":{"line":4,"column":90,"index":184}},"callee":{"type":"MemberExpression","start":166,"end":182,"loc":{"start":{"line":4,"column":72,"index":166},"end":{"line":4,"column":88,"index":182}},"object":{"type":"MemberExpression","start":166,"end":177,"loc":{"start":{"line":4,"column":72,"index":166},"end":{"line":4,"column":83,"index":177}},"object":{"type":"Identifier","start":166,"end":171,"loc":{"start":{"line":4,"column":72,"index":166},"end":{"line":4,"column":77,"index":171},"identifierName":"Realm"},"name":"Realm"},"computed":false,"property":{"type":"Identifier","start":172,"end":177,"loc":{"start":{"line":4,"column":78,"index":172},"end":{"line":4,"column":83,"index":177},"identifierName":"Types"},"name":"Types"}},"computed":false,"property":{"type":"Identifier","start":178,"end":182,"loc":{"start":{"line":4,"column":84,"index":178},"end":{"line":4,"column":88,"index":182},"identifierName":"Data"},"name":"Data"}},"arguments":[]}

      at visitRealmClassProperty (src/plugin/index.ts:329:17)
          at Array.map (<anonymous>)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new Realm.Types.Data();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "data",
            optional: true,
            default: () => new Realm.Types.Data()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    FISK 11: {"type":"NewExpression","start":173,"end":195,"loc":{"start":{"line":4,"column":79,"index":173},"end":{"line":4,"column":101,"index":195}},"callee":{"type":"MemberExpression","start":177,"end":193,"loc":{"start":{"line":4,"column":83,"index":177},"end":{"line":4,"column":99,"index":193}},"object":{"type":"MemberExpression","start":177,"end":188,"loc":{"start":{"line":4,"column":83,"index":177},"end":{"line":4,"column":94,"index":188}},"object":{"type":"Identifier","start":177,"end":182,"loc":{"start":{"line":4,"column":83,"index":177},"end":{"line":4,"column":88,"index":182},"identifierName":"Realm"},"name":"Realm"},"computed":false,"property":{"type":"Identifier","start":183,"end":188,"loc":{"start":{"line":4,"column":89,"index":183},"end":{"line":4,"column":94,"index":188},"identifierName":"Types"},"name":"Types"}},"computed":false,"property":{"type":"Identifier","start":189,"end":193,"loc":{"start":{"line":4,"column":95,"index":189},"end":{"line":4,"column":99,"index":193},"identifierName":"Data"},"name":"Data"}},"arguments":[]}

      at visitRealmClassProperty (src/plugin/index.ts:329:17)
          at Array.map (<anonymous>)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new Realm.Types.Data();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "data",
            optional: true,
            default: () => new Realm.Types.Data()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    FISK 11: {"type":"NewExpression","start":173,"end":195,"loc":{"start":{"line":4,"column":79,"index":173},"end":{"line":4,"column":101,"index":195}},"callee":{"type":"MemberExpression","start":177,"end":193,"loc":{"start":{"line":4,"column":83,"index":177},"end":{"line":4,"column":99,"index":193}},"object":{"type":"MemberExpression","start":177,"end":188,"loc":{"start":{"line":4,"column":83,"index":177},"end":{"line":4,"column":94,"index":188}},"object":{"type":"Identifier","start":177,"end":182,"loc":{"start":{"line":4,"column":83,"index":177},"end":{"line":4,"column":88,"index":182},"identifierName":"Realm"},"name":"Realm"},"computed":false,"property":{"type":"Identifier","start":183,"end":188,"loc":{"start":{"line":4,"column":89,"index":183},"end":{"line":4,"column":94,"index":188},"identifierName":"Types"},"name":"Types"}},"computed":false,"property":{"type":"Identifier","start":189,"end":193,"loc":{"start":{"line":4,"column":95,"index":189},"end":{"line":4,"column":99,"index":193},"identifierName":"Data"},"name":"Data"}},"arguments":[]}

      at visitRealmClassProperty (src/plugin/index.ts:329:17)
          at Array.map (<anonymous>)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new Realm.Types.Data();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "data",
            optional: true,
            default: () => new Realm.Types.Data()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    FISK 11: {"type":"NewExpression","start":161,"end":183,"loc":{"start":{"line":4,"column":67,"index":161},"end":{"line":4,"column":89,"index":183}},"callee":{"type":"MemberExpression","start":165,"end":181,"loc":{"start":{"line":4,"column":71,"index":165},"end":{"line":4,"column":87,"index":181}},"object":{"type":"MemberExpression","start":165,"end":176,"loc":{"start":{"line":4,"column":71,"index":165},"end":{"line":4,"column":82,"index":176}},"object":{"type":"Identifier","start":165,"end":170,"loc":{"start":{"line":4,"column":71,"index":165},"end":{"line":4,"column":76,"index":170},"identifierName":"Realm"},"name":"Realm"},"computed":false,"property":{"type":"Identifier","start":171,"end":176,"loc":{"start":{"line":4,"column":77,"index":171},"end":{"line":4,"column":82,"index":176},"identifierName":"Types"},"name":"Types"}},"computed":false,"property":{"type":"Identifier","start":177,"end":181,"loc":{"start":{"line":4,"column":83,"index":177},"end":{"line":4,"column":87,"index":181},"identifierName":"Data"},"name":"Data"}},"arguments":[]}

      at visitRealmClassProperty (src/plugin/index.ts:329:17)
          at Array.map (<anonymous>)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new Realm.Types.Data();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "data",
            optional: true,
            default: () => new Realm.Types.Data()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    FISK 11: {"type":"NewExpression","start":172,"end":194,"loc":{"start":{"line":4,"column":78,"index":172},"end":{"line":4,"column":100,"index":194}},"callee":{"type":"MemberExpression","start":176,"end":192,"loc":{"start":{"line":4,"column":82,"index":176},"end":{"line":4,"column":98,"index":192}},"object":{"type":"MemberExpression","start":176,"end":187,"loc":{"start":{"line":4,"column":82,"index":176},"end":{"line":4,"column":93,"index":187}},"object":{"type":"Identifier","start":176,"end":181,"loc":{"start":{"line":4,"column":82,"index":176},"end":{"line":4,"column":87,"index":181},"identifierName":"Realm"},"name":"Realm"},"computed":false,"property":{"type":"Identifier","start":182,"end":187,"loc":{"start":{"line":4,"column":88,"index":182},"end":{"line":4,"column":93,"index":187},"identifierName":"Types"},"name":"Types"}},"computed":false,"property":{"type":"Identifier","start":188,"end":192,"loc":{"start":{"line":4,"column":94,"index":188},"end":{"line":4,"column":98,"index":192},"identifierName":"Data"},"name":"Data"}},"arguments":[]}

      at visitRealmClassProperty (src/plugin/index.ts:329:17)
          at Array.map (<anonymous>)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new Realm.Types.Data();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "data",
            optional: true,
            default: () => new Realm.Types.Data()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    FISK 11: {"type":"NewExpression","start":172,"end":194,"loc":{"start":{"line":4,"column":78,"index":172},"end":{"line":4,"column":100,"index":194}},"callee":{"type":"MemberExpression","start":176,"end":192,"loc":{"start":{"line":4,"column":82,"index":176},"end":{"line":4,"column":98,"index":192}},"object":{"type":"MemberExpression","start":176,"end":187,"loc":{"start":{"line":4,"column":82,"index":176},"end":{"line":4,"column":93,"index":187}},"object":{"type":"Identifier","start":176,"end":181,"loc":{"start":{"line":4,"column":82,"index":176},"end":{"line":4,"column":87,"index":181},"identifierName":"Realm"},"name":"Realm"},"computed":false,"property":{"type":"Identifier","start":182,"end":187,"loc":{"start":{"line":4,"column":88,"index":182},"end":{"line":4,"column":93,"index":187},"identifierName":"Types"},"name":"Types"}},"computed":false,"property":{"type":"Identifier","start":188,"end":192,"loc":{"start":{"line":4,"column":94,"index":188},"end":{"line":4,"column":98,"index":192},"identifierName":"Data"},"name":"Data"}},"arguments":[]}

      at visitRealmClassProperty (src/plugin/index.ts:329:17)
          at Array.map (<anonymous>)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new Realm.Types.Data();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "data",
            optional: true,
            default: () => new Realm.Types.Data()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    FISK 11: {"type":"NewExpression","start":167,"end":189,"loc":{"start":{"line":4,"column":73,"index":167},"end":{"line":4,"column":95,"index":189}},"callee":{"type":"MemberExpression","start":171,"end":187,"loc":{"start":{"line":4,"column":77,"index":171},"end":{"line":4,"column":93,"index":187}},"object":{"type":"MemberExpression","start":171,"end":182,"loc":{"start":{"line":4,"column":77,"index":171},"end":{"line":4,"column":88,"index":182}},"object":{"type":"Identifier","start":171,"end":176,"loc":{"start":{"line":4,"column":77,"index":171},"end":{"line":4,"column":82,"index":176},"identifierName":"Realm"},"name":"Realm"},"computed":false,"property":{"type":"Identifier","start":177,"end":182,"loc":{"start":{"line":4,"column":83,"index":177},"end":{"line":4,"column":88,"index":182},"identifierName":"Types"},"name":"Types"}},"computed":false,"property":{"type":"Identifier","start":183,"end":187,"loc":{"start":{"line":4,"column":89,"index":183},"end":{"line":4,"column":93,"index":187},"identifierName":"Data"},"name":"Data"}},"arguments":[]}

      at visitRealmClassProperty (src/plugin/index.ts:329:17)
          at Array.map (<anonymous>)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new Realm.Types.Data();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "data",
            optional: true,
            default: () => new Realm.Types.Data()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    FISK 11: {"type":"NewExpression","start":178,"end":200,"loc":{"start":{"line":4,"column":84,"index":178},"end":{"line":4,"column":106,"index":200}},"callee":{"type":"MemberExpression","start":182,"end":198,"loc":{"start":{"line":4,"column":88,"index":182},"end":{"line":4,"column":104,"index":198}},"object":{"type":"MemberExpression","start":182,"end":193,"loc":{"start":{"line":4,"column":88,"index":182},"end":{"line":4,"column":99,"index":193}},"object":{"type":"Identifier","start":182,"end":187,"loc":{"start":{"line":4,"column":88,"index":182},"end":{"line":4,"column":93,"index":187},"identifierName":"Realm"},"name":"Realm"},"computed":false,"property":{"type":"Identifier","start":188,"end":193,"loc":{"start":{"line":4,"column":94,"index":188},"end":{"line":4,"column":99,"index":193},"identifierName":"Types"},"name":"Types"}},"computed":false,"property":{"type":"Identifier","start":194,"end":198,"loc":{"start":{"line":4,"column":100,"index":194},"end":{"line":4,"column":104,"index":198},"identifierName":"Data"},"name":"Data"}},"arguments":[]}

      at visitRealmClassProperty (src/plugin/index.ts:329:17)
          at Array.map (<anonymous>)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new Realm.Types.Data();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "data",
            optional: true,
            default: () => new Realm.Types.Data()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    FISK 11: {"type":"NewExpression","start":178,"end":200,"loc":{"start":{"line":4,"column":84,"index":178},"end":{"line":4,"column":106,"index":200}},"callee":{"type":"MemberExpression","start":182,"end":198,"loc":{"start":{"line":4,"column":88,"index":182},"end":{"line":4,"column":104,"index":198}},"object":{"type":"MemberExpression","start":182,"end":193,"loc":{"start":{"line":4,"column":88,"index":182},"end":{"line":4,"column":99,"index":193}},"object":{"type":"Identifier","start":182,"end":187,"loc":{"start":{"line":4,"column":88,"index":182},"end":{"line":4,"column":93,"index":187},"identifierName":"Realm"},"name":"Realm"},"computed":false,"property":{"type":"Identifier","start":188,"end":193,"loc":{"start":{"line":4,"column":94,"index":188},"end":{"line":4,"column":99,"index":193},"identifierName":"Types"},"name":"Types"}},"computed":false,"property":{"type":"Identifier","start":194,"end":198,"loc":{"start":{"line":4,"column":100,"index":194},"end":{"line":4,"column":104,"index":198},"identifierName":"Data"},"name":"Data"}},"arguments":[]}

      at visitRealmClassProperty (src/plugin/index.ts:329:17)
          at Array.map (<anonymous>)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new Realm.Types.Data();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "data",
            optional: true,
            default: () => new Realm.Types.Data()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    FISK 11: {"type":"NewExpression","start":149,"end":171,"loc":{"start":{"line":4,"column":55,"index":149},"end":{"line":4,"column":77,"index":171}},"callee":{"type":"MemberExpression","start":153,"end":169,"loc":{"start":{"line":4,"column":59,"index":153},"end":{"line":4,"column":75,"index":169}},"object":{"type":"MemberExpression","start":153,"end":164,"loc":{"start":{"line":4,"column":59,"index":153},"end":{"line":4,"column":70,"index":164}},"object":{"type":"Identifier","start":153,"end":158,"loc":{"start":{"line":4,"column":59,"index":153},"end":{"line":4,"column":64,"index":158},"identifierName":"Realm"},"name":"Realm"},"computed":false,"property":{"type":"Identifier","start":159,"end":164,"loc":{"start":{"line":4,"column":65,"index":159},"end":{"line":4,"column":70,"index":164},"identifierName":"Types"},"name":"Types"}},"computed":false,"property":{"type":"Identifier","start":165,"end":169,"loc":{"start":{"line":4,"column":71,"index":165},"end":{"line":4,"column":75,"index":169},"identifierName":"Data"},"name":"Data"}},"arguments":[]}

      at visitRealmClassProperty (src/plugin/index.ts:329:17)
          at Array.map (<anonymous>)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = new Realm.Types.Data();
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "data",
            optional: true,
            default: () => new Realm.Types.Data()
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "list",
            objectType: "Person"
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "list",
            objectType: "Person"
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "list",
            objectType: "Person"
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "list",
            objectType: "Person"
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "list",
            objectType: "int"
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "list",
            objectType: "int"
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "list",
            objectType: "int"
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "list",
            objectType: "int"
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "list",
            objectType: "int"
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "list",
            objectType: "int"
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "list",
            objectType: "int"
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "list",
            objectType: "int"
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "list",
            optional: true,
            objectType: "Person"
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "list",
            optional: true,
            objectType: "Person"
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "list",
            optional: true,
            objectType: "Person"
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "list",
            optional: true,
            objectType: "Person"
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "list",
            optional: true,
            objectType: "Person"
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "list",
            optional: true,
            objectType: "Person"
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "list",
            optional: true,
            objectType: "Person"
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "list",
            optional: true,
            objectType: "Person"
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "list",
            optional: true,
            objectType: "int"
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "list",
            optional: true,
            objectType: "int"
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "list",
            optional: true,
            objectType: "int"
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "list",
            optional: true,
            objectType: "int"
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "list",
            optional: true,
            objectType: "int"
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "list",
            optional: true,
            objectType: "int"
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "list",
            optional: true,
            objectType: "int"
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "list",
            optional: true,
            objectType: "int"
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "list",
            optional: true,
            objectType: "int"
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "list",
            optional: true,
            objectType: "int"
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "list",
            optional: true,
            objectType: "int"
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "list",
            optional: true,
            objectType: "int"
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "list",
            optional: true,
            objectType: "int"
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "list",
            optional: true,
            objectType: "int"
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "list",
            optional: true,
            objectType: "int"
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "list",
            optional: true,
            objectType: "int"
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    FISK 11: {"type":"ArrayExpression","start":168,"end":170,"loc":{"start":{"line":4,"column":74,"index":168},"end":{"line":4,"column":76,"index":170}},"elements":[]}

      at visitRealmClassProperty (src/plugin/index.ts:329:17)
          at Array.map (<anonymous>)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = [];
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "list",
            objectType: "Person",
            default: () => []
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    FISK 11: {"type":"ArrayExpression","start":174,"end":176,"loc":{"start":{"line":4,"column":80,"index":174},"end":{"line":4,"column":82,"index":176}},"elements":[]}

      at visitRealmClassProperty (src/plugin/index.ts:329:17)
          at Array.map (<anonymous>)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = [];
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "list",
            objectType: "Person",
            default: () => []
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    FISK 11: {"type":"ArrayExpression","start":168,"end":170,"loc":{"start":{"line":4,"column":74,"index":168},"end":{"line":4,"column":76,"index":170}},"elements":[]}

      at visitRealmClassProperty (src/plugin/index.ts:329:17)
          at Array.map (<anonymous>)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = [];
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "list",
            objectType: "Person",
            default: () => []
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    FISK 11: {"type":"ArrayExpression","start":162,"end":164,"loc":{"start":{"line":4,"column":68,"index":162},"end":{"line":4,"column":70,"index":164}},"elements":[]}

      at visitRealmClassProperty (src/plugin/index.ts:329:17)
          at Array.map (<anonymous>)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = [];
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "list",
            objectType: "Person",
            default: () => []
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    FISK 11: {"type":"ArrayExpression","start":177,"end":179,"loc":{"start":{"line":4,"column":83,"index":177},"end":{"line":4,"column":85,"index":179}},"elements":[]}

      at visitRealmClassProperty (src/plugin/index.ts:329:17)
          at Array.map (<anonymous>)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = [];
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "list",
            objectType: "int",
            default: () => []
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    FISK 11: {"type":"ArrayExpression","start":171,"end":173,"loc":{"start":{"line":4,"column":77,"index":171},"end":{"line":4,"column":79,"index":173}},"elements":[]}

      at visitRealmClassProperty (src/plugin/index.ts:329:17)
          at Array.map (<anonymous>)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = [];
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "list",
            objectType: "int",
            default: () => []
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    FISK 11: {"type":"ArrayExpression","start":183,"end":185,"loc":{"start":{"line":4,"column":89,"index":183},"end":{"line":4,"column":91,"index":185}},"elements":[]}

      at visitRealmClassProperty (src/plugin/index.ts:329:17)
          at Array.map (<anonymous>)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = [];
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "list",
            objectType: "int",
            default: () => []
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    FISK 11: {"type":"ArrayExpression","start":177,"end":179,"loc":{"start":{"line":4,"column":83,"index":177},"end":{"line":4,"column":85,"index":179}},"elements":[]}

      at visitRealmClassProperty (src/plugin/index.ts:329:17)
          at Array.map (<anonymous>)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = [];
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "list",
            objectType: "int",
            default: () => []
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    FISK 11: {"type":"ArrayExpression","start":177,"end":179,"loc":{"start":{"line":4,"column":83,"index":177},"end":{"line":4,"column":85,"index":179}},"elements":[]}

      at visitRealmClassProperty (src/plugin/index.ts:329:17)
          at Array.map (<anonymous>)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = [];
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "list",
            objectType: "int",
            default: () => []
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    FISK 11: {"type":"ArrayExpression","start":171,"end":173,"loc":{"start":{"line":4,"column":77,"index":171},"end":{"line":4,"column":79,"index":173}},"elements":[]}

      at visitRealmClassProperty (src/plugin/index.ts:329:17)
          at Array.map (<anonymous>)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = [];
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "list",
            objectType: "int",
            default: () => []
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    FISK 11: {"type":"ArrayExpression","start":171,"end":173,"loc":{"start":{"line":4,"column":77,"index":171},"end":{"line":4,"column":79,"index":173}},"elements":[]}

      at visitRealmClassProperty (src/plugin/index.ts:329:17)
          at Array.map (<anonymous>)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = [];
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "list",
            objectType: "int",
            default: () => []
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    FISK 11: {"type":"ArrayExpression","start":165,"end":167,"loc":{"start":{"line":4,"column":71,"index":165},"end":{"line":4,"column":73,"index":167}},"elements":[]}

      at visitRealmClassProperty (src/plugin/index.ts:329:17)
          at Array.map (<anonymous>)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = [];
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "list",
            objectType: "int",
            default: () => []
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    FISK 11: {"type":"ArrayExpression","start":180,"end":182,"loc":{"start":{"line":4,"column":86,"index":180},"end":{"line":4,"column":88,"index":182}},"elements":[]}

      at visitRealmClassProperty (src/plugin/index.ts:329:17)
          at Array.map (<anonymous>)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = [];
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "list",
            optional: true,
            objectType: "Person",
            default: () => []
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    FISK 11: {"type":"ArrayExpression","start":180,"end":182,"loc":{"start":{"line":4,"column":86,"index":180},"end":{"line":4,"column":88,"index":182}},"elements":[]}

      at visitRealmClassProperty (src/plugin/index.ts:329:17)
          at Array.map (<anonymous>)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = [];
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "list",
            optional: true,
            objectType: "Person",
            default: () => []
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    FISK 11: {"type":"ArrayExpression","start":186,"end":188,"loc":{"start":{"line":4,"column":92,"index":186},"end":{"line":4,"column":94,"index":188}},"elements":[]}

      at visitRealmClassProperty (src/plugin/index.ts:329:17)
          at Array.map (<anonymous>)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = [];
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "list",
            optional: true,
            objectType: "Person",
            default: () => []
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    FISK 11: {"type":"ArrayExpression","start":186,"end":188,"loc":{"start":{"line":4,"column":92,"index":186},"end":{"line":4,"column":94,"index":188}},"elements":[]}

      at visitRealmClassProperty (src/plugin/index.ts:329:17)
          at Array.map (<anonymous>)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = [];
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "list",
            optional: true,
            objectType: "Person",
            default: () => []
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    FISK 11: {"type":"ArrayExpression","start":180,"end":182,"loc":{"start":{"line":4,"column":86,"index":180},"end":{"line":4,"column":88,"index":182}},"elements":[]}

      at visitRealmClassProperty (src/plugin/index.ts:329:17)
          at Array.map (<anonymous>)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = [];
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "list",
            optional: true,
            objectType: "Person",
            default: () => []
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    FISK 11: {"type":"ArrayExpression","start":180,"end":182,"loc":{"start":{"line":4,"column":86,"index":180},"end":{"line":4,"column":88,"index":182}},"elements":[]}

      at visitRealmClassProperty (src/plugin/index.ts:329:17)
          at Array.map (<anonymous>)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = [];
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "list",
            optional: true,
            objectType: "Person",
            default: () => []
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    FISK 11: {"type":"ArrayExpression","start":174,"end":176,"loc":{"start":{"line":4,"column":80,"index":174},"end":{"line":4,"column":82,"index":176}},"elements":[]}

      at visitRealmClassProperty (src/plugin/index.ts:329:17)
          at Array.map (<anonymous>)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = [];
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "list",
            optional: true,
            objectType: "Person",
            default: () => []
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    FISK 11: {"type":"ArrayExpression","start":174,"end":176,"loc":{"start":{"line":4,"column":80,"index":174},"end":{"line":4,"column":82,"index":176}},"elements":[]}

      at visitRealmClassProperty (src/plugin/index.ts:329:17)
          at Array.map (<anonymous>)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = [];
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "list",
            optional: true,
            objectType: "Person",
            default: () => []
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    FISK 11: {"type":"ArrayExpression","start":189,"end":191,"loc":{"start":{"line":4,"column":95,"index":189},"end":{"line":4,"column":97,"index":191}},"elements":[]}

      at visitRealmClassProperty (src/plugin/index.ts:329:17)
          at Array.map (<anonymous>)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = [];
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "list",
            optional: true,
            objectType: "int",
            default: () => []
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    FISK 11: {"type":"ArrayExpression","start":189,"end":191,"loc":{"start":{"line":4,"column":95,"index":189},"end":{"line":4,"column":97,"index":191}},"elements":[]}

      at visitRealmClassProperty (src/plugin/index.ts:329:17)
          at Array.map (<anonymous>)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = [];
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "list",
            optional: true,
            objectType: "int",
            default: () => []
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    FISK 11: {"type":"ArrayExpression","start":183,"end":185,"loc":{"start":{"line":4,"column":89,"index":183},"end":{"line":4,"column":91,"index":185}},"elements":[]}

      at visitRealmClassProperty (src/plugin/index.ts:329:17)
          at Array.map (<anonymous>)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = [];
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "list",
            optional: true,
            objectType: "int",
            default: () => []
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    FISK 11: {"type":"ArrayExpression","start":183,"end":185,"loc":{"start":{"line":4,"column":89,"index":183},"end":{"line":4,"column":91,"index":185}},"elements":[]}

      at visitRealmClassProperty (src/plugin/index.ts:329:17)
          at Array.map (<anonymous>)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = [];
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "list",
            optional: true,
            objectType: "int",
            default: () => []
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    FISK 11: {"type":"ArrayExpression","start":195,"end":197,"loc":{"start":{"line":4,"column":101,"index":195},"end":{"line":4,"column":103,"index":197}},"elements":[]}

      at visitRealmClassProperty (src/plugin/index.ts:329:17)
          at Array.map (<anonymous>)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = [];
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "list",
            optional: true,
            objectType: "int",
            default: () => []
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    FISK 11: {"type":"ArrayExpression","start":195,"end":197,"loc":{"start":{"line":4,"column":101,"index":195},"end":{"line":4,"column":103,"index":197}},"elements":[]}

      at visitRealmClassProperty (src/plugin/index.ts:329:17)
          at Array.map (<anonymous>)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = [];
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "list",
            optional: true,
            objectType: "int",
            default: () => []
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    FISK 11: {"type":"ArrayExpression","start":189,"end":191,"loc":{"start":{"line":4,"column":95,"index":189},"end":{"line":4,"column":97,"index":191}},"elements":[]}

      at visitRealmClassProperty (src/plugin/index.ts:329:17)
          at Array.map (<anonymous>)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = [];
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "list",
            optional: true,
            objectType: "int",
            default: () => []
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    FISK 11: {"type":"ArrayExpression","start":189,"end":191,"loc":{"start":{"line":4,"column":95,"index":189},"end":{"line":4,"column":97,"index":191}},"elements":[]}

      at visitRealmClassProperty (src/plugin/index.ts:329:17)
          at Array.map (<anonymous>)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = [];
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "list",
            optional: true,
            objectType: "int",
            default: () => []
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    FISK 11: {"type":"ArrayExpression","start":189,"end":191,"loc":{"start":{"line":4,"column":95,"index":189},"end":{"line":4,"column":97,"index":191}},"elements":[]}

      at visitRealmClassProperty (src/plugin/index.ts:329:17)
          at Array.map (<anonymous>)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = [];
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "list",
            optional: true,
            objectType: "int",
            default: () => []
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    FISK 11: {"type":"ArrayExpression","start":189,"end":191,"loc":{"start":{"line":4,"column":95,"index":189},"end":{"line":4,"column":97,"index":191}},"elements":[]}

      at visitRealmClassProperty (src/plugin/index.ts:329:17)
          at Array.map (<anonymous>)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = [];
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "list",
            optional: true,
            objectType: "int",
            default: () => []
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    FISK 11: {"type":"ArrayExpression","start":183,"end":185,"loc":{"start":{"line":4,"column":89,"index":183},"end":{"line":4,"column":91,"index":185}},"elements":[]}

      at visitRealmClassProperty (src/plugin/index.ts:329:17)
          at Array.map (<anonymous>)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = [];
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "list",
            optional: true,
            objectType: "int",
            default: () => []
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    FISK 11: {"type":"ArrayExpression","start":183,"end":185,"loc":{"start":{"line":4,"column":89,"index":183},"end":{"line":4,"column":91,"index":185}},"elements":[]}

      at visitRealmClassProperty (src/plugin/index.ts:329:17)
          at Array.map (<anonymous>)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = [];
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "list",
            optional: true,
            objectType: "int",
            default: () => []
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    FISK 11: {"type":"ArrayExpression","start":183,"end":185,"loc":{"start":{"line":4,"column":89,"index":183},"end":{"line":4,"column":91,"index":185}},"elements":[]}

      at visitRealmClassProperty (src/plugin/index.ts:329:17)
          at Array.map (<anonymous>)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = [];
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "list",
            optional: true,
            objectType: "int",
            default: () => []
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    FISK 11: {"type":"ArrayExpression","start":183,"end":185,"loc":{"start":{"line":4,"column":89,"index":183},"end":{"line":4,"column":91,"index":185}},"elements":[]}

      at visitRealmClassProperty (src/plugin/index.ts:329:17)
          at Array.map (<anonymous>)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = [];
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "list",
            optional: true,
            objectType: "int",
            default: () => []
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    FISK 11: {"type":"ArrayExpression","start":177,"end":179,"loc":{"start":{"line":4,"column":83,"index":177},"end":{"line":4,"column":85,"index":179}},"elements":[]}

      at visitRealmClassProperty (src/plugin/index.ts:329:17)
          at Array.map (<anonymous>)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = [];
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "list",
            optional: true,
            objectType: "int",
            default: () => []
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    FISK 11: {"type":"ArrayExpression","start":177,"end":179,"loc":{"start":{"line":4,"column":83,"index":177},"end":{"line":4,"column":85,"index":179}},"elements":[]}

      at visitRealmClassProperty (src/plugin/index.ts:329:17)
          at Array.map (<anonymous>)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = [];
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "list",
            optional: true,
            objectType: "int",
            default: () => []
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "set",
            objectType: "Person"
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "set",
            objectType: "Person"
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "set",
            objectType: "Person"
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "set",
            objectType: "Person"
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "set",
            optional: true,
            objectType: "Person"
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "set",
            optional: true,
            objectType: "Person"
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "set",
            optional: true,
            objectType: "Person"
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "set",
            optional: true,
            objectType: "Person"
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "set",
            optional: true,
            objectType: "Person"
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "set",
            optional: true,
            objectType: "Person"
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "set",
            optional: true,
            objectType: "Person"
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "set",
            optional: true,
            objectType: "Person"
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "dictionary"
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "dictionary"
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "dictionary"
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "dictionary"
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "dictionary",
            objectType: "mixed"
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "dictionary",
            objectType: "mixed"
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "dictionary",
            objectType: "mixed"
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "dictionary",
            objectType: "mixed"
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "dictionary",
            objectType: "mixed"
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "dictionary",
            objectType: "mixed"
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "dictionary",
            objectType: "mixed"
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "dictionary",
            objectType: "mixed"
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "dictionary",
            objectType: "mixed"
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "dictionary",
            objectType: "mixed"
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "dictionary",
            objectType: "mixed"
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "dictionary",
            objectType: "mixed"
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "dictionary",
            objectType: "mixed"
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "dictionary",
            objectType: "mixed"
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "dictionary",
            objectType: "mixed"
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "dictionary",
            objectType: "mixed"
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "dictionary",
            optional: true
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "dictionary",
            optional: true
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "dictionary",
            optional: true
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "dictionary",
            optional: true
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "dictionary",
            optional: true
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "dictionary",
            optional: true
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "dictionary",
            optional: true
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "dictionary",
            optional: true
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "dictionary",
            optional: true,
            objectType: "mixed"
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "dictionary",
            optional: true,
            objectType: "mixed"
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "dictionary",
            optional: true,
            objectType: "mixed"
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "dictionary",
            optional: true,
            objectType: "mixed"
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "dictionary",
            optional: true,
            objectType: "mixed"
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "dictionary",
            optional: true,
            objectType: "mixed"
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "dictionary",
            optional: true,
            objectType: "mixed"
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "dictionary",
            optional: true,
            objectType: "mixed"
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "dictionary",
            optional: true,
            objectType: "mixed"
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "dictionary",
            optional: true,
            objectType: "mixed"
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "dictionary",
            optional: true,
            objectType: "mixed"
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "dictionary",
            optional: true,
            objectType: "mixed"
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "dictionary",
            optional: true,
            objectType: "mixed"
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "dictionary",
            optional: true,
            objectType: "mixed"
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "dictionary",
            optional: true,
            objectType: "mixed"
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "dictionary",
            optional: true,
            objectType: "mixed"
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "dictionary",
            optional: true,
            objectType: "mixed"
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "dictionary",
            optional: true,
            objectType: "mixed"
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "dictionary",
            optional: true,
            objectType: "mixed"
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "dictionary",
            optional: true,
            objectType: "mixed"
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "dictionary",
            optional: true,
            objectType: "mixed"
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "dictionary",
            optional: true,
            objectType: "mixed"
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "dictionary",
            optional: true,
            objectType: "mixed"
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "dictionary",
            optional: true,
            objectType: "mixed"
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "dictionary",
            optional: true,
            objectType: "mixed"
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "dictionary",
            optional: true,
            objectType: "mixed"
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "dictionary",
            optional: true,
            objectType: "mixed"
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "dictionary",
            optional: true,
            objectType: "mixed"
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "dictionary",
            optional: true,
            objectType: "mixed"
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "dictionary",
            optional: true,
            objectType: "mixed"
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "dictionary",
            optional: true,
            objectType: "mixed"
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "dictionary",
            optional: true,
            objectType: "mixed"
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "mixed"
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "mixed"
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "mixed"
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "mixed"
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "mixed",
            optional: true
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "mixed",
            optional: true
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "mixed",
            optional: true
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "mixed",
            optional: true
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "mixed",
            optional: true
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "mixed",
            optional: true
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "mixed",
            optional: true
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "mixed",
            optional: true
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "mixed",
            optional: true
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "mixed",
            optional: true
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "mixed",
            optional: true
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "mixed",
            optional: true
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    FISK 10: {"type":"StringLiteral","start":167,"end":172,"loc":{"start":{"line":4,"column":73,"index":167},"end":{"line":4,"column":78,"index":172}},"extra":{"rawValue":"foo","raw":"\"foo\""},"value":"foo"}

      at visitRealmClassProperty (src/plugin/index.ts:324:17)
          at Array.map (<anonymous>)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = "foo";
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "mixed",
            default: "foo"
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    FISK 10: {"type":"StringLiteral","start":161,"end":166,"loc":{"start":{"line":4,"column":67,"index":161},"end":{"line":4,"column":72,"index":166}},"extra":{"rawValue":"foo","raw":"\"foo\""},"value":"foo"}

      at visitRealmClassProperty (src/plugin/index.ts:324:17)
          at Array.map (<anonymous>)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = "foo";
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "mixed",
            default: "foo"
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    FISK 10: {"type":"StringLiteral","start":161,"end":166,"loc":{"start":{"line":4,"column":67,"index":161},"end":{"line":4,"column":72,"index":166}},"extra":{"rawValue":"foo","raw":"\"foo\""},"value":"foo"}

      at visitRealmClassProperty (src/plugin/index.ts:324:17)
          at Array.map (<anonymous>)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = "foo";
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "mixed",
            default: "foo"
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    FISK 10: {"type":"StringLiteral","start":155,"end":160,"loc":{"start":{"line":4,"column":61,"index":155},"end":{"line":4,"column":66,"index":160}},"extra":{"rawValue":"foo","raw":"\"foo\""},"value":"foo"}

      at visitRealmClassProperty (src/plugin/index.ts:324:17)
          at Array.map (<anonymous>)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = "foo";
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "mixed",
            default: "foo"
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    FISK 10: {"type":"StringLiteral","start":168,"end":173,"loc":{"start":{"line":4,"column":74,"index":168},"end":{"line":4,"column":79,"index":173}},"extra":{"rawValue":"foo","raw":"\"foo\""},"value":"foo"}

      at visitRealmClassProperty (src/plugin/index.ts:324:17)
          at Array.map (<anonymous>)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = "foo";
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "mixed",
            optional: true,
            default: "foo"
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    FISK 10: {"type":"StringLiteral","start":179,"end":184,"loc":{"start":{"line":4,"column":85,"index":179},"end":{"line":4,"column":90,"index":184}},"extra":{"rawValue":"foo","raw":"\"foo\""},"value":"foo"}

      at visitRealmClassProperty (src/plugin/index.ts:324:17)
          at Array.map (<anonymous>)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = "foo";
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "mixed",
            optional: true,
            default: "foo"
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    FISK 10: {"type":"StringLiteral","start":179,"end":184,"loc":{"start":{"line":4,"column":85,"index":179},"end":{"line":4,"column":90,"index":184}},"extra":{"rawValue":"foo","raw":"\"foo\""},"value":"foo"}

      at visitRealmClassProperty (src/plugin/index.ts:324:17)
          at Array.map (<anonymous>)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = "foo";
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "mixed",
            optional: true,
            default: "foo"
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    FISK 10: {"type":"StringLiteral","start":162,"end":167,"loc":{"start":{"line":4,"column":68,"index":162},"end":{"line":4,"column":73,"index":167}},"extra":{"rawValue":"foo","raw":"\"foo\""},"value":"foo"}

      at visitRealmClassProperty (src/plugin/index.ts:324:17)
          at Array.map (<anonymous>)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = "foo";
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "mixed",
            optional: true,
            default: "foo"
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    FISK 10: {"type":"StringLiteral","start":173,"end":178,"loc":{"start":{"line":4,"column":79,"index":173},"end":{"line":4,"column":84,"index":178}},"extra":{"rawValue":"foo","raw":"\"foo\""},"value":"foo"}

      at visitRealmClassProperty (src/plugin/index.ts:324:17)
          at Array.map (<anonymous>)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = "foo";
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "mixed",
            optional: true,
            default: "foo"
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    FISK 10: {"type":"StringLiteral","start":173,"end":178,"loc":{"start":{"line":4,"column":79,"index":173},"end":{"line":4,"column":84,"index":178}},"extra":{"rawValue":"foo","raw":"\"foo\""},"value":"foo"}

      at visitRealmClassProperty (src/plugin/index.ts:324:17)
          at Array.map (<anonymous>)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = "foo";
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "mixed",
            optional: true,
            default: "foo"
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    FISK 10: {"type":"StringLiteral","start":162,"end":167,"loc":{"start":{"line":4,"column":68,"index":162},"end":{"line":4,"column":73,"index":167}},"extra":{"rawValue":"foo","raw":"\"foo\""},"value":"foo"}

      at visitRealmClassProperty (src/plugin/index.ts:324:17)
          at Array.map (<anonymous>)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = "foo";
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "mixed",
            optional: true,
            default: "foo"
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    FISK 10: {"type":"StringLiteral","start":173,"end":178,"loc":{"start":{"line":4,"column":79,"index":173},"end":{"line":4,"column":84,"index":178}},"extra":{"rawValue":"foo","raw":"\"foo\""},"value":"foo"}

      at visitRealmClassProperty (src/plugin/index.ts:324:17)
          at Array.map (<anonymous>)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = "foo";
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "mixed",
            optional: true,
            default: "foo"
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    FISK 10: {"type":"StringLiteral","start":173,"end":178,"loc":{"start":{"line":4,"column":79,"index":173},"end":{"line":4,"column":84,"index":178}},"extra":{"rawValue":"foo","raw":"\"foo\""},"value":"foo"}

      at visitRealmClassProperty (src/plugin/index.ts:324:17)
          at Array.map (<anonymous>)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = "foo";
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "mixed",
            optional: true,
            default: "foo"
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    FISK 10: {"type":"StringLiteral","start":156,"end":161,"loc":{"start":{"line":4,"column":62,"index":156},"end":{"line":4,"column":67,"index":161}},"extra":{"rawValue":"foo","raw":"\"foo\""},"value":"foo"}

      at visitRealmClassProperty (src/plugin/index.ts:324:17)
          at Array.map (<anonymous>)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = "foo";
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "mixed",
            optional: true,
            default: "foo"
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    FISK 10: {"type":"StringLiteral","start":167,"end":172,"loc":{"start":{"line":4,"column":73,"index":167},"end":{"line":4,"column":78,"index":172}},"extra":{"rawValue":"foo","raw":"\"foo\""},"value":"foo"}

      at visitRealmClassProperty (src/plugin/index.ts:324:17)
          at Array.map (<anonymous>)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = "foo";
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "mixed",
            optional: true,
            default: "foo"
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    FISK 10: {"type":"StringLiteral","start":167,"end":172,"loc":{"start":{"line":4,"column":73,"index":167},"end":{"line":4,"column":78,"index":172}},"extra":{"rawValue":"foo","raw":"\"foo\""},"value":"foo"}

      at visitRealmClassProperty (src/plugin/index.ts:324:17)
          at Array.map (<anonymous>)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = "foo";
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "mixed",
            optional: true,
            default: "foo"
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    FISK 10: {"type":"NumericLiteral","start":167,"end":170,"loc":{"start":{"line":4,"column":73,"index":167},"end":{"line":4,"column":76,"index":170}},"extra":{"rawValue":123,"raw":"123"},"value":123}

      at visitRealmClassProperty (src/plugin/index.ts:324:17)
          at Array.map (<anonymous>)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = 123;
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "mixed",
            default: 123
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    FISK 10: {"type":"NumericLiteral","start":161,"end":164,"loc":{"start":{"line":4,"column":67,"index":161},"end":{"line":4,"column":70,"index":164}},"extra":{"rawValue":123,"raw":"123"},"value":123}

      at visitRealmClassProperty (src/plugin/index.ts:324:17)
          at Array.map (<anonymous>)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = 123;
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "mixed",
            default: 123
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    FISK 10: {"type":"NumericLiteral","start":161,"end":164,"loc":{"start":{"line":4,"column":67,"index":161},"end":{"line":4,"column":70,"index":164}},"extra":{"rawValue":123,"raw":"123"},"value":123}

      at visitRealmClassProperty (src/plugin/index.ts:324:17)
          at Array.map (<anonymous>)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = 123;
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "mixed",
            default: 123
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    FISK 10: {"type":"NumericLiteral","start":155,"end":158,"loc":{"start":{"line":4,"column":61,"index":155},"end":{"line":4,"column":64,"index":158}},"extra":{"rawValue":123,"raw":"123"},"value":123}

      at visitRealmClassProperty (src/plugin/index.ts:324:17)
          at Array.map (<anonymous>)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = 123;
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "mixed",
            default: 123
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    FISK 10: {"type":"NumericLiteral","start":168,"end":171,"loc":{"start":{"line":4,"column":74,"index":168},"end":{"line":4,"column":77,"index":171}},"extra":{"rawValue":123,"raw":"123"},"value":123}

      at visitRealmClassProperty (src/plugin/index.ts:324:17)
          at Array.map (<anonymous>)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = 123;
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "mixed",
            optional: true,
            default: 123
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    FISK 10: {"type":"NumericLiteral","start":179,"end":182,"loc":{"start":{"line":4,"column":85,"index":179},"end":{"line":4,"column":88,"index":182}},"extra":{"rawValue":123,"raw":"123"},"value":123}

      at visitRealmClassProperty (src/plugin/index.ts:324:17)
          at Array.map (<anonymous>)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = 123;
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "mixed",
            optional: true,
            default: 123
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    FISK 10: {"type":"NumericLiteral","start":179,"end":182,"loc":{"start":{"line":4,"column":85,"index":179},"end":{"line":4,"column":88,"index":182}},"extra":{"rawValue":123,"raw":"123"},"value":123}

      at visitRealmClassProperty (src/plugin/index.ts:324:17)
          at Array.map (<anonymous>)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = 123;
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "mixed",
            optional: true,
            default: 123
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    FISK 10: {"type":"NumericLiteral","start":162,"end":165,"loc":{"start":{"line":4,"column":68,"index":162},"end":{"line":4,"column":71,"index":165}},"extra":{"rawValue":123,"raw":"123"},"value":123}

      at visitRealmClassProperty (src/plugin/index.ts:324:17)
          at Array.map (<anonymous>)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = 123;
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "mixed",
            optional: true,
            default: 123
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    FISK 10: {"type":"NumericLiteral","start":173,"end":176,"loc":{"start":{"line":4,"column":79,"index":173},"end":{"line":4,"column":82,"index":176}},"extra":{"rawValue":123,"raw":"123"},"value":123}

      at visitRealmClassProperty (src/plugin/index.ts:324:17)
          at Array.map (<anonymous>)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = 123;
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "mixed",
            optional: true,
            default: 123
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    FISK 10: {"type":"NumericLiteral","start":173,"end":176,"loc":{"start":{"line":4,"column":79,"index":173},"end":{"line":4,"column":82,"index":176}},"extra":{"rawValue":123,"raw":"123"},"value":123}

      at visitRealmClassProperty (src/plugin/index.ts:324:17)
          at Array.map (<anonymous>)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = 123;
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "mixed",
            optional: true,
            default: 123
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    FISK 10: {"type":"NumericLiteral","start":162,"end":165,"loc":{"start":{"line":4,"column":68,"index":162},"end":{"line":4,"column":71,"index":165}},"extra":{"rawValue":123,"raw":"123"},"value":123}

      at visitRealmClassProperty (src/plugin/index.ts:324:17)
          at Array.map (<anonymous>)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = 123;
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "mixed",
            optional: true,
            default: 123
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    FISK 10: {"type":"NumericLiteral","start":173,"end":176,"loc":{"start":{"line":4,"column":79,"index":173},"end":{"line":4,"column":82,"index":176}},"extra":{"rawValue":123,"raw":"123"},"value":123}

      at visitRealmClassProperty (src/plugin/index.ts:324:17)
          at Array.map (<anonymous>)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = 123;
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "mixed",
            optional: true,
            default: 123
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    FISK 10: {"type":"NumericLiteral","start":173,"end":176,"loc":{"start":{"line":4,"column":79,"index":173},"end":{"line":4,"column":82,"index":176}},"extra":{"rawValue":123,"raw":"123"},"value":123}

      at visitRealmClassProperty (src/plugin/index.ts:324:17)
          at Array.map (<anonymous>)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = 123;
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "mixed",
            optional: true,
            default: 123
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    FISK 10: {"type":"NumericLiteral","start":156,"end":159,"loc":{"start":{"line":4,"column":62,"index":156},"end":{"line":4,"column":65,"index":159}},"extra":{"rawValue":123,"raw":"123"},"value":123}

      at visitRealmClassProperty (src/plugin/index.ts:324:17)
          at Array.map (<anonymous>)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = 123;
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "mixed",
            optional: true,
            default: 123
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    FISK 10: {"type":"NumericLiteral","start":167,"end":170,"loc":{"start":{"line":4,"column":73,"index":167},"end":{"line":4,"column":76,"index":170}},"extra":{"rawValue":123,"raw":"123"},"value":123}

      at visitRealmClassProperty (src/plugin/index.ts:324:17)
          at Array.map (<anonymous>)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = 123;
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "mixed",
            optional: true,
            default: 123
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    FISK 10: {"type":"NumericLiteral","start":167,"end":170,"loc":{"start":{"line":4,"column":73,"index":167},"end":{"line":4,"column":76,"index":170}},"extra":{"rawValue":123,"raw":"123"},"value":123}

      at visitRealmClassProperty (src/plugin/index.ts:324:17)
          at Array.map (<anonymous>)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      prop = 123;
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "mixed",
            optional: true,
            default: 123
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "Person"
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "Person",
            optional: true
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "Person",
            optional: true
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "Person",
            optional: true
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "linkingObjects",
            objectType: "Person",
            property: "friends"
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static schema = {
        name: "Person",
        properties: {
          prop: {
            type: "linkingObjects",
            objectType: "Person",
            property: "friends"
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    FISK 10: {"type":"NumericLiteral","start":156,"end":157,"loc":{"start":{"line":4,"column":62,"index":156},"end":{"line":4,"column":63,"index":157}},"extra":{"rawValue":2,"raw":"2"},"value":2}

      at visitRealmClassProperty (src/plugin/index.ts:324:17)
          at Array.map (<anonymous>)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      name = 2;
      static schema = {
        name: "Person",
        properties: {
          name: {
            type: "string",
            default: 2
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static name = 'test';
      static schema = {
        name: "Person",
        properties: {},
        name: "test"
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static primaryKey = 'test';
      static schema = {
        name: "Person",
        properties: {},
        primaryKey: "test"
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static embedded = true;
      static schema = {
        name: "Person",
        properties: {},
        embedded: true
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static asymmetric = true;
      static schema = {
        name: "Person",
        properties: {},
        asymmetric: true
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      static name = 'test';
      static primaryKey = 'test';
      static embedded = true;
      static asymmetric = true;
      static schema = {
        name: "Person",
        properties: {},
        name: "test",
        primaryKey: "test",
        embedded: true,
        asymmetric: true
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      name;
      static schema = {
        name: "Person",
        properties: {
          name: {
            type: "string",
            indexed: true
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      name;
      static schema = {
        name: "Person",
        properties: {
          name: {
            type: "string",
            indexed: true
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    var _class, _descriptor;
    
    function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }
    
    function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'proposal-class-properties is enabled and runs after the decorators transform.'); }
    
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed } from "realm";
    export // Modified by @realm/babel-plugin
    let Person = (_class = class Person extends Realm.Object {
      name = _initializerWarningHelper(_descriptor, this);
      static schema = {
        name: "Person",
        properties: {
          name: {
            type: "string"
          }
        }
      };
    }, (_descriptor = _applyDecoratedDescriptor(_class.prototype, "name", [index], {
      configurable: true,
      enumerable: true,
      writable: true,
      initializer: null
    })), _class);

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      name;
      static schema = {
        name: "Person",
        properties: {
          name: {
            type: "string",
            indexed: true
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      name;
      static schema = {
        name: "Person",
        properties: {
          name: {
            type: "string",
            mapTo: "rename"
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      name;
      static schema = {
        name: "Person",
        properties: {
          name: {
            type: "string",
            mapTo: "rename"
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    var _dec, _class, _descriptor;
    
    function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }
    
    function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'proposal-class-properties is enabled and runs after the decorators transform.'); }
    
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed } from "realm";
    export // Modified by @realm/babel-plugin
    let Person = (_dec = mapTo("rename"), (_class = class Person extends Realm.Object {
      name = _initializerWarningHelper(_descriptor, this);
      static schema = {
        name: "Person",
        properties: {
          name: {
            type: "string"
          }
        }
      };
    }, (_descriptor = _applyDecoratedDescriptor(_class.prototype, "name", [_dec], {
      configurable: true,
      enumerable: true,
      writable: true,
      initializer: null
    })), _class));

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      name;
      static schema = {
        name: "Person",
        properties: {
          name: {
            type: "string",
            mapTo: "rename"
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      name;
      static schema = {
        name: "Person",
        properties: {
          name: {
            type: "string",
            indexed: true,
            mapTo: "rename"
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed, index, mapTo } from "realm";
    export // Modified by @realm/babel-plugin
    class Person extends Realm.Object {
      description;
      isComplete;
      static schema = {
        name: "Person",
        properties: {
          _id: {
            type: "objectId"
          },
          description: {
            type: "string",
            indexed: true
          },
          isComplete: {
            type: "bool",
            mapTo: "complete"
          },
          createdAt: {
            type: "date"
          },
          userId: {
            type: "string"
          }
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    import Realm, { Types, BSON, List, Set, Dictionary, Mixed } from "realm";
    
    class Test extends Realm.Object {
      static schema = {
        name: 'Task',
        primaryKey: '_id',
        properties: {
          _id: 'objectId'
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

  console.log
    class Test {
      static schema = {
        name: 'Task',
        primaryKey: '_id',
        properties: {
          _id: 'objectId'
        }
      };
    }

      at transform (src/tests/transform.ts:53:13)

